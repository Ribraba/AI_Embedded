
IA Embarquee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009da4  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b2e4  08009f80  08009f80  0000af80  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015264  08015264  0001797c  2**0
                  CONTENTS
  4 .ARM          00000008  08015264  08015264  00016264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801526c  0801526c  0001797c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801526c  0801526c  0001626c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015270  08015270  00016270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000097c  20000000  08015274  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cd8  20000980  08015bf0  00017980  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20040000  20040000  00018000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001797c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca1c  00000000  00000000  000179ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a67  00000000  00000000  000343c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00037e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000115a  00000000  00000000  00039498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035eba  00000000  00000000  0003a5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db74  00000000  00000000  000704ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013d507  00000000  00000000  0008e020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  001cb527  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067d8  00000000  00000000  001cb5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001d1d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000980 	.word	0x20000980
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009f4c 	.word	0x08009f4c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000984 	.word	0x20000984
 80001fc:	08009f4c 	.word	0x08009f4c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f001 f8a1 	bl	80016da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f815 	bl	80005c6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 fa78 	bl	8000a90 <MX_GPIO_Init>
  MX_FMC_Init();
 80005a0:	f000 fa10 	bl	80009c4 <MX_FMC_Init>
  MX_I2C1_Init();
 80005a4:	f000 f862 	bl	800066c <MX_I2C1_Init>
  MX_SAI1_Init();
 80005a8:	f000 f8a0 	bl	80006ec <MX_SAI1_Init>
  MX_SPI2_Init();
 80005ac:	f000 f906 	bl	80007bc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80005b0:	f000 f942 	bl	8000838 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005b4:	f000 f98c 	bl	80008d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005b8:	f000 f9d6 	bl	8000968 <MX_USB_OTG_FS_PCD_Init>
  MX_X_CUBE_AI_Init();
 80005bc:	f006 fe72 	bl	80072a4 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 80005c0:	f006 fe7e 	bl	80072c0 <MX_X_CUBE_AI_Process>
 80005c4:	e7fc      	b.n	80005c0 <main+0x30>

080005c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b096      	sub	sp, #88	@ 0x58
 80005ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	2244      	movs	r2, #68	@ 0x44
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f008 fda7 	bl	8009128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005da:	463b      	mov	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005e8:	2000      	movs	r0, #0
 80005ea:	f001 fe25 	bl	8002238 <HAL_PWREx_ControlVoltageScaling>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005f4:	f000 fc6a 	bl	8000ecc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 80005f8:	2330      	movs	r3, #48	@ 0x30
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000608:	2360      	movs	r3, #96	@ 0x60
 800060a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000610:	2301      	movs	r3, #1
 8000612:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000614:	2301      	movs	r3, #1
 8000616:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000618:	233c      	movs	r3, #60	@ 0x3c
 800061a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 800061c:	2305      	movs	r3, #5
 800061e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fec7 	bl	80023c0 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000638:	f000 fc48 	bl	8000ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2303      	movs	r3, #3
 8000642:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	2105      	movs	r1, #5
 8000654:	4618      	mov	r0, r3
 8000656:	f002 facd 	bl	8002bf4 <HAL_RCC_ClockConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000660:	f000 fc34 	bl	8000ecc <Error_Handler>
  }
}
 8000664:	bf00      	nop
 8000666:	3758      	adds	r7, #88	@ 0x58
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000670:	4b1b      	ldr	r3, [pc, #108]	@ (80006e0 <MX_I2C1_Init+0x74>)
 8000672:	4a1c      	ldr	r2, [pc, #112]	@ (80006e4 <MX_I2C1_Init+0x78>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000676:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <MX_I2C1_Init+0x74>)
 8000678:	4a1b      	ldr	r2, [pc, #108]	@ (80006e8 <MX_I2C1_Init+0x7c>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800067c:	4b18      	ldr	r3, [pc, #96]	@ (80006e0 <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000682:	4b17      	ldr	r3, [pc, #92]	@ (80006e0 <MX_I2C1_Init+0x74>)
 8000684:	2201      	movs	r2, #1
 8000686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000688:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <MX_I2C1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800068e:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <MX_I2C1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000694:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069a:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <MX_I2C1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <MX_I2C1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a6:	480e      	ldr	r0, [pc, #56]	@ (80006e0 <MX_I2C1_Init+0x74>)
 80006a8:	f001 fb40 	bl	8001d2c <HAL_I2C_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006b2:	f000 fc0b 	bl	8000ecc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b6:	2100      	movs	r1, #0
 80006b8:	4809      	ldr	r0, [pc, #36]	@ (80006e0 <MX_I2C1_Init+0x74>)
 80006ba:	f001 fbd2 	bl	8001e62 <HAL_I2CEx_ConfigAnalogFilter>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006c4:	f000 fc02 	bl	8000ecc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c8:	2100      	movs	r1, #0
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_I2C1_Init+0x74>)
 80006cc:	f001 fc14 	bl	8001ef8 <HAL_I2CEx_ConfigDigitalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006d6:	f000 fbf9 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000099c 	.word	0x2000099c
 80006e4:	40005400 	.word	0x40005400
 80006e8:	307075b1 	.word	0x307075b1

080006ec <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80006f0:	4b2f      	ldr	r3, [pc, #188]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 80006f2:	4a30      	ldr	r2, [pc, #192]	@ (80007b4 <MX_SAI1_Init+0xc8>)
 80006f4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80006f6:	4b2e      	ldr	r3, [pc, #184]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80006fc:	4b2c      	ldr	r3, [pc, #176]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000702:	4b2b      	ldr	r3, [pc, #172]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000704:	2240      	movs	r2, #64	@ 0x40
 8000706:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000708:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800070a:	2200      	movs	r2, #0
 800070c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800070e:	4b28      	ldr	r3, [pc, #160]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000710:	2200      	movs	r2, #0
 8000712:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000714:	4b26      	ldr	r3, [pc, #152]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800071a:	4b25      	ldr	r3, [pc, #148]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000720:	4b23      	ldr	r3, [pc, #140]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000726:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800072c:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000732:	4b1f      	ldr	r3, [pc, #124]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000734:	4a20      	ldr	r2, [pc, #128]	@ (80007b8 <MX_SAI1_Init+0xcc>)
 8000736:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000738:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800073e:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000740:	2200      	movs	r2, #0
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000744:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000746:	2200      	movs	r2, #0
 8000748:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800074a:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800074c:	2200      	movs	r2, #0
 800074e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000750:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800075a:	2200      	movs	r2, #0
 800075c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000760:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000764:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000766:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000768:	2208      	movs	r2, #8
 800076a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800076c:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800076e:	2201      	movs	r2, #1
 8000770:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000772:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000774:	2200      	movs	r2, #0
 8000776:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000778:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800077a:	2200      	movs	r2, #0
 800077c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000780:	2200      	movs	r2, #0
 8000782:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000786:	2200      	movs	r2, #0
 8000788:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800078c:	2200      	movs	r2, #0
 800078e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000792:	2201      	movs	r2, #1
 8000794:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000798:	2200      	movs	r2, #0
 800079a:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800079e:	f004 fa8d 	bl	8004cbc <HAL_SAI_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 80007a8:	f000 fb90 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200009f0 	.word	0x200009f0
 80007b4:	40015404 	.word	0x40015404
 80007b8:	0002ee00 	.word	0x0002ee00

080007bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000834 <MX_SPI2_Init+0x78>)
 80007c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007ce:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80007d4:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007d6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80007da:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007f2:	2208      	movs	r2, #8
 80007f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_SPI2_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000808:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_SPI2_Init+0x74>)
 800080a:	2207      	movs	r2, #7
 800080c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_SPI2_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_SPI2_Init+0x74>)
 8000816:	2208      	movs	r2, #8
 8000818:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_SPI2_Init+0x74>)
 800081c:	f004 fc66 	bl	80050ec <HAL_SPI_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000826:	f000 fb51 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000a84 	.word	0x20000a84
 8000834:	40003800 	.word	0x40003800

08000838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b22      	ldr	r3, [pc, #136]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 800083e:	4a23      	ldr	r2, [pc, #140]	@ (80008cc <MX_USART2_UART_Init+0x94>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000842:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b1c      	ldr	r3, [pc, #112]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b16      	ldr	r3, [pc, #88]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000874:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087a:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000880:	4811      	ldr	r0, [pc, #68]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 8000882:	f004 fd1e 	bl	80052c2 <HAL_UART_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800088c:	f000 fb1e 	bl	8000ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	480d      	ldr	r0, [pc, #52]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 8000894:	f005 fc10 	bl	80060b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800089e:	f000 fb15 	bl	8000ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4808      	ldr	r0, [pc, #32]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 80008a6:	f005 fc45 	bl	8006134 <HAL_UARTEx_SetRxFifoThreshold>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008b0:	f000 fb0c 	bl	8000ecc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 80008b6:	f005 fbc6 	bl	8006046 <HAL_UARTEx_DisableFifoMode>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008c0:	f000 fb04 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000ae8 	.word	0x20000ae8
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d4:	4b22      	ldr	r3, [pc, #136]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008d6:	4a23      	ldr	r2, [pc, #140]	@ (8000964 <MX_USART3_UART_Init+0x94>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008da:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000918:	4811      	ldr	r0, [pc, #68]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800091a:	f004 fcd2 	bl	80052c2 <HAL_UART_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000924:	f000 fad2 	bl	8000ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	480d      	ldr	r0, [pc, #52]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800092c:	f005 fbc4 	bl	80060b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000936:	f000 fac9 	bl	8000ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4808      	ldr	r0, [pc, #32]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800093e:	f005 fbf9 	bl	8006134 <HAL_UARTEx_SetRxFifoThreshold>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000948:	f000 fac0 	bl	8000ecc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800094e:	f005 fb7a 	bl	8006046 <HAL_UARTEx_DisableFifoMode>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000958:	f000 fab8 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000b7c 	.word	0x20000b7c
 8000964:	40004800 	.word	0x40004800

08000968 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000972:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	2206      	movs	r2, #6
 8000978:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097c:	2202      	movs	r2, #2
 800097e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	2202      	movs	r2, #2
 8000984:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ac:	f001 faf0 	bl	8001f90 <HAL_PCD_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009b6:	f000 fa89 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000c10 	.word	0x20000c10

080009c4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80009ca:	463b      	mov	r3, r7
 80009cc:	2220      	movs	r2, #32
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f008 fba9 	bl	8009128 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80009d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a88 <MX_FMC_Init+0xc4>)
 80009d8:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80009dc:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80009de:	4b2a      	ldr	r3, [pc, #168]	@ (8000a88 <MX_FMC_Init+0xc4>)
 80009e0:	4a2a      	ldr	r2, [pc, #168]	@ (8000a8c <MX_FMC_Init+0xc8>)
 80009e2:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80009e4:	4b28      	ldr	r3, [pc, #160]	@ (8000a88 <MX_FMC_Init+0xc4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80009ea:	4b27      	ldr	r3, [pc, #156]	@ (8000a88 <MX_FMC_Init+0xc4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 80009f0:	4b25      	ldr	r3, [pc, #148]	@ (8000a88 <MX_FMC_Init+0xc4>)
 80009f2:	2204      	movs	r2, #4
 80009f4:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80009f6:	4b24      	ldr	r3, [pc, #144]	@ (8000a88 <MX_FMC_Init+0xc4>)
 80009f8:	2210      	movs	r2, #16
 80009fa:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 80009fc:	4b22      	ldr	r3, [pc, #136]	@ (8000a88 <MX_FMC_Init+0xc4>)
 80009fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a02:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000a04:	4b20      	ldr	r3, [pc, #128]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000a24:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a2c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a30:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000a38:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	645a      	str	r2, [r3, #68]	@ 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000a44:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000a4e:	230f      	movs	r3, #15
 8000a50:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000a52:	23ff      	movs	r3, #255	@ 0xff
 8000a54:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000a5e:	2310      	movs	r3, #16
 8000a60:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a72:	f004 fbde 	bl	8005232 <HAL_SRAM_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8000a7c:	f000 fa26 	bl	8000ecc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a80:	bf00      	nop
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200010f4 	.word	0x200010f4
 8000a8c:	a0000104 	.word	0xa0000104

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	@ 0x38
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000aa6:	4bb2      	ldr	r3, [pc, #712]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aaa:	4ab1      	ldr	r2, [pc, #708]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab2:	4baf      	ldr	r3, [pc, #700]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000aba:	623b      	str	r3, [r7, #32]
 8000abc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000abe:	4bac      	ldr	r3, [pc, #688]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac2:	4aab      	ldr	r2, [pc, #684]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aca:	4ba9      	ldr	r3, [pc, #676]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ad2:	61fb      	str	r3, [r7, #28]
 8000ad4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad6:	4ba6      	ldr	r3, [pc, #664]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ada:	4aa5      	ldr	r2, [pc, #660]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000adc:	f043 0310 	orr.w	r3, r3, #16
 8000ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae2:	4ba3      	ldr	r3, [pc, #652]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae6:	f003 0310 	and.w	r3, r3, #16
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	4ba0      	ldr	r3, [pc, #640]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	4a9f      	ldr	r2, [pc, #636]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afa:	4b9d      	ldr	r3, [pc, #628]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b9a      	ldr	r3, [pc, #616]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	4a99      	ldr	r2, [pc, #612]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b12:	4b97      	ldr	r3, [pc, #604]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b1e:	4b94      	ldr	r3, [pc, #592]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	4a93      	ldr	r2, [pc, #588]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000b24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2a:	4b91      	ldr	r3, [pc, #580]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000b36:	f001 fc33 	bl	80023a0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3a:	4b8d      	ldr	r3, [pc, #564]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	4a8c      	ldr	r2, [pc, #560]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000b40:	f043 0308 	orr.w	r3, r3, #8
 8000b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b46:	4b8a      	ldr	r3, [pc, #552]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	4b87      	ldr	r3, [pc, #540]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b56:	4a86      	ldr	r2, [pc, #536]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5e:	4b84      	ldr	r3, [pc, #528]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6a:	4b81      	ldr	r3, [pc, #516]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	4a80      	ldr	r2, [pc, #512]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000b70:	f043 0320 	orr.w	r3, r3, #32
 8000b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b76:	4b7e      	ldr	r3, [pc, #504]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	f003 0320 	and.w	r3, r3, #32
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f244 0114 	movw	r1, #16404	@ 0x4014
 8000b88:	487a      	ldr	r0, [pc, #488]	@ (8000d74 <MX_GPIO_Init+0x2e4>)
 8000b8a:	f001 f8b7 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b94:	4878      	ldr	r0, [pc, #480]	@ (8000d78 <MX_GPIO_Init+0x2e8>)
 8000b96:	f001 f8b1 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2140      	movs	r1, #64	@ 0x40
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba2:	f001 f8ab 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2104      	movs	r1, #4
 8000baa:	4874      	ldr	r0, [pc, #464]	@ (8000d7c <MX_GPIO_Init+0x2ec>)
 8000bac:	f001 f8a6 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_IO2_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000bb0:	f44f 6364 	mov.w	r3, #3648	@ 0xe40
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	486c      	ldr	r0, [pc, #432]	@ (8000d80 <MX_GPIO_Init+0x2f0>)
 8000bce:	f000 ff03 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8000bd2:	f244 0314 	movw	r3, #16404	@ 0x4014
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4862      	ldr	r0, [pc, #392]	@ (8000d74 <MX_GPIO_Init+0x2e4>)
 8000bec:	f000 fef4 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000bf0:	2310      	movs	r3, #16
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c00:	2302      	movs	r3, #2
 8000c02:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	485c      	ldr	r0, [pc, #368]	@ (8000d7c <MX_GPIO_Init+0x2ec>)
 8000c0c:	f000 fee4 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000c10:	23b0      	movs	r3, #176	@ 0xb0
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c20:	230a      	movs	r3, #10
 8000c22:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4855      	ldr	r0, [pc, #340]	@ (8000d80 <MX_GPIO_Init+0x2f0>)
 8000c2c:	f000 fed4 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8000c30:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000c42:	2305      	movs	r3, #5
 8000c44:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	484d      	ldr	r0, [pc, #308]	@ (8000d84 <MX_GPIO_Init+0x2f4>)
 8000c4e:	f000 fec3 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000c52:	2302      	movs	r3, #2
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	4846      	ldr	r0, [pc, #280]	@ (8000d80 <MX_GPIO_Init+0x2f0>)
 8000c68:	f000 feb6 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000c6c:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c7e:	230a      	movs	r3, #10
 8000c80:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	483a      	ldr	r0, [pc, #232]	@ (8000d74 <MX_GPIO_Init+0x2e4>)
 8000c8a:	f000 fea5 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000c8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4832      	ldr	r0, [pc, #200]	@ (8000d74 <MX_GPIO_Init+0x2e4>)
 8000cac:	f000 fe94 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000cb0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4829      	ldr	r0, [pc, #164]	@ (8000d74 <MX_GPIO_Init+0x2e4>)
 8000cce:	f000 fe83 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000cd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4823      	ldr	r0, [pc, #140]	@ (8000d78 <MX_GPIO_Init+0x2e8>)
 8000cec:	f000 fe74 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000cf0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf6:	2312      	movs	r3, #18
 8000cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d02:	2304      	movs	r3, #4
 8000d04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	481d      	ldr	r0, [pc, #116]	@ (8000d84 <MX_GPIO_Init+0x2f4>)
 8000d0e:	f000 fe63 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000d12:	2340      	movs	r3, #64	@ 0x40
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d16:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d24:	4619      	mov	r1, r3
 8000d26:	4814      	ldr	r0, [pc, #80]	@ (8000d78 <MX_GPIO_Init+0x2e8>)
 8000d28:	f000 fe56 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000d2c:	2384      	movs	r3, #132	@ 0x84
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	480c      	ldr	r0, [pc, #48]	@ (8000d78 <MX_GPIO_Init+0x2e8>)
 8000d48:	f000 fe46 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	4804      	ldr	r0, [pc, #16]	@ (8000d78 <MX_GPIO_Init+0x2e8>)
 8000d68:	f000 fe36 	bl	80019d8 <HAL_GPIO_Init>
 8000d6c:	e00c      	b.n	8000d88 <MX_GPIO_Init+0x2f8>
 8000d6e:	bf00      	nop
 8000d70:	40021000 	.word	0x40021000
 8000d74:	48001c00 	.word	0x48001c00
 8000d78:	48000800 	.word	0x48000800
 8000d7c:	48000400 	.word	0x48000400
 8000d80:	48002000 	.word	0x48002000
 8000d84:	48001800 	.word	0x48001800

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000d88:	2318      	movs	r3, #24
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d8c:	230b      	movs	r3, #11
 8000d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4849      	ldr	r0, [pc, #292]	@ (8000ec0 <MX_GPIO_Init+0x430>)
 8000d9c:	f000 fe1c 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 8000da0:	2381      	movs	r3, #129	@ 0x81
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000da4:	230b      	movs	r3, #11
 8000da6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db0:	4619      	mov	r1, r3
 8000db2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db6:	f000 fe0f 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 8000dba:	2320      	movs	r3, #32
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd8:	f000 fdfe 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000ddc:	2340      	movs	r3, #64	@ 0x40
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df6:	f000 fdef 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e12:	4619      	mov	r1, r3
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e18:	f000 fdde 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000e1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000e2e:	230b      	movs	r3, #11
 8000e30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	4822      	ldr	r0, [pc, #136]	@ (8000ec4 <MX_GPIO_Init+0x434>)
 8000e3a:	f000 fdcd 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000e3e:	2310      	movs	r3, #16
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000e4e:	230a      	movs	r3, #10
 8000e50:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5c:	f000 fdbc 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000e60:	2301      	movs	r3, #1
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e64:	230b      	movs	r3, #11
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e70:	4619      	mov	r1, r3
 8000e72:	4815      	ldr	r0, [pc, #84]	@ (8000ec8 <MX_GPIO_Init+0x438>)
 8000e74:	f000 fdb0 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480e      	ldr	r0, [pc, #56]	@ (8000ec8 <MX_GPIO_Init+0x438>)
 8000e90:	f000 fda2 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <MX_GPIO_Init+0x438>)
 8000eb2:	f000 fd91 	bl	80019d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eb6:	bf00      	nop
 8000eb8:	3738      	adds	r7, #56	@ 0x38
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	48000800 	.word	0x48000800
 8000ec4:	48001400 	.word	0x48001400
 8000ec8:	48000400 	.word	0x48000400

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <Error_Handler+0x8>

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <HAL_MspInit+0x44>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	@ (8000f1c <HAL_MspInit+0x44>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eea:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <HAL_MspInit+0x44>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <HAL_MspInit+0x44>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efa:	4a08      	ldr	r2, [pc, #32]	@ (8000f1c <HAL_MspInit+0x44>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <HAL_MspInit+0x44>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0b2      	sub	sp, #200	@ 0xc8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f38:	f107 0318 	add.w	r3, r7, #24
 8000f3c:	229c      	movs	r2, #156	@ 0x9c
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f008 f8f1 	bl	8009128 <memset>
  if(hi2c->Instance==I2C1)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a33      	ldr	r2, [pc, #204]	@ (8001018 <HAL_I2C_MspInit+0xf8>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d15e      	bne.n	800100e <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f50:	2340      	movs	r3, #64	@ 0x40
 8000f52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f002 f903 	bl	8003168 <HAL_RCCEx_PeriphCLKConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f68:	f7ff ffb0 	bl	8000ecc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800101c <HAL_I2C_MspInit+0xfc>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f70:	4a2a      	ldr	r2, [pc, #168]	@ (800101c <HAL_I2C_MspInit+0xfc>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f78:	4b28      	ldr	r3, [pc, #160]	@ (800101c <HAL_I2C_MspInit+0xfc>)
 8000f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f84:	4b25      	ldr	r3, [pc, #148]	@ (800101c <HAL_I2C_MspInit+0xfc>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f88:	4a24      	ldr	r2, [pc, #144]	@ (800101c <HAL_I2C_MspInit+0xfc>)
 8000f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f90:	4b22      	ldr	r3, [pc, #136]	@ (800101c <HAL_I2C_MspInit+0xfc>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000f9c:	f001 fa00 	bl	80023a0 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8000fa0:	2340      	movs	r3, #64	@ 0x40
 8000fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa6:	2312      	movs	r3, #18
 8000fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4816      	ldr	r0, [pc, #88]	@ (8001020 <HAL_I2C_MspInit+0x100>)
 8000fc6:	f000 fd07 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8000fca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd2:	2312      	movs	r3, #18
 8000fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <HAL_I2C_MspInit+0x104>)
 8000ff2:	f000 fcf1 	bl	80019d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <HAL_I2C_MspInit+0xfc>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffa:	4a08      	ldr	r2, [pc, #32]	@ (800101c <HAL_I2C_MspInit+0xfc>)
 8000ffc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001000:	6593      	str	r3, [r2, #88]	@ 0x58
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_I2C_MspInit+0xfc>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001006:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800100e:	bf00      	nop
 8001010:	37c8      	adds	r7, #200	@ 0xc8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40005400 	.word	0x40005400
 800101c:	40021000 	.word	0x40021000
 8001020:	48000400 	.word	0x48000400
 8001024:	48001800 	.word	0x48001800

08001028 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	@ 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a25      	ldr	r2, [pc, #148]	@ (80010dc <HAL_SPI_MspInit+0xb4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d144      	bne.n	80010d4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800104a:	4b25      	ldr	r3, [pc, #148]	@ (80010e0 <HAL_SPI_MspInit+0xb8>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104e:	4a24      	ldr	r2, [pc, #144]	@ (80010e0 <HAL_SPI_MspInit+0xb8>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001054:	6593      	str	r3, [r2, #88]	@ 0x58
 8001056:	4b22      	ldr	r3, [pc, #136]	@ (80010e0 <HAL_SPI_MspInit+0xb8>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001062:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <HAL_SPI_MspInit+0xb8>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001066:	4a1e      	ldr	r2, [pc, #120]	@ (80010e0 <HAL_SPI_MspInit+0xb8>)
 8001068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800106c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106e:	4b1c      	ldr	r3, [pc, #112]	@ (80010e0 <HAL_SPI_MspInit+0xb8>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <HAL_SPI_MspInit+0xb8>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107e:	4a18      	ldr	r2, [pc, #96]	@ (80010e0 <HAL_SPI_MspInit+0xb8>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001086:	4b16      	ldr	r3, [pc, #88]	@ (80010e0 <HAL_SPI_MspInit+0xb8>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 8001092:	2301      	movs	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010a2:	2305      	movs	r3, #5
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <HAL_SPI_MspInit+0xbc>)
 80010ae:	f000 fc93 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 80010b2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010c4:	2305      	movs	r3, #5
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	@ (80010e8 <HAL_SPI_MspInit+0xc0>)
 80010d0:	f000 fc82 	bl	80019d8 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	@ 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40003800 	.word	0x40003800
 80010e0:	40021000 	.word	0x40021000
 80010e4:	48002000 	.word	0x48002000
 80010e8:	48000400 	.word	0x48000400

080010ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0b4      	sub	sp, #208	@ 0xd0
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001104:	f107 0320 	add.w	r3, r7, #32
 8001108:	229c      	movs	r2, #156	@ 0x9c
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f008 f80b 	bl	8009128 <memset>
  if(huart->Instance==USART2)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a54      	ldr	r2, [pc, #336]	@ (8001268 <HAL_UART_MspInit+0x17c>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d13c      	bne.n	8001196 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800111c:	2302      	movs	r3, #2
 800111e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001120:	2300      	movs	r3, #0
 8001122:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001124:	f107 0320 	add.w	r3, r7, #32
 8001128:	4618      	mov	r0, r3
 800112a:	f002 f81d 	bl	8003168 <HAL_RCCEx_PeriphCLKConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001134:	f7ff feca 	bl	8000ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001138:	4b4c      	ldr	r3, [pc, #304]	@ (800126c <HAL_UART_MspInit+0x180>)
 800113a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113c:	4a4b      	ldr	r2, [pc, #300]	@ (800126c <HAL_UART_MspInit+0x180>)
 800113e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001142:	6593      	str	r3, [r2, #88]	@ 0x58
 8001144:	4b49      	ldr	r3, [pc, #292]	@ (800126c <HAL_UART_MspInit+0x180>)
 8001146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114c:	61fb      	str	r3, [r7, #28]
 800114e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	4b46      	ldr	r3, [pc, #280]	@ (800126c <HAL_UART_MspInit+0x180>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001154:	4a45      	ldr	r2, [pc, #276]	@ (800126c <HAL_UART_MspInit+0x180>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115c:	4b43      	ldr	r3, [pc, #268]	@ (800126c <HAL_UART_MspInit+0x180>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	61bb      	str	r3, [r7, #24]
 8001166:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8001168:	230c      	movs	r3, #12
 800116a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001180:	2307      	movs	r3, #7
 8001182:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800118a:	4619      	mov	r1, r3
 800118c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001190:	f000 fc22 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001194:	e063      	b.n	800125e <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART3)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a35      	ldr	r2, [pc, #212]	@ (8001270 <HAL_UART_MspInit+0x184>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d15e      	bne.n	800125e <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011a0:	2304      	movs	r3, #4
 80011a2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	4618      	mov	r0, r3
 80011ae:	f001 ffdb 	bl	8003168 <HAL_RCCEx_PeriphCLKConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80011b8:	f7ff fe88 	bl	8000ecc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011bc:	4b2b      	ldr	r3, [pc, #172]	@ (800126c <HAL_UART_MspInit+0x180>)
 80011be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c0:	4a2a      	ldr	r2, [pc, #168]	@ (800126c <HAL_UART_MspInit+0x180>)
 80011c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80011c8:	4b28      	ldr	r3, [pc, #160]	@ (800126c <HAL_UART_MspInit+0x180>)
 80011ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	4b25      	ldr	r3, [pc, #148]	@ (800126c <HAL_UART_MspInit+0x180>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d8:	4a24      	ldr	r2, [pc, #144]	@ (800126c <HAL_UART_MspInit+0x180>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e0:	4b22      	ldr	r3, [pc, #136]	@ (800126c <HAL_UART_MspInit+0x180>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ec:	4b1f      	ldr	r3, [pc, #124]	@ (800126c <HAL_UART_MspInit+0x180>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f0:	4a1e      	ldr	r2, [pc, #120]	@ (800126c <HAL_UART_MspInit+0x180>)
 80011f2:	f043 0302 	orr.w	r3, r3, #2
 80011f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f8:	4b1c      	ldr	r3, [pc, #112]	@ (800126c <HAL_UART_MspInit+0x180>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8001204:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001208:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800121e:	2307      	movs	r3, #7
 8001220:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001228:	4619      	mov	r1, r3
 800122a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800122e:	f000 fbd3 	bl	80019d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8001232:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001236:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800124c:	2307      	movs	r3, #7
 800124e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001256:	4619      	mov	r1, r3
 8001258:	4806      	ldr	r0, [pc, #24]	@ (8001274 <HAL_UART_MspInit+0x188>)
 800125a:	f000 fbbd 	bl	80019d8 <HAL_GPIO_Init>
}
 800125e:	bf00      	nop
 8001260:	37d0      	adds	r7, #208	@ 0xd0
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40004400 	.word	0x40004400
 800126c:	40021000 	.word	0x40021000
 8001270:	40004800 	.word	0x40004800
 8001274:	48000400 	.word	0x48000400

08001278 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b0b2      	sub	sp, #200	@ 0xc8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001290:	f107 0318 	add.w	r3, r7, #24
 8001294:	229c      	movs	r2, #156	@ 0x9c
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f007 ff45 	bl	8009128 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012a6:	d16c      	bne.n	8001382 <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b4:	f107 0318 	add.w	r3, r7, #24
 80012b8:	4618      	mov	r0, r3
 80012ba:	f001 ff55 	bl	8003168 <HAL_RCCEx_PeriphCLKConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80012c4:	f7ff fe02 	bl	8000ecc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b30      	ldr	r3, [pc, #192]	@ (800138c <HAL_PCD_MspInit+0x114>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012cc:	4a2f      	ldr	r2, [pc, #188]	@ (800138c <HAL_PCD_MspInit+0x114>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d4:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <HAL_PCD_MspInit+0x114>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	697b      	ldr	r3, [r7, #20]
    PA10     ------> USB_OTG_FS_ID
    PA12     ------> USB_OTG_FS_DP
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin|USB_OTG_FS_DP_Pin|USB_OTGFS_DM_Pin;
 80012e0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80012e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012fa:	230a      	movs	r3, #10
 80012fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130a:	f000 fb65 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTGFS_VBUS_Pin;
 800130e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001312:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(USB_OTGFS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001326:	4619      	mov	r1, r3
 8001328:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800132c:	f000 fb54 	bl	80019d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001330:	4b16      	ldr	r3, [pc, #88]	@ (800138c <HAL_PCD_MspInit+0x114>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001334:	4a15      	ldr	r2, [pc, #84]	@ (800138c <HAL_PCD_MspInit+0x114>)
 8001336:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800133a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133c:	4b13      	ldr	r3, [pc, #76]	@ (800138c <HAL_PCD_MspInit+0x114>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001340:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001348:	4b10      	ldr	r3, [pc, #64]	@ (800138c <HAL_PCD_MspInit+0x114>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d114      	bne.n	800137e <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001354:	4b0d      	ldr	r3, [pc, #52]	@ (800138c <HAL_PCD_MspInit+0x114>)
 8001356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001358:	4a0c      	ldr	r2, [pc, #48]	@ (800138c <HAL_PCD_MspInit+0x114>)
 800135a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800135e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001360:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <HAL_PCD_MspInit+0x114>)
 8001362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800136c:	f001 f808 	bl	8002380 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_PCD_MspInit+0x114>)
 8001372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001374:	4a05      	ldr	r2, [pc, #20]	@ (800138c <HAL_PCD_MspInit+0x114>)
 8001376:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800137a:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800137c:	e001      	b.n	8001382 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 800137e:	f000 ffff 	bl	8002380 <HAL_PWREx_EnableVddUSB>
}
 8001382:	bf00      	nop
 8001384:	37c8      	adds	r7, #200	@ 0xc8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80013a4:	4b32      	ldr	r3, [pc, #200]	@ (8001470 <HAL_FMC_MspInit+0xe0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d15d      	bne.n	8001468 <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 80013ac:	4b30      	ldr	r3, [pc, #192]	@ (8001470 <HAL_FMC_MspInit+0xe0>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80013b2:	4b30      	ldr	r3, [pc, #192]	@ (8001474 <HAL_FMC_MspInit+0xe4>)
 80013b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001474 <HAL_FMC_MspInit+0xe4>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80013be:	4b2d      	ldr	r3, [pc, #180]	@ (8001474 <HAL_FMC_MspInit+0xe4>)
 80013c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 80013ca:	f64f 739b 	movw	r3, #65435	@ 0xff9b
 80013ce:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013dc:	230c      	movs	r3, #12
 80013de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4824      	ldr	r0, [pc, #144]	@ (8001478 <HAL_FMC_MspInit+0xe8>)
 80013e6:	f000 faf7 	bl	80019d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 80013ea:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 80013ee:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013fc:	230c      	movs	r3, #12
 80013fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	4619      	mov	r1, r3
 8001404:	481d      	ldr	r0, [pc, #116]	@ (800147c <HAL_FMC_MspInit+0xec>)
 8001406:	f000 fae7 	bl	80019d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 800140a:	2380      	movs	r3, #128	@ 0x80
 800140c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001416:	2303      	movs	r3, #3
 8001418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800141a:	230c      	movs	r3, #12
 800141c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	4619      	mov	r1, r3
 8001422:	4817      	ldr	r0, [pc, #92]	@ (8001480 <HAL_FMC_MspInit+0xf0>)
 8001424:	f000 fad8 	bl	80019d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001428:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 800142c:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800143a:	230c      	movs	r3, #12
 800143c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	4619      	mov	r1, r3
 8001442:	4810      	ldr	r0, [pc, #64]	@ (8001484 <HAL_FMC_MspInit+0xf4>)
 8001444:	f000 fac8 	bl	80019d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 8001448:	233f      	movs	r3, #63	@ 0x3f
 800144a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001458:	230c      	movs	r3, #12
 800145a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4619      	mov	r1, r3
 8001460:	4809      	ldr	r0, [pc, #36]	@ (8001488 <HAL_FMC_MspInit+0xf8>)
 8001462:	f000 fab9 	bl	80019d8 <HAL_GPIO_Init>
 8001466:	e000      	b.n	800146a <HAL_FMC_MspInit+0xda>
    return;
 8001468:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20001144 	.word	0x20001144
 8001474:	40021000 	.word	0x40021000
 8001478:	48001000 	.word	0x48001000
 800147c:	48000c00 	.word	0x48000c00
 8001480:	48000400 	.word	0x48000400
 8001484:	48001400 	.word	0x48001400
 8001488:	48001800 	.word	0x48001800

0800148c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001494:	f7ff ff7c 	bl	8001390 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b0b0      	sub	sp, #192	@ 0xc0
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	229c      	movs	r2, #156	@ 0x9c
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f007 fe39 	bl	8009128 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a32      	ldr	r2, [pc, #200]	@ (8001584 <HAL_SAI_MspInit+0xe4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d15d      	bne.n	800157c <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80014c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014c4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80014ca:	2301      	movs	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014ce:	2301      	movs	r3, #1
 80014d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80014d2:	2310      	movs	r3, #16
 80014d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014da:	2302      	movs	r3, #2
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014de:	2302      	movs	r3, #2
 80014e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80014e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e8:	f107 0310 	add.w	r3, r7, #16
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 fe3b 	bl	8003168 <HAL_RCCEx_PeriphCLKConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 80014f8:	f7ff fce8 	bl	8000ecc <Error_Handler>
    }

    if (SAI1_client == 0)
 80014fc:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <HAL_SAI_MspInit+0xe8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d10b      	bne.n	800151c <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001504:	4b21      	ldr	r3, [pc, #132]	@ (800158c <HAL_SAI_MspInit+0xec>)
 8001506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001508:	4a20      	ldr	r2, [pc, #128]	@ (800158c <HAL_SAI_MspInit+0xec>)
 800150a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800150e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001510:	4b1e      	ldr	r3, [pc, #120]	@ (800158c <HAL_SAI_MspInit+0xec>)
 8001512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 800151c:	4b1a      	ldr	r3, [pc, #104]	@ (8001588 <HAL_SAI_MspInit+0xe8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	4a19      	ldr	r2, [pc, #100]	@ (8001588 <HAL_SAI_MspInit+0xe8>)
 8001524:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PB9     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PE5     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 8001526:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800152a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001540:	230d      	movs	r3, #13
 8001542:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001546:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800154a:	4619      	mov	r1, r3
 800154c:	4810      	ldr	r0, [pc, #64]	@ (8001590 <HAL_SAI_MspInit+0xf0>)
 800154e:	f000 fa43 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8001552:	2364      	movs	r3, #100	@ 0x64
 8001554:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800156a:	230d      	movs	r3, #13
 800156c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001570:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001574:	4619      	mov	r1, r3
 8001576:	4807      	ldr	r0, [pc, #28]	@ (8001594 <HAL_SAI_MspInit+0xf4>)
 8001578:	f000 fa2e 	bl	80019d8 <HAL_GPIO_Init>

    }
}
 800157c:	bf00      	nop
 800157e:	37c0      	adds	r7, #192	@ 0xc0
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40015404 	.word	0x40015404
 8001588:	20001148 	.word	0x20001148
 800158c:	40021000 	.word	0x40021000
 8001590:	48000400 	.word	0x48000400
 8001594:	48001000 	.word	0x48001000

08001598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <NMI_Handler+0x4>

080015a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <HardFault_Handler+0x4>

080015a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <MemManage_Handler+0x4>

080015b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <UsageFault_Handler+0x4>

080015c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ee:	f000 f8c9 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001600:	4a14      	ldr	r2, [pc, #80]	@ (8001654 <_sbrk+0x5c>)
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <_sbrk+0x60>)
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800160c:	4b13      	ldr	r3, [pc, #76]	@ (800165c <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001614:	4b11      	ldr	r3, [pc, #68]	@ (800165c <_sbrk+0x64>)
 8001616:	4a12      	ldr	r2, [pc, #72]	@ (8001660 <_sbrk+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	429a      	cmp	r2, r3
 8001626:	d207      	bcs.n	8001638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001628:	f007 fd96 	bl	8009158 <__errno>
 800162c:	4603      	mov	r3, r0
 800162e:	220c      	movs	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001636:	e009      	b.n	800164c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001638:	4b08      	ldr	r3, [pc, #32]	@ (800165c <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163e:	4b07      	ldr	r3, [pc, #28]	@ (800165c <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	4a05      	ldr	r2, [pc, #20]	@ (800165c <_sbrk+0x64>)
 8001648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200a0000 	.word	0x200a0000
 8001658:	00000800 	.word	0x00000800
 800165c:	2000114c 	.word	0x2000114c
 8001660:	20040000 	.word	0x20040000

08001664 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <SystemInit+0x20>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800166e:	4a05      	ldr	r2, [pc, #20]	@ (8001684 <SystemInit+0x20>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800168c:	f7ff ffea 	bl	8001664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001690:	480c      	ldr	r0, [pc, #48]	@ (80016c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001692:	490d      	ldr	r1, [pc, #52]	@ (80016c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001694:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <LoopForever+0xe>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016a8:	4c0a      	ldr	r4, [pc, #40]	@ (80016d4 <LoopForever+0x16>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b6:	f007 fd55 	bl	8009164 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ba:	f7fe ff69 	bl	8000590 <main>

080016be <LoopForever>:

LoopForever:
    b LoopForever
 80016be:	e7fe      	b.n	80016be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016c0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	2000097c 	.word	0x2000097c
  ldr r2, =_sidata
 80016cc:	08015274 	.word	0x08015274
  ldr r2, =_sbss
 80016d0:	20000980 	.word	0x20000980
  ldr r4, =_ebss
 80016d4:	20001658 	.word	0x20001658

080016d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC1_IRQHandler>

080016da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e4:	2003      	movs	r0, #3
 80016e6:	f000 f943 	bl	8001970 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ea:	2000      	movs	r0, #0
 80016ec:	f000 f80e 	bl	800170c <HAL_InitTick>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	71fb      	strb	r3, [r7, #7]
 80016fa:	e001      	b.n	8001700 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016fc:	f7ff fbec 	bl	8000ed8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001700:	79fb      	ldrb	r3, [r7, #7]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001718:	4b17      	ldr	r3, [pc, #92]	@ (8001778 <HAL_InitTick+0x6c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d023      	beq.n	8001768 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001720:	4b16      	ldr	r3, [pc, #88]	@ (800177c <HAL_InitTick+0x70>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b14      	ldr	r3, [pc, #80]	@ (8001778 <HAL_InitTick+0x6c>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f941 	bl	80019be <HAL_SYSTICK_Config>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10f      	bne.n	8001762 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d809      	bhi.n	800175c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001748:	2200      	movs	r2, #0
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001750:	f000 f919 	bl	8001986 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001754:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <HAL_InitTick+0x74>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e007      	b.n	800176c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e004      	b.n	800176c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
 8001766:	e001      	b.n	800176c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000008 	.word	0x20000008
 800177c:	20000000 	.word	0x20000000
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008
 80017a8:	20001150 	.word	0x20001150

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	@ (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20001150 	.word	0x20001150

080017c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff ffee 	bl	80017ac <HAL_GetTick>
 80017d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017dc:	d005      	beq.n	80017ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017de:	4b0a      	ldr	r3, [pc, #40]	@ (8001808 <HAL_Delay+0x44>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ea:	bf00      	nop
 80017ec:	f7ff ffde 	bl	80017ac <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d8f7      	bhi.n	80017ec <HAL_Delay+0x28>
  {
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000008 	.word	0x20000008

0800180c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800181c:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001828:	4013      	ands	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001834:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800183c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183e:	4a04      	ldr	r2, [pc, #16]	@ (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	60d3      	str	r3, [r2, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001858:	4b04      	ldr	r3, [pc, #16]	@ (800186c <__NVIC_GetPriorityGrouping+0x18>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	f003 0307 	and.w	r3, r3, #7
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db0a      	blt.n	800189a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	490c      	ldr	r1, [pc, #48]	@ (80018bc <__NVIC_SetPriority+0x4c>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	0112      	lsls	r2, r2, #4
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	440b      	add	r3, r1
 8001894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001898:	e00a      	b.n	80018b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4908      	ldr	r1, [pc, #32]	@ (80018c0 <__NVIC_SetPriority+0x50>)
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	3b04      	subs	r3, #4
 80018a8:	0112      	lsls	r2, r2, #4
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	440b      	add	r3, r1
 80018ae:	761a      	strb	r2, [r3, #24]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000e100 	.word	0xe000e100
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	@ 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f1c3 0307 	rsb	r3, r3, #7
 80018de:	2b04      	cmp	r3, #4
 80018e0:	bf28      	it	cs
 80018e2:	2304      	movcs	r3, #4
 80018e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3304      	adds	r3, #4
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d902      	bls.n	80018f4 <NVIC_EncodePriority+0x30>
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3b03      	subs	r3, #3
 80018f2:	e000      	b.n	80018f6 <NVIC_EncodePriority+0x32>
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43da      	mvns	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	401a      	ands	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800190c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	43d9      	mvns	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	4313      	orrs	r3, r2
         );
}
 800191e:	4618      	mov	r0, r3
 8001920:	3724      	adds	r7, #36	@ 0x24
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800193c:	d301      	bcc.n	8001942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193e:	2301      	movs	r3, #1
 8001940:	e00f      	b.n	8001962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001942:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <SysTick_Config+0x40>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194a:	210f      	movs	r1, #15
 800194c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001950:	f7ff ff8e 	bl	8001870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001954:	4b05      	ldr	r3, [pc, #20]	@ (800196c <SysTick_Config+0x40>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195a:	4b04      	ldr	r3, [pc, #16]	@ (800196c <SysTick_Config+0x40>)
 800195c:	2207      	movs	r2, #7
 800195e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	e000e010 	.word	0xe000e010

08001970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ff47 	bl	800180c <__NVIC_SetPriorityGrouping>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b086      	sub	sp, #24
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
 8001992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001998:	f7ff ff5c 	bl	8001854 <__NVIC_GetPriorityGrouping>
 800199c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	6978      	ldr	r0, [r7, #20]
 80019a4:	f7ff ff8e 	bl	80018c4 <NVIC_EncodePriority>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff5d 	bl	8001870 <__NVIC_SetPriority>
}
 80019b6:	bf00      	nop
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffb0 	bl	800192c <SysTick_Config>
 80019cc:	4603      	mov	r3, r0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e6:	e166      	b.n	8001cb6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2101      	movs	r1, #1
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 8158 	beq.w	8001cb0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d005      	beq.n	8001a18 <HAL_GPIO_Init+0x40>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d130      	bne.n	8001a7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a4e:	2201      	movs	r2, #1
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	091b      	lsrs	r3, r3, #4
 8001a64:	f003 0201 	and.w	r2, r3, #1
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d017      	beq.n	8001ab6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	2203      	movs	r2, #3
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d123      	bne.n	8001b0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	08da      	lsrs	r2, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3208      	adds	r2, #8
 8001aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	220f      	movs	r2, #15
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	691a      	ldr	r2, [r3, #16]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	08da      	lsrs	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3208      	adds	r2, #8
 8001b04:	6939      	ldr	r1, [r7, #16]
 8001b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	2203      	movs	r2, #3
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0203 	and.w	r2, r3, #3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80b2 	beq.w	8001cb0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4c:	4b61      	ldr	r3, [pc, #388]	@ (8001cd4 <HAL_GPIO_Init+0x2fc>)
 8001b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b50:	4a60      	ldr	r2, [pc, #384]	@ (8001cd4 <HAL_GPIO_Init+0x2fc>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b58:	4b5e      	ldr	r3, [pc, #376]	@ (8001cd4 <HAL_GPIO_Init+0x2fc>)
 8001b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b64:	4a5c      	ldr	r2, [pc, #368]	@ (8001cd8 <HAL_GPIO_Init+0x300>)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	089b      	lsrs	r3, r3, #2
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b8e:	d02b      	beq.n	8001be8 <HAL_GPIO_Init+0x210>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a52      	ldr	r2, [pc, #328]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d025      	beq.n	8001be4 <HAL_GPIO_Init+0x20c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a51      	ldr	r2, [pc, #324]	@ (8001ce0 <HAL_GPIO_Init+0x308>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d01f      	beq.n	8001be0 <HAL_GPIO_Init+0x208>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a50      	ldr	r2, [pc, #320]	@ (8001ce4 <HAL_GPIO_Init+0x30c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d019      	beq.n	8001bdc <HAL_GPIO_Init+0x204>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a4f      	ldr	r2, [pc, #316]	@ (8001ce8 <HAL_GPIO_Init+0x310>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d013      	beq.n	8001bd8 <HAL_GPIO_Init+0x200>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a4e      	ldr	r2, [pc, #312]	@ (8001cec <HAL_GPIO_Init+0x314>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d00d      	beq.n	8001bd4 <HAL_GPIO_Init+0x1fc>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf0 <HAL_GPIO_Init+0x318>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d007      	beq.n	8001bd0 <HAL_GPIO_Init+0x1f8>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a4c      	ldr	r2, [pc, #304]	@ (8001cf4 <HAL_GPIO_Init+0x31c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d101      	bne.n	8001bcc <HAL_GPIO_Init+0x1f4>
 8001bc8:	2307      	movs	r3, #7
 8001bca:	e00e      	b.n	8001bea <HAL_GPIO_Init+0x212>
 8001bcc:	2308      	movs	r3, #8
 8001bce:	e00c      	b.n	8001bea <HAL_GPIO_Init+0x212>
 8001bd0:	2306      	movs	r3, #6
 8001bd2:	e00a      	b.n	8001bea <HAL_GPIO_Init+0x212>
 8001bd4:	2305      	movs	r3, #5
 8001bd6:	e008      	b.n	8001bea <HAL_GPIO_Init+0x212>
 8001bd8:	2304      	movs	r3, #4
 8001bda:	e006      	b.n	8001bea <HAL_GPIO_Init+0x212>
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e004      	b.n	8001bea <HAL_GPIO_Init+0x212>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e002      	b.n	8001bea <HAL_GPIO_Init+0x212>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <HAL_GPIO_Init+0x212>
 8001be8:	2300      	movs	r3, #0
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	f002 0203 	and.w	r2, r2, #3
 8001bf0:	0092      	lsls	r2, r2, #2
 8001bf2:	4093      	lsls	r3, r2
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bfa:	4937      	ldr	r1, [pc, #220]	@ (8001cd8 <HAL_GPIO_Init+0x300>)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c08:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf8 <HAL_GPIO_Init+0x320>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c2c:	4a32      	ldr	r2, [pc, #200]	@ (8001cf8 <HAL_GPIO_Init+0x320>)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c32:	4b31      	ldr	r3, [pc, #196]	@ (8001cf8 <HAL_GPIO_Init+0x320>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c56:	4a28      	ldr	r2, [pc, #160]	@ (8001cf8 <HAL_GPIO_Init+0x320>)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c5c:	4b26      	ldr	r3, [pc, #152]	@ (8001cf8 <HAL_GPIO_Init+0x320>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c80:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf8 <HAL_GPIO_Init+0x320>)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c86:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <HAL_GPIO_Init+0x320>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001caa:	4a13      	ldr	r2, [pc, #76]	@ (8001cf8 <HAL_GPIO_Init+0x320>)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f47f ae91 	bne.w	80019e8 <HAL_GPIO_Init+0x10>
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010000 	.word	0x40010000
 8001cdc:	48000400 	.word	0x48000400
 8001ce0:	48000800 	.word	0x48000800
 8001ce4:	48000c00 	.word	0x48000c00
 8001ce8:	48001000 	.word	0x48001000
 8001cec:	48001400 	.word	0x48001400
 8001cf0:	48001800 	.word	0x48001800
 8001cf4:	48001c00 	.word	0x48001c00
 8001cf8:	40010400 	.word	0x40010400

08001cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d0c:	787b      	ldrb	r3, [r7, #1]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d12:	887a      	ldrh	r2, [r7, #2]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d18:	e002      	b.n	8001d20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e08d      	b.n	8001e5a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff f8e4 	bl	8000f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2224      	movs	r2, #36	@ 0x24
 8001d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0201 	bic.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d107      	bne.n	8001da6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	e006      	b.n	8001db4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001db2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d108      	bne.n	8001dce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	e007      	b.n	8001dde <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ddc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001df0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691a      	ldr	r2, [r3, #16]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69d9      	ldr	r1, [r3, #28]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1a      	ldr	r2, [r3, #32]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2220      	movs	r2, #32
 8001e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b20      	cmp	r3, #32
 8001e76:	d138      	bne.n	8001eea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e032      	b.n	8001eec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2224      	movs	r2, #36	@ 0x24
 8001e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001eb4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6819      	ldr	r1, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001eea:	2302      	movs	r3, #2
  }
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b20      	cmp	r3, #32
 8001f0c:	d139      	bne.n	8001f82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e033      	b.n	8001f84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2224      	movs	r2, #36	@ 0x24
 8001f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0201 	bic.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0201 	orr.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e000      	b.n	8001f84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f82:	2302      	movs	r3, #2
  }
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e101      	b.n	80021a6 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d106      	bne.n	8001fbc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff f95e 	bl	8001278 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f004 fa8a 	bl	80064e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7c1a      	ldrb	r2, [r3, #16]
 8001fdc:	f88d 2000 	strb.w	r2, [sp]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fe4:	f004 fa53 	bl	800648e <USB_CoreInit>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e0d5      	b.n	80021a6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f004 fa82 	bl	800650a <USB_SetCurrentMode>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0c6      	b.n	80021a6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002018:	2300      	movs	r3, #0
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	e04a      	b.n	80020b4 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	3315      	adds	r3, #21
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	3314      	adds	r3, #20
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	b298      	uxth	r0, r3
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	332e      	adds	r3, #46	@ 0x2e
 800205a:	4602      	mov	r2, r0
 800205c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	3318      	adds	r3, #24
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002072:	7bfa      	ldrb	r2, [r7, #15]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	331c      	adds	r3, #28
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	3320      	adds	r3, #32
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	3324      	adds	r3, #36	@ 0x24
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	3301      	adds	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	791b      	ldrb	r3, [r3, #4]
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3af      	bcc.n	800201e <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020be:	2300      	movs	r3, #0
 80020c0:	73fb      	strb	r3, [r7, #15]
 80020c2:	e044      	b.n	800214e <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	3301      	adds	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	791b      	ldrb	r3, [r3, #4]
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	429a      	cmp	r2, r3
 8002156:	d3b5      	bcc.n	80020c4 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7c1a      	ldrb	r2, [r3, #16]
 8002160:	f88d 2000 	strb.w	r2, [sp]
 8002164:	3304      	adds	r3, #4
 8002166:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002168:	f004 fa1c 	bl	80065a4 <USB_DevInit>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2202      	movs	r2, #2
 8002176:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e013      	b.n	80021a6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	7b1b      	ldrb	r3, [r3, #12]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d102      	bne.n	800219a <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f80a 	bl	80021ae <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f004 fbc1 	bl	8006926 <USB_DevDisconnect>

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b085      	sub	sp, #20
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e0:	f043 0303 	orr.w	r3, r3, #3
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002234 <HAL_PWREx_GetVoltageRange+0x3c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002208:	d102      	bne.n	8002210 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800220a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800220e:	e00b      	b.n	8002228 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002210:	4b08      	ldr	r3, [pc, #32]	@ (8002234 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800221e:	d102      	bne.n	8002226 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002220:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002224:	e000      	b.n	8002228 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002226:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40007000 	.word	0x40007000

08002238 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d141      	bne.n	80022ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002246:	4b4b      	ldr	r3, [pc, #300]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800224e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002252:	d131      	bne.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002254:	4b47      	ldr	r3, [pc, #284]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800225a:	4a46      	ldr	r2, [pc, #280]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002260:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002264:	4b43      	ldr	r3, [pc, #268]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800226c:	4a41      	ldr	r2, [pc, #260]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002272:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002274:	4b40      	ldr	r3, [pc, #256]	@ (8002378 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2232      	movs	r2, #50	@ 0x32
 800227a:	fb02 f303 	mul.w	r3, r2, r3
 800227e:	4a3f      	ldr	r2, [pc, #252]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002280:	fba2 2303 	umull	r2, r3, r2, r3
 8002284:	0c9b      	lsrs	r3, r3, #18
 8002286:	3301      	adds	r3, #1
 8002288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800228a:	e002      	b.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3b01      	subs	r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002292:	4b38      	ldr	r3, [pc, #224]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800229a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800229e:	d102      	bne.n	80022a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f2      	bne.n	800228c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022a6:	4b33      	ldr	r3, [pc, #204]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022b2:	d158      	bne.n	8002366 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e057      	b.n	8002368 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022be:	4a2d      	ldr	r2, [pc, #180]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80022c8:	e04d      	b.n	8002366 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022d0:	d141      	bne.n	8002356 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022d2:	4b28      	ldr	r3, [pc, #160]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022de:	d131      	bne.n	8002344 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022e0:	4b24      	ldr	r3, [pc, #144]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022e6:	4a23      	ldr	r2, [pc, #140]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022f0:	4b20      	ldr	r3, [pc, #128]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002300:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2232      	movs	r2, #50	@ 0x32
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	4a1c      	ldr	r2, [pc, #112]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	0c9b      	lsrs	r3, r3, #18
 8002312:	3301      	adds	r3, #1
 8002314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002316:	e002      	b.n	800231e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	3b01      	subs	r3, #1
 800231c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800231e:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800232a:	d102      	bne.n	8002332 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f2      	bne.n	8002318 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002332:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800233e:	d112      	bne.n	8002366 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e011      	b.n	8002368 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002344:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800234a:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002350:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002354:	e007      	b.n	8002366 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002356:	4b07      	ldr	r3, [pc, #28]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800235e:	4a05      	ldr	r2, [pc, #20]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002360:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002364:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	40007000 	.word	0x40007000
 8002378:	20000000 	.word	0x20000000
 800237c:	431bde83 	.word	0x431bde83

08002380 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002384:	4b05      	ldr	r3, [pc, #20]	@ (800239c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4a04      	ldr	r2, [pc, #16]	@ (800239c <HAL_PWREx_EnableVddUSB+0x1c>)
 800238a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800238e:	6053      	str	r3, [r2, #4]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40007000 	.word	0x40007000

080023a0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80023a4:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4a04      	ldr	r2, [pc, #16]	@ (80023bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80023aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023ae:	6053      	str	r3, [r2, #4]
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40007000 	.word	0x40007000

080023c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d102      	bne.n	80023d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	f000 bc08 	b.w	8002be4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d4:	4b96      	ldr	r3, [pc, #600]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 030c 	and.w	r3, r3, #12
 80023dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023de:	4b94      	ldr	r3, [pc, #592]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 80e4 	beq.w	80025be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_RCC_OscConfig+0x4c>
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2b0c      	cmp	r3, #12
 8002400:	f040 808b 	bne.w	800251a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2b01      	cmp	r3, #1
 8002408:	f040 8087 	bne.w	800251a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800240c:	4b88      	ldr	r3, [pc, #544]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_OscConfig+0x64>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e3df      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1a      	ldr	r2, [r3, #32]
 8002428:	4b81      	ldr	r3, [pc, #516]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d004      	beq.n	800243e <HAL_RCC_OscConfig+0x7e>
 8002434:	4b7e      	ldr	r3, [pc, #504]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800243c:	e005      	b.n	800244a <HAL_RCC_OscConfig+0x8a>
 800243e:	4b7c      	ldr	r3, [pc, #496]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800244a:	4293      	cmp	r3, r2
 800244c:	d223      	bcs.n	8002496 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4618      	mov	r0, r3
 8002454:	f000 fdca 	bl	8002fec <RCC_SetFlashLatencyFromMSIRange>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e3c0      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002462:	4b73      	ldr	r3, [pc, #460]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a72      	ldr	r2, [pc, #456]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002468:	f043 0308 	orr.w	r3, r3, #8
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b70      	ldr	r3, [pc, #448]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	496d      	ldr	r1, [pc, #436]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 800247c:	4313      	orrs	r3, r2
 800247e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002480:	4b6b      	ldr	r3, [pc, #428]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	4968      	ldr	r1, [pc, #416]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
 8002494:	e025      	b.n	80024e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002496:	4b66      	ldr	r3, [pc, #408]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a65      	ldr	r2, [pc, #404]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 800249c:	f043 0308 	orr.w	r3, r3, #8
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b63      	ldr	r3, [pc, #396]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4960      	ldr	r1, [pc, #384]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	495b      	ldr	r1, [pc, #364]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fd8a 	bl	8002fec <RCC_SetFlashLatencyFromMSIRange>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e380      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024e2:	f000 fcc1 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 80024e6:	4602      	mov	r2, r0
 80024e8:	4b51      	ldr	r3, [pc, #324]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	4950      	ldr	r1, [pc, #320]	@ (8002634 <HAL_RCC_OscConfig+0x274>)
 80024f4:	5ccb      	ldrb	r3, [r1, r3]
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	4a4e      	ldr	r2, [pc, #312]	@ (8002638 <HAL_RCC_OscConfig+0x278>)
 8002500:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002502:	4b4e      	ldr	r3, [pc, #312]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff f900 	bl	800170c <HAL_InitTick>
 800250c:	4603      	mov	r3, r0
 800250e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d052      	beq.n	80025bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	e364      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d032      	beq.n	8002588 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002522:	4b43      	ldr	r3, [pc, #268]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a42      	ldr	r2, [pc, #264]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800252e:	f7ff f93d 	bl	80017ac <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002536:	f7ff f939 	bl	80017ac <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e34d      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002548:	4b39      	ldr	r3, [pc, #228]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002554:	4b36      	ldr	r3, [pc, #216]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a35      	ldr	r2, [pc, #212]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 800255a:	f043 0308 	orr.w	r3, r3, #8
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b33      	ldr	r3, [pc, #204]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4930      	ldr	r1, [pc, #192]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002572:	4b2f      	ldr	r3, [pc, #188]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	492b      	ldr	r1, [pc, #172]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
 8002586:	e01a      	b.n	80025be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002588:	4b29      	ldr	r3, [pc, #164]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a28      	ldr	r2, [pc, #160]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 800258e:	f023 0301 	bic.w	r3, r3, #1
 8002592:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002594:	f7ff f90a 	bl	80017ac <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800259c:	f7ff f906 	bl	80017ac <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e31a      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025ae:	4b20      	ldr	r3, [pc, #128]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x1dc>
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d073      	beq.n	80026b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_OscConfig+0x21c>
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	d10e      	bne.n	80025f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d10b      	bne.n	80025f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	4b14      	ldr	r3, [pc, #80]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d063      	beq.n	80026b0 <HAL_RCC_OscConfig+0x2f0>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d15f      	bne.n	80026b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e2f7      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025fc:	d106      	bne.n	800260c <HAL_RCC_OscConfig+0x24c>
 80025fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a0b      	ldr	r2, [pc, #44]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	e025      	b.n	8002658 <HAL_RCC_OscConfig+0x298>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002614:	d114      	bne.n	8002640 <HAL_RCC_OscConfig+0x280>
 8002616:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a05      	ldr	r2, [pc, #20]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 800261c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	4b03      	ldr	r3, [pc, #12]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a02      	ldr	r2, [pc, #8]	@ (8002630 <HAL_RCC_OscConfig+0x270>)
 8002628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e013      	b.n	8002658 <HAL_RCC_OscConfig+0x298>
 8002630:	40021000 	.word	0x40021000
 8002634:	0800a13c 	.word	0x0800a13c
 8002638:	20000000 	.word	0x20000000
 800263c:	20000004 	.word	0x20000004
 8002640:	4ba0      	ldr	r3, [pc, #640]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a9f      	ldr	r2, [pc, #636]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 8002646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	4b9d      	ldr	r3, [pc, #628]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a9c      	ldr	r2, [pc, #624]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 8002652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d013      	beq.n	8002688 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7ff f8a4 	bl	80017ac <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002668:	f7ff f8a0 	bl	80017ac <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	@ 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e2b4      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800267a:	4b92      	ldr	r3, [pc, #584]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x2a8>
 8002686:	e014      	b.n	80026b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7ff f890 	bl	80017ac <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002690:	f7ff f88c 	bl	80017ac <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	@ 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e2a0      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026a2:	4b88      	ldr	r3, [pc, #544]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x2d0>
 80026ae:	e000      	b.n	80026b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d060      	beq.n	8002780 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_OscConfig+0x310>
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	d119      	bne.n	80026fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d116      	bne.n	80026fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d0:	4b7c      	ldr	r3, [pc, #496]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_OscConfig+0x328>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e27d      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e8:	4b76      	ldr	r3, [pc, #472]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	4973      	ldr	r1, [pc, #460]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026fc:	e040      	b.n	8002780 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d023      	beq.n	800274e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002706:	4b6f      	ldr	r3, [pc, #444]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a6e      	ldr	r2, [pc, #440]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 800270c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7ff f84b 	bl	80017ac <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271a:	f7ff f847 	bl	80017ac <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e25b      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800272c:	4b65      	ldr	r3, [pc, #404]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002738:	4b62      	ldr	r3, [pc, #392]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	061b      	lsls	r3, r3, #24
 8002746:	495f      	ldr	r1, [pc, #380]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
 800274c:	e018      	b.n	8002780 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274e:	4b5d      	ldr	r3, [pc, #372]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a5c      	ldr	r2, [pc, #368]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 8002754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275a:	f7ff f827 	bl	80017ac <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002762:	f7ff f823 	bl	80017ac <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e237      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002774:	4b53      	ldr	r3, [pc, #332]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f0      	bne.n	8002762 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d03c      	beq.n	8002806 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01c      	beq.n	80027ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002794:	4b4b      	ldr	r3, [pc, #300]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 8002796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800279a:	4a4a      	ldr	r2, [pc, #296]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a4:	f7ff f802 	bl	80017ac <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ac:	f7fe fffe 	bl	80017ac <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e212      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027be:	4b41      	ldr	r3, [pc, #260]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 80027c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0ef      	beq.n	80027ac <HAL_RCC_OscConfig+0x3ec>
 80027cc:	e01b      	b.n	8002806 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ce:	4b3d      	ldr	r3, [pc, #244]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 80027d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027d4:	4a3b      	ldr	r2, [pc, #236]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 80027d6:	f023 0301 	bic.w	r3, r3, #1
 80027da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027de:	f7fe ffe5 	bl	80017ac <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e6:	f7fe ffe1 	bl	80017ac <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e1f5      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027f8:	4b32      	ldr	r3, [pc, #200]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 80027fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1ef      	bne.n	80027e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 80a6 	beq.w	8002960 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002814:	2300      	movs	r3, #0
 8002816:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002818:	4b2a      	ldr	r3, [pc, #168]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10d      	bne.n	8002840 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002824:	4b27      	ldr	r3, [pc, #156]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 8002826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002828:	4a26      	ldr	r2, [pc, #152]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 800282a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800282e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002830:	4b24      	ldr	r3, [pc, #144]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 8002832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283c:	2301      	movs	r3, #1
 800283e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002840:	4b21      	ldr	r3, [pc, #132]	@ (80028c8 <HAL_RCC_OscConfig+0x508>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d118      	bne.n	800287e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800284c:	4b1e      	ldr	r3, [pc, #120]	@ (80028c8 <HAL_RCC_OscConfig+0x508>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1d      	ldr	r2, [pc, #116]	@ (80028c8 <HAL_RCC_OscConfig+0x508>)
 8002852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002856:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002858:	f7fe ffa8 	bl	80017ac <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002860:	f7fe ffa4 	bl	80017ac <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e1b8      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002872:	4b15      	ldr	r3, [pc, #84]	@ (80028c8 <HAL_RCC_OscConfig+0x508>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d108      	bne.n	8002898 <HAL_RCC_OscConfig+0x4d8>
 8002886:	4b0f      	ldr	r3, [pc, #60]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 8002888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288c:	4a0d      	ldr	r2, [pc, #52]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002896:	e029      	b.n	80028ec <HAL_RCC_OscConfig+0x52c>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b05      	cmp	r3, #5
 800289e:	d115      	bne.n	80028cc <HAL_RCC_OscConfig+0x50c>
 80028a0:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a6:	4a07      	ldr	r2, [pc, #28]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028b0:	4b04      	ldr	r3, [pc, #16]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 80028b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b6:	4a03      	ldr	r2, [pc, #12]	@ (80028c4 <HAL_RCC_OscConfig+0x504>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028c0:	e014      	b.n	80028ec <HAL_RCC_OscConfig+0x52c>
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40007000 	.word	0x40007000
 80028cc:	4b9d      	ldr	r3, [pc, #628]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d2:	4a9c      	ldr	r2, [pc, #624]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028dc:	4b99      	ldr	r3, [pc, #612]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e2:	4a98      	ldr	r2, [pc, #608]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 80028e4:	f023 0304 	bic.w	r3, r3, #4
 80028e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d016      	beq.n	8002922 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7fe ff5a 	bl	80017ac <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe ff56 	bl	80017ac <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e168      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002912:	4b8c      	ldr	r3, [pc, #560]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 8002914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ed      	beq.n	80028fc <HAL_RCC_OscConfig+0x53c>
 8002920:	e015      	b.n	800294e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002922:	f7fe ff43 	bl	80017ac <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fe ff3f 	bl	80017ac <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e151      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002940:	4b80      	ldr	r3, [pc, #512]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ed      	bne.n	800292a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800294e:	7ffb      	ldrb	r3, [r7, #31]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d105      	bne.n	8002960 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002954:	4b7b      	ldr	r3, [pc, #492]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002958:	4a7a      	ldr	r2, [pc, #488]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 800295a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800295e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d03c      	beq.n	80029e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01c      	beq.n	80029ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002974:	4b73      	ldr	r3, [pc, #460]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 8002976:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800297a:	4a72      	ldr	r2, [pc, #456]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002984:	f7fe ff12 	bl	80017ac <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800298c:	f7fe ff0e 	bl	80017ac <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e122      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800299e:	4b69      	ldr	r3, [pc, #420]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 80029a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0ef      	beq.n	800298c <HAL_RCC_OscConfig+0x5cc>
 80029ac:	e01b      	b.n	80029e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029ae:	4b65      	ldr	r3, [pc, #404]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 80029b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029b4:	4a63      	ldr	r2, [pc, #396]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 80029b6:	f023 0301 	bic.w	r3, r3, #1
 80029ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029be:	f7fe fef5 	bl	80017ac <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029c6:	f7fe fef1 	bl	80017ac <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e105      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029d8:	4b5a      	ldr	r3, [pc, #360]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 80029da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1ef      	bne.n	80029c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80f9 	beq.w	8002be2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	f040 80cf 	bne.w	8002b98 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029fa:	4b52      	ldr	r3, [pc, #328]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f003 0203 	and.w	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d12c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d123      	bne.n	8002a68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d11b      	bne.n	8002a68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d113      	bne.n	8002a68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d109      	bne.n	8002a68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	3b01      	subs	r3, #1
 8002a62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d071      	beq.n	8002b4c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2b0c      	cmp	r3, #12
 8002a6c:	d068      	beq.n	8002b40 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a6e:	4b35      	ldr	r3, [pc, #212]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d105      	bne.n	8002a86 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a7a:	4b32      	ldr	r3, [pc, #200]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e0ac      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a2d      	ldr	r2, [pc, #180]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 8002a90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a94:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a96:	f7fe fe89 	bl	80017ac <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9e:	f7fe fe85 	bl	80017ac <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e099      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab0:	4b24      	ldr	r3, [pc, #144]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f0      	bne.n	8002a9e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002abc:	4b21      	ldr	r3, [pc, #132]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	4b21      	ldr	r3, [pc, #132]	@ (8002b48 <HAL_RCC_OscConfig+0x788>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002acc:	3a01      	subs	r2, #1
 8002ace:	0112      	lsls	r2, r2, #4
 8002ad0:	4311      	orrs	r1, r2
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ad6:	0212      	lsls	r2, r2, #8
 8002ad8:	4311      	orrs	r1, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ade:	0852      	lsrs	r2, r2, #1
 8002ae0:	3a01      	subs	r2, #1
 8002ae2:	0552      	lsls	r2, r2, #21
 8002ae4:	4311      	orrs	r1, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002aea:	0852      	lsrs	r2, r2, #1
 8002aec:	3a01      	subs	r2, #1
 8002aee:	0652      	lsls	r2, r2, #25
 8002af0:	4311      	orrs	r1, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002af6:	06d2      	lsls	r2, r2, #27
 8002af8:	430a      	orrs	r2, r1
 8002afa:	4912      	ldr	r1, [pc, #72]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b00:	4b10      	ldr	r3, [pc, #64]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0f      	ldr	r2, [pc, #60]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 8002b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4a0c      	ldr	r2, [pc, #48]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 8002b12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b18:	f7fe fe48 	bl	80017ac <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe fe44 	bl	80017ac <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e058      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b32:	4b04      	ldr	r3, [pc, #16]	@ (8002b44 <HAL_RCC_OscConfig+0x784>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b3e:	e050      	b.n	8002be2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e04f      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
 8002b44:	40021000 	.word	0x40021000
 8002b48:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4c:	4b27      	ldr	r3, [pc, #156]	@ (8002bec <HAL_RCC_OscConfig+0x82c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d144      	bne.n	8002be2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b58:	4b24      	ldr	r3, [pc, #144]	@ (8002bec <HAL_RCC_OscConfig+0x82c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a23      	ldr	r2, [pc, #140]	@ (8002bec <HAL_RCC_OscConfig+0x82c>)
 8002b5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b64:	4b21      	ldr	r3, [pc, #132]	@ (8002bec <HAL_RCC_OscConfig+0x82c>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a20      	ldr	r2, [pc, #128]	@ (8002bec <HAL_RCC_OscConfig+0x82c>)
 8002b6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b70:	f7fe fe1c 	bl	80017ac <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fe18 	bl	80017ac <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e02c      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8a:	4b18      	ldr	r3, [pc, #96]	@ (8002bec <HAL_RCC_OscConfig+0x82c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x7b8>
 8002b96:	e024      	b.n	8002be2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b0c      	cmp	r3, #12
 8002b9c:	d01f      	beq.n	8002bde <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9e:	4b13      	ldr	r3, [pc, #76]	@ (8002bec <HAL_RCC_OscConfig+0x82c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a12      	ldr	r2, [pc, #72]	@ (8002bec <HAL_RCC_OscConfig+0x82c>)
 8002ba4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7fe fdff 	bl	80017ac <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb2:	f7fe fdfb 	bl	80017ac <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e00f      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc4:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <HAL_RCC_OscConfig+0x82c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f0      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bd0:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <HAL_RCC_OscConfig+0x82c>)
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	4905      	ldr	r1, [pc, #20]	@ (8002bec <HAL_RCC_OscConfig+0x82c>)
 8002bd6:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <HAL_RCC_OscConfig+0x830>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60cb      	str	r3, [r1, #12]
 8002bdc:	e001      	b.n	8002be2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3720      	adds	r7, #32
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	feeefffc 	.word	0xfeeefffc

08002bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e11d      	b.n	8002e48 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c0c:	4b90      	ldr	r3, [pc, #576]	@ (8002e50 <HAL_RCC_ClockConfig+0x25c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d910      	bls.n	8002c3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1a:	4b8d      	ldr	r3, [pc, #564]	@ (8002e50 <HAL_RCC_ClockConfig+0x25c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 020f 	bic.w	r2, r3, #15
 8002c22:	498b      	ldr	r1, [pc, #556]	@ (8002e50 <HAL_RCC_ClockConfig+0x25c>)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2a:	4b89      	ldr	r3, [pc, #548]	@ (8002e50 <HAL_RCC_ClockConfig+0x25c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e105      	b.n	8002e48 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d010      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	4b81      	ldr	r3, [pc, #516]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d908      	bls.n	8002c6a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c58:	4b7e      	ldr	r3, [pc, #504]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	497b      	ldr	r1, [pc, #492]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d079      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d11e      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7e:	4b75      	ldr	r3, [pc, #468]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e0dc      	b.n	8002e48 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002c8e:	f000 fa07 	bl	80030a0 <RCC_GetSysClockFreqFromPLLSource>
 8002c92:	4603      	mov	r3, r0
 8002c94:	4a70      	ldr	r2, [pc, #448]	@ (8002e58 <HAL_RCC_ClockConfig+0x264>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d946      	bls.n	8002d28 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c9a:	4b6e      	ldr	r3, [pc, #440]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d140      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ca6:	4b6b      	ldr	r3, [pc, #428]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cae:	4a69      	ldr	r2, [pc, #420]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cb4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cb6:	2380      	movs	r3, #128	@ 0x80
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	e035      	b.n	8002d28 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d107      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cc4:	4b63      	ldr	r3, [pc, #396]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d115      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0b9      	b.n	8002e48 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d107      	bne.n	8002cec <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cdc:	4b5d      	ldr	r3, [pc, #372]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d109      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0ad      	b.n	8002e48 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cec:	4b59      	ldr	r3, [pc, #356]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0a5      	b.n	8002e48 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002cfc:	f000 f8b4 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8002d00:	4603      	mov	r3, r0
 8002d02:	4a55      	ldr	r2, [pc, #340]	@ (8002e58 <HAL_RCC_ClockConfig+0x264>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d90f      	bls.n	8002d28 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d08:	4b52      	ldr	r3, [pc, #328]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d109      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d14:	4b4f      	ldr	r3, [pc, #316]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d1c:	4a4d      	ldr	r2, [pc, #308]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d22:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d24:	2380      	movs	r3, #128	@ 0x80
 8002d26:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d28:	4b4a      	ldr	r3, [pc, #296]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f023 0203 	bic.w	r2, r3, #3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	4947      	ldr	r1, [pc, #284]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d3a:	f7fe fd37 	bl	80017ac <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d40:	e00a      	b.n	8002d58 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d42:	f7fe fd33 	bl	80017ac <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e077      	b.n	8002e48 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d58:	4b3e      	ldr	r3, [pc, #248]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 020c 	and.w	r2, r3, #12
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d1eb      	bne.n	8002d42 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b80      	cmp	r3, #128	@ 0x80
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d70:	4b38      	ldr	r3, [pc, #224]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4a37      	ldr	r2, [pc, #220]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002d76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d7a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d010      	beq.n	8002daa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	4b31      	ldr	r3, [pc, #196]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d208      	bcs.n	8002daa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d98:	4b2e      	ldr	r3, [pc, #184]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	492b      	ldr	r1, [pc, #172]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002daa:	4b29      	ldr	r3, [pc, #164]	@ (8002e50 <HAL_RCC_ClockConfig+0x25c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d210      	bcs.n	8002dda <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db8:	4b25      	ldr	r3, [pc, #148]	@ (8002e50 <HAL_RCC_ClockConfig+0x25c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 020f 	bic.w	r2, r3, #15
 8002dc0:	4923      	ldr	r1, [pc, #140]	@ (8002e50 <HAL_RCC_ClockConfig+0x25c>)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc8:	4b21      	ldr	r3, [pc, #132]	@ (8002e50 <HAL_RCC_ClockConfig+0x25c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d001      	beq.n	8002dda <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e036      	b.n	8002e48 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	4918      	ldr	r1, [pc, #96]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d009      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e04:	4b13      	ldr	r3, [pc, #76]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4910      	ldr	r1, [pc, #64]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e18:	f000 f826 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e54 <HAL_RCC_ClockConfig+0x260>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	490c      	ldr	r1, [pc, #48]	@ (8002e5c <HAL_RCC_ClockConfig+0x268>)
 8002e2a:	5ccb      	ldrb	r3, [r1, r3]
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
 8002e34:	4a0a      	ldr	r2, [pc, #40]	@ (8002e60 <HAL_RCC_ClockConfig+0x26c>)
 8002e36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e38:	4b0a      	ldr	r3, [pc, #40]	@ (8002e64 <HAL_RCC_ClockConfig+0x270>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe fc65 	bl	800170c <HAL_InitTick>
 8002e42:	4603      	mov	r3, r0
 8002e44:	73fb      	strb	r3, [r7, #15]

  return status;
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40022000 	.word	0x40022000
 8002e54:	40021000 	.word	0x40021000
 8002e58:	04c4b400 	.word	0x04c4b400
 8002e5c:	0800a13c 	.word	0x0800a13c
 8002e60:	20000000 	.word	0x20000000
 8002e64:	20000004 	.word	0x20000004

08002e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	@ 0x24
 8002e6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e76:	4b3e      	ldr	r3, [pc, #248]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e80:	4b3b      	ldr	r3, [pc, #236]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0x34>
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d121      	bne.n	8002eda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d11e      	bne.n	8002eda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e9c:	4b34      	ldr	r3, [pc, #208]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d107      	bne.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ea8:	4b31      	ldr	r3, [pc, #196]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	e005      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ecc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d102      	bne.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ee0:	4b25      	ldr	r3, [pc, #148]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	e004      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002eec:	4b22      	ldr	r3, [pc, #136]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d134      	bne.n	8002f60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d003      	beq.n	8002f0e <HAL_RCC_GetSysClockFreq+0xa6>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d003      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0xac>
 8002f0c:	e005      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f10:	617b      	str	r3, [r7, #20]
      break;
 8002f12:	e005      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f14:	4b18      	ldr	r3, [pc, #96]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f16:	617b      	str	r3, [r7, #20]
      break;
 8002f18:	e002      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	617b      	str	r3, [r7, #20]
      break;
 8002f1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f20:	4b13      	ldr	r3, [pc, #76]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f2e:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	0a1b      	lsrs	r3, r3, #8
 8002f34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	fb03 f202 	mul.w	r2, r3, r2
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f46:	4b0a      	ldr	r3, [pc, #40]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	0e5b      	lsrs	r3, r3, #25
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	3301      	adds	r3, #1
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f60:	69bb      	ldr	r3, [r7, #24]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3724      	adds	r7, #36	@ 0x24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000
 8002f74:	0800a154 	.word	0x0800a154
 8002f78:	00f42400 	.word	0x00f42400

08002f7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f80:	4b03      	ldr	r3, [pc, #12]	@ (8002f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000000 	.word	0x20000000

08002f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f98:	f7ff fff0 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4904      	ldr	r1, [pc, #16]	@ (8002fbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	0800a14c 	.word	0x0800a14c

08002fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fc4:	f7ff ffda 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	0adb      	lsrs	r3, r3, #11
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	4904      	ldr	r1, [pc, #16]	@ (8002fe8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	0800a14c 	.word	0x0800a14c

08002fec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ff8:	4b27      	ldr	r3, [pc, #156]	@ (8003098 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003004:	f7ff f8f8 	bl	80021f8 <HAL_PWREx_GetVoltageRange>
 8003008:	6178      	str	r0, [r7, #20]
 800300a:	e014      	b.n	8003036 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4b22      	ldr	r3, [pc, #136]	@ (8003098 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003010:	4a21      	ldr	r2, [pc, #132]	@ (8003098 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003016:	6593      	str	r3, [r2, #88]	@ 0x58
 8003018:	4b1f      	ldr	r3, [pc, #124]	@ (8003098 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003024:	f7ff f8e8 	bl	80021f8 <HAL_PWREx_GetVoltageRange>
 8003028:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800302a:	4b1b      	ldr	r3, [pc, #108]	@ (8003098 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800302c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302e:	4a1a      	ldr	r2, [pc, #104]	@ (8003098 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003030:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003034:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800303c:	d10b      	bne.n	8003056 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b80      	cmp	r3, #128	@ 0x80
 8003042:	d913      	bls.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2ba0      	cmp	r3, #160	@ 0xa0
 8003048:	d902      	bls.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800304a:	2302      	movs	r3, #2
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	e00d      	b.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003050:	2301      	movs	r3, #1
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	e00a      	b.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b7f      	cmp	r3, #127	@ 0x7f
 800305a:	d902      	bls.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800305c:	2302      	movs	r3, #2
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	e004      	b.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b70      	cmp	r3, #112	@ 0x70
 8003066:	d101      	bne.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003068:	2301      	movs	r3, #1
 800306a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800306c:	4b0b      	ldr	r3, [pc, #44]	@ (800309c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f023 020f 	bic.w	r2, r3, #15
 8003074:	4909      	ldr	r1, [pc, #36]	@ (800309c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800307c:	4b07      	ldr	r3, [pc, #28]	@ (800309c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	429a      	cmp	r2, r3
 8003088:	d001      	beq.n	800308e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000
 800309c:	40022000 	.word	0x40022000

080030a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030a6:	4b2d      	ldr	r3, [pc, #180]	@ (800315c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d00b      	beq.n	80030ce <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d825      	bhi.n	8003108 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d008      	beq.n	80030d4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d11f      	bne.n	8003108 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80030c8:	4b25      	ldr	r3, [pc, #148]	@ (8003160 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030ca:	613b      	str	r3, [r7, #16]
    break;
 80030cc:	e01f      	b.n	800310e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80030ce:	4b24      	ldr	r3, [pc, #144]	@ (8003160 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030d0:	613b      	str	r3, [r7, #16]
    break;
 80030d2:	e01c      	b.n	800310e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030d4:	4b21      	ldr	r3, [pc, #132]	@ (800315c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d107      	bne.n	80030f0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030e0:	4b1e      	ldr	r3, [pc, #120]	@ (800315c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030e6:	0a1b      	lsrs	r3, r3, #8
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	e005      	b.n	80030fc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030f0:	4b1a      	ldr	r3, [pc, #104]	@ (800315c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80030fc:	4a19      	ldr	r2, [pc, #100]	@ (8003164 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003104:	613b      	str	r3, [r7, #16]
    break;
 8003106:	e002      	b.n	800310e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	613b      	str	r3, [r7, #16]
    break;
 800310c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800310e:	4b13      	ldr	r3, [pc, #76]	@ (800315c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	3301      	adds	r3, #1
 800311a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800311c:	4b0f      	ldr	r3, [pc, #60]	@ (800315c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	fb03 f202 	mul.w	r2, r3, r2
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003134:	4b09      	ldr	r3, [pc, #36]	@ (800315c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	0e5b      	lsrs	r3, r3, #25
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	3301      	adds	r3, #1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800314e:	683b      	ldr	r3, [r7, #0]
}
 8003150:	4618      	mov	r0, r3
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40021000 	.word	0x40021000
 8003160:	00f42400 	.word	0x00f42400
 8003164:	0800a154 	.word	0x0800a154

08003168 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003170:	2300      	movs	r3, #0
 8003172:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003174:	2300      	movs	r3, #0
 8003176:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003180:	2b00      	cmp	r3, #0
 8003182:	d040      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003188:	2b80      	cmp	r3, #128	@ 0x80
 800318a:	d02a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800318c:	2b80      	cmp	r3, #128	@ 0x80
 800318e:	d825      	bhi.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003190:	2b60      	cmp	r3, #96	@ 0x60
 8003192:	d026      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003194:	2b60      	cmp	r3, #96	@ 0x60
 8003196:	d821      	bhi.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003198:	2b40      	cmp	r3, #64	@ 0x40
 800319a:	d006      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x42>
 800319c:	2b40      	cmp	r3, #64	@ 0x40
 800319e:	d81d      	bhi.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d009      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	d010      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x62>
 80031a8:	e018      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031aa:	4b89      	ldr	r3, [pc, #548]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	4a88      	ldr	r2, [pc, #544]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031b6:	e015      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3304      	adds	r3, #4
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f001 fa82 	bl	80046c8 <RCCEx_PLLSAI1_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031c8:	e00c      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3320      	adds	r3, #32
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f001 fb6d 	bl	80048b0 <RCCEx_PLLSAI2_Config>
 80031d6:	4603      	mov	r3, r0
 80031d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031da:	e003      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	74fb      	strb	r3, [r7, #19]
      break;
 80031e0:	e000      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80031e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031e4:	7cfb      	ldrb	r3, [r7, #19]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10b      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031ea:	4b79      	ldr	r3, [pc, #484]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031f0:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031f8:	4975      	ldr	r1, [pc, #468]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003200:	e001      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003202:	7cfb      	ldrb	r3, [r7, #19]
 8003204:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d047      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800321a:	d030      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800321c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003220:	d82a      	bhi.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003226:	d02a      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003228:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800322c:	d824      	bhi.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800322e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003232:	d008      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003238:	d81e      	bhi.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800323e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003242:	d010      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003244:	e018      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003246:	4b62      	ldr	r3, [pc, #392]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	4a61      	ldr	r2, [pc, #388]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003250:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003252:	e015      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3304      	adds	r3, #4
 8003258:	2100      	movs	r1, #0
 800325a:	4618      	mov	r0, r3
 800325c:	f001 fa34 	bl	80046c8 <RCCEx_PLLSAI1_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003264:	e00c      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3320      	adds	r3, #32
 800326a:	2100      	movs	r1, #0
 800326c:	4618      	mov	r0, r3
 800326e:	f001 fb1f 	bl	80048b0 <RCCEx_PLLSAI2_Config>
 8003272:	4603      	mov	r3, r0
 8003274:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003276:	e003      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	74fb      	strb	r3, [r7, #19]
      break;
 800327c:	e000      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800327e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003280:	7cfb      	ldrb	r3, [r7, #19]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10b      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003286:	4b52      	ldr	r3, [pc, #328]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003288:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800328c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003294:	494e      	ldr	r1, [pc, #312]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800329c:	e001      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 809f 	beq.w	80033ee <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b0:	2300      	movs	r3, #0
 80032b2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032b4:	4b46      	ldr	r3, [pc, #280]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80032c4:	2300      	movs	r3, #0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00d      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ca:	4b41      	ldr	r3, [pc, #260]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ce:	4a40      	ldr	r2, [pc, #256]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80032d6:	4b3e      	ldr	r3, [pc, #248]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e2:	2301      	movs	r3, #1
 80032e4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032e6:	4b3b      	ldr	r3, [pc, #236]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a3a      	ldr	r2, [pc, #232]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032f2:	f7fe fa5b 	bl	80017ac <HAL_GetTick>
 80032f6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032f8:	e009      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fa:	f7fe fa57 	bl	80017ac <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d902      	bls.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	74fb      	strb	r3, [r7, #19]
        break;
 800330c:	e005      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800330e:	4b31      	ldr	r3, [pc, #196]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0ef      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800331a:	7cfb      	ldrb	r3, [r7, #19]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d15b      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003320:	4b2b      	ldr	r3, [pc, #172]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800332a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d01f      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	429a      	cmp	r2, r3
 800333c:	d019      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800333e:	4b24      	ldr	r3, [pc, #144]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003344:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003348:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800334a:	4b21      	ldr	r3, [pc, #132]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003350:	4a1f      	ldr	r2, [pc, #124]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003356:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800335a:	4b1d      	ldr	r3, [pc, #116]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800335c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003360:	4a1b      	ldr	r2, [pc, #108]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003366:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800336a:	4a19      	ldr	r2, [pc, #100]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d016      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fe fa16 	bl	80017ac <HAL_GetTick>
 8003380:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003382:	e00b      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003384:	f7fe fa12 	bl	80017ac <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d902      	bls.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	74fb      	strb	r3, [r7, #19]
            break;
 800339a:	e006      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800339c:	4b0c      	ldr	r3, [pc, #48]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0ec      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80033aa:	7cfb      	ldrb	r3, [r7, #19]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10c      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033b0:	4b07      	ldr	r3, [pc, #28]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033c0:	4903      	ldr	r1, [pc, #12]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80033c8:	e008      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
 80033cc:	74bb      	strb	r3, [r7, #18]
 80033ce:	e005      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033dc:	7c7b      	ldrb	r3, [r7, #17]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d105      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e2:	4ba0      	ldr	r3, [pc, #640]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e6:	4a9f      	ldr	r2, [pc, #636]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033fa:	4b9a      	ldr	r3, [pc, #616]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003400:	f023 0203 	bic.w	r2, r3, #3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003408:	4996      	ldr	r1, [pc, #600]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800341c:	4b91      	ldr	r3, [pc, #580]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800341e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003422:	f023 020c 	bic.w	r2, r3, #12
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	498e      	ldr	r1, [pc, #568]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800343e:	4b89      	ldr	r3, [pc, #548]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003444:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344c:	4985      	ldr	r1, [pc, #532]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003460:	4b80      	ldr	r3, [pc, #512]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003466:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346e:	497d      	ldr	r1, [pc, #500]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003482:	4b78      	ldr	r3, [pc, #480]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003488:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003490:	4974      	ldr	r1, [pc, #464]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034b2:	496c      	ldr	r1, [pc, #432]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034c6:	4b67      	ldr	r3, [pc, #412]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034d4:	4963      	ldr	r1, [pc, #396]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034e8:	4b5e      	ldr	r3, [pc, #376]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034f6:	495b      	ldr	r1, [pc, #364]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800350a:	4b56      	ldr	r3, [pc, #344]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003510:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003518:	4952      	ldr	r1, [pc, #328]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800352c:	4b4d      	ldr	r3, [pc, #308]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003532:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353a:	494a      	ldr	r1, [pc, #296]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800354e:	4b45      	ldr	r3, [pc, #276]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003554:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355c:	4941      	ldr	r1, [pc, #260]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003570:	4b3c      	ldr	r3, [pc, #240]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003572:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003576:	f023 0203 	bic.w	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800357e:	4939      	ldr	r1, [pc, #228]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d028      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003592:	4b34      	ldr	r3, [pc, #208]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003598:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a0:	4930      	ldr	r1, [pc, #192]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035b0:	d106      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	4a2b      	ldr	r2, [pc, #172]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035bc:	60d3      	str	r3, [r2, #12]
 80035be:	e011      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3304      	adds	r3, #4
 80035ce:	2101      	movs	r1, #1
 80035d0:	4618      	mov	r0, r3
 80035d2:	f001 f879 	bl	80046c8 <RCCEx_PLLSAI1_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035da:	7cfb      	ldrb	r3, [r7, #19]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80035e0:	7cfb      	ldrb	r3, [r7, #19]
 80035e2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d04d      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035f8:	d108      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80035fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003600:	4a18      	ldr	r2, [pc, #96]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003606:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800360a:	e012      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800360c:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800360e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003612:	4a14      	ldr	r2, [pc, #80]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003614:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003618:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800361c:	4b11      	ldr	r3, [pc, #68]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003622:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800362a:	490e      	ldr	r1, [pc, #56]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003636:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800363a:	d106      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800363c:	4b09      	ldr	r3, [pc, #36]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4a08      	ldr	r2, [pc, #32]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003646:	60d3      	str	r3, [r2, #12]
 8003648:	e020      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800364e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003652:	d109      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003654:	4b03      	ldr	r3, [pc, #12]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4a02      	ldr	r2, [pc, #8]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800365a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800365e:	60d3      	str	r3, [r2, #12]
 8003660:	e014      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800366c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003670:	d10c      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3304      	adds	r3, #4
 8003676:	2101      	movs	r1, #1
 8003678:	4618      	mov	r0, r3
 800367a:	f001 f825 	bl	80046c8 <RCCEx_PLLSAI1_Config>
 800367e:	4603      	mov	r3, r0
 8003680:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003682:	7cfb      	ldrb	r3, [r7, #19]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003688:	7cfb      	ldrb	r3, [r7, #19]
 800368a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d028      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003698:	4b7a      	ldr	r3, [pc, #488]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036a6:	4977      	ldr	r1, [pc, #476]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036b6:	d106      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036b8:	4b72      	ldr	r3, [pc, #456]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a71      	ldr	r2, [pc, #452]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036c2:	60d3      	str	r3, [r2, #12]
 80036c4:	e011      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036ce:	d10c      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	2101      	movs	r1, #1
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fff6 	bl	80046c8 <RCCEx_PLLSAI1_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036e0:	7cfb      	ldrb	r3, [r7, #19]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80036e6:	7cfb      	ldrb	r3, [r7, #19]
 80036e8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01e      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036f6:	4b63      	ldr	r3, [pc, #396]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003706:	495f      	ldr	r1, [pc, #380]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003714:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003718:	d10c      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3304      	adds	r3, #4
 800371e:	2102      	movs	r1, #2
 8003720:	4618      	mov	r0, r3
 8003722:	f000 ffd1 	bl	80046c8 <RCCEx_PLLSAI1_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800372a:	7cfb      	ldrb	r3, [r7, #19]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00b      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003740:	4b50      	ldr	r3, [pc, #320]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003742:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003746:	f023 0204 	bic.w	r2, r3, #4
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003750:	494c      	ldr	r1, [pc, #304]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00b      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003764:	4b47      	ldr	r3, [pc, #284]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003766:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800376a:	f023 0218 	bic.w	r2, r3, #24
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003774:	4943      	ldr	r1, [pc, #268]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d035      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003788:	4b3e      	ldr	r3, [pc, #248]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a3d      	ldr	r2, [pc, #244]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800378e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003794:	f7fe f80a 	bl	80017ac <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800379a:	e009      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800379c:	f7fe f806 	bl	80017ac <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d902      	bls.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	74fb      	strb	r3, [r7, #19]
        break;
 80037ae:	e005      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037b0:	4b34      	ldr	r3, [pc, #208]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1ef      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d113      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80037c2:	4b30      	ldr	r3, [pc, #192]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037d2:	492c      	ldr	r1, [pc, #176]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3320      	adds	r3, #32
 80037de:	2102      	movs	r1, #2
 80037e0:	4618      	mov	r0, r3
 80037e2:	f001 f865 	bl	80048b0 <RCCEx_PLLSAI2_Config>
 80037e6:	4603      	mov	r3, r0
 80037e8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80037ea:	7cfb      	ldrb	r3, [r7, #19]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80037f0:	7cfb      	ldrb	r3, [r7, #19]
 80037f2:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d01e      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003800:	4b20      	ldr	r3, [pc, #128]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003802:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003806:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003810:	491c      	ldr	r1, [pc, #112]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003822:	d10c      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3320      	adds	r3, #32
 8003828:	2101      	movs	r1, #1
 800382a:	4618      	mov	r0, r3
 800382c:	f001 f840 	bl	80048b0 <RCCEx_PLLSAI2_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800383a:	7cfb      	ldrb	r3, [r7, #19]
 800383c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d017      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800384a:	4b0e      	ldr	r3, [pc, #56]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800384c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003850:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800385a:	490a      	ldr	r1, [pc, #40]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003868:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800386c:	d105      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800386e:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	4a04      	ldr	r2, [pc, #16]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003874:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003878:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800387a:	7cbb      	ldrb	r3, [r7, #18]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40021000 	.word	0x40021000

08003888 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800389a:	d13e      	bne.n	800391a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800389c:	4bb6      	ldr	r3, [pc, #728]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038a6:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038ae:	d028      	beq.n	8003902 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038b6:	f200 86f2 	bhi.w	800469e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c0:	d005      	beq.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038c8:	d00e      	beq.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80038ca:	f000 bee8 	b.w	800469e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80038ce:	4baa      	ldr	r3, [pc, #680]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b02      	cmp	r3, #2
 80038da:	f040 86e2 	bne.w	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 80038de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038e2:	61fb      	str	r3, [r7, #28]
      break;
 80038e4:	f000 bedd 	b.w	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80038e8:	4ba3      	ldr	r3, [pc, #652]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80038ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	f040 86d7 	bne.w	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 80038f8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80038fc:	61fb      	str	r3, [r7, #28]
      break;
 80038fe:	f000 bed2 	b.w	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003902:	4b9d      	ldr	r3, [pc, #628]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800390e:	f040 86cc 	bne.w	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8003912:	4b9a      	ldr	r3, [pc, #616]	@ (8003b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003914:	61fb      	str	r3, [r7, #28]
      break;
 8003916:	f000 bec8 	b.w	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800391a:	4b97      	ldr	r3, [pc, #604]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b03      	cmp	r3, #3
 8003928:	d036      	beq.n	8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d840      	bhi.n	80039b2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d003      	beq.n	800393e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d020      	beq.n	800397e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800393c:	e039      	b.n	80039b2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800393e:	4b8e      	ldr	r3, [pc, #568]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b02      	cmp	r3, #2
 8003948:	d116      	bne.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800394a:	4b8b      	ldr	r3, [pc, #556]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003956:	4b88      	ldr	r3, [pc, #544]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	e005      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003962:	4b85      	ldr	r3, [pc, #532]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003964:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003968:	0a1b      	lsrs	r3, r3, #8
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	4a84      	ldr	r2, [pc, #528]	@ (8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003974:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003976:	e01f      	b.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	61bb      	str	r3, [r7, #24]
      break;
 800397c:	e01c      	b.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800397e:	4b7e      	ldr	r3, [pc, #504]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800398a:	d102      	bne.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800398c:	4b7d      	ldr	r3, [pc, #500]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800398e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003990:	e012      	b.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	61bb      	str	r3, [r7, #24]
      break;
 8003996:	e00f      	b.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003998:	4b77      	ldr	r3, [pc, #476]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039a4:	d102      	bne.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80039a6:	4b77      	ldr	r3, [pc, #476]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80039a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80039aa:	e005      	b.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61bb      	str	r3, [r7, #24]
      break;
 80039b0:	e002      	b.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61bb      	str	r3, [r7, #24]
      break;
 80039b6:	bf00      	nop
    }

    switch(PeriphClk)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039be:	f000 8604 	beq.w	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039c8:	f200 8671 	bhi.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039d2:	f000 8467 	beq.w	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039dc:	f200 8667 	bhi.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039e6:	f000 852f 	beq.w	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039f0:	f200 865d 	bhi.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80039fa:	f000 8185 	beq.w	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a04:	f200 8653 	bhi.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a0e:	f000 80cb 	beq.w	8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a18:	f200 8649 	bhi.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a22:	f000 842e 	beq.w	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a2c:	f200 863f 	bhi.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a36:	f000 83e2 	beq.w	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a40:	f200 8635 	bhi.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a4a:	f000 80ad 	beq.w	8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a54:	f200 862b 	bhi.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a5e:	f000 809b 	beq.w	8003b98 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a68:	f200 8621 	bhi.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a72:	f000 8089 	beq.w	8003b88 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a7c:	f200 8617 	bhi.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a86:	f000 8552 	beq.w	800452e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a90:	f200 860d 	bhi.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a9a:	f000 84fe 	beq.w	800449a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aa4:	f200 8603 	bhi.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aae:	f000 849f 	beq.w	80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ab8:	f200 85f9 	bhi.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b80      	cmp	r3, #128	@ 0x80
 8003ac0:	f000 846a 	beq.w	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b80      	cmp	r3, #128	@ 0x80
 8003ac8:	f200 85f1 	bhi.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d84c      	bhi.n	8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 85ea 	beq.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	2b1f      	cmp	r3, #31
 8003ae0:	f200 85e5 	bhi.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003efd 	.word	0x08003efd
 8003af0:	08003f6b 	.word	0x08003f6b
 8003af4:	080046af 	.word	0x080046af
 8003af8:	08003fff 	.word	0x08003fff
 8003afc:	080046af 	.word	0x080046af
 8003b00:	080046af 	.word	0x080046af
 8003b04:	080046af 	.word	0x080046af
 8003b08:	08004077 	.word	0x08004077
 8003b0c:	080046af 	.word	0x080046af
 8003b10:	080046af 	.word	0x080046af
 8003b14:	080046af 	.word	0x080046af
 8003b18:	080046af 	.word	0x080046af
 8003b1c:	080046af 	.word	0x080046af
 8003b20:	080046af 	.word	0x080046af
 8003b24:	080046af 	.word	0x080046af
 8003b28:	080040fb 	.word	0x080040fb
 8003b2c:	080046af 	.word	0x080046af
 8003b30:	080046af 	.word	0x080046af
 8003b34:	080046af 	.word	0x080046af
 8003b38:	080046af 	.word	0x080046af
 8003b3c:	080046af 	.word	0x080046af
 8003b40:	080046af 	.word	0x080046af
 8003b44:	080046af 	.word	0x080046af
 8003b48:	080046af 	.word	0x080046af
 8003b4c:	080046af 	.word	0x080046af
 8003b50:	080046af 	.word	0x080046af
 8003b54:	080046af 	.word	0x080046af
 8003b58:	080046af 	.word	0x080046af
 8003b5c:	080046af 	.word	0x080046af
 8003b60:	080046af 	.word	0x080046af
 8003b64:	080046af 	.word	0x080046af
 8003b68:	0800417d 	.word	0x0800417d
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b40      	cmp	r3, #64	@ 0x40
 8003b70:	f000 83e6 	beq.w	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003b74:	f000 bd9b 	b.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	0007a120 	.word	0x0007a120
 8003b80:	0800a154 	.word	0x0800a154
 8003b84:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003b88:	69b9      	ldr	r1, [r7, #24]
 8003b8a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003b8e:	f000 ff83 	bl	8004a98 <RCCEx_GetSAIxPeriphCLKFreq>
 8003b92:	61f8      	str	r0, [r7, #28]
      break;
 8003b94:	f000 bd8e 	b.w	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003b98:	69b9      	ldr	r1, [r7, #24]
 8003b9a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003b9e:	f000 ff7b 	bl	8004a98 <RCCEx_GetSAIxPeriphCLKFreq>
 8003ba2:	61f8      	str	r0, [r7, #28]
      break;
 8003ba4:	f000 bd86 	b.w	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003ba8:	4b9a      	ldr	r3, [pc, #616]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bae:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003bba:	d015      	beq.n	8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003bc2:	f200 8092 	bhi.w	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bcc:	d029      	beq.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bd4:	f200 8089 	bhi.w	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d07b      	beq.n	8003cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003be4:	d04a      	beq.n	8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8003be6:	e080      	b.n	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003be8:	4b8a      	ldr	r3, [pc, #552]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d17d      	bne.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003bf4:	4b87      	ldr	r3, [pc, #540]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8003c00:	4b84      	ldr	r3, [pc, #528]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	e005      	b.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003c0c:	4b81      	ldr	r3, [pc, #516]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c12:	0a1b      	lsrs	r3, r3, #8
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	4a7f      	ldr	r2, [pc, #508]	@ (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c1e:	61fb      	str	r3, [r7, #28]
          break;
 8003c20:	e066      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003c22:	4b7c      	ldr	r3, [pc, #496]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c2e:	d162      	bne.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003c30:	4b78      	ldr	r3, [pc, #480]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c3c:	d15b      	bne.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003c3e:	4b75      	ldr	r3, [pc, #468]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	0a1b      	lsrs	r3, r3, #8
 8003c44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c48:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	fb03 f202 	mul.w	r2, r3, r2
 8003c52:	4b70      	ldr	r3, [pc, #448]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	091b      	lsrs	r3, r3, #4
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003c64:	4b6b      	ldr	r3, [pc, #428]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	0d5b      	lsrs	r3, r3, #21
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c78:	61fb      	str	r3, [r7, #28]
          break;
 8003c7a:	e03c      	b.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003c7c:	4b65      	ldr	r3, [pc, #404]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c88:	d138      	bne.n	8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003c8a:	4b62      	ldr	r3, [pc, #392]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c96:	d131      	bne.n	8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003c98:	4b5e      	ldr	r3, [pc, #376]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	0a1b      	lsrs	r3, r3, #8
 8003c9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ca2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	fb03 f202 	mul.w	r2, r3, r2
 8003cac:	4b59      	ldr	r3, [pc, #356]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003cbe:	4b55      	ldr	r3, [pc, #340]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	0d5b      	lsrs	r3, r3, #21
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	3301      	adds	r3, #1
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd2:	61fb      	str	r3, [r7, #28]
          break;
 8003cd4:	e012      	b.n	8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003cd6:	4b4f      	ldr	r3, [pc, #316]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d10e      	bne.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8003ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8003e1c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003ce6:	61fb      	str	r3, [r7, #28]
          break;
 8003ce8:	e00b      	b.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8003cea:	bf00      	nop
 8003cec:	f000 bce2 	b.w	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003cf0:	bf00      	nop
 8003cf2:	f000 bcdf 	b.w	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003cf6:	bf00      	nop
 8003cf8:	f000 bcdc 	b.w	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003cfc:	bf00      	nop
 8003cfe:	f000 bcd9 	b.w	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d02:	bf00      	nop
        break;
 8003d04:	f000 bcd6 	b.w	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8003d08:	4b42      	ldr	r3, [pc, #264]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d16:	d13d      	bne.n	8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003d18:	4b3e      	ldr	r3, [pc, #248]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d24:	f040 84c5 	bne.w	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8003d28:	4b3a      	ldr	r3, [pc, #232]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d34:	f040 84bd 	bne.w	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003d38:	4b36      	ldr	r3, [pc, #216]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	0a1b      	lsrs	r3, r3, #8
 8003d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d42:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	fb03 f202 	mul.w	r2, r3, r2
 8003d4c:	4b31      	ldr	r3, [pc, #196]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	3301      	adds	r3, #1
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8003d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	0edb      	lsrs	r3, r3, #27
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003d70:	4b28      	ldr	r3, [pc, #160]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8003d7c:	2311      	movs	r3, #17
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	e001      	b.n	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8003d82:	2307      	movs	r3, #7
 8003d84:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8e:	61fb      	str	r3, [r7, #28]
      break;
 8003d90:	f000 bc8f 	b.w	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003d94:	4b1f      	ldr	r3, [pc, #124]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003da6:	d016      	beq.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003dae:	f200 809b 	bhi.w	8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003db8:	d032      	beq.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dc0:	f200 8092 	bhi.w	8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 8084 	beq.w	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dd2:	d052      	beq.n	8003e7a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8003dd4:	e088      	b.n	8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	f040 8084 	bne.w	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003de4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8003df0:	4b08      	ldr	r3, [pc, #32]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	091b      	lsrs	r3, r3, #4
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	e005      	b.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003dfc:	4b05      	ldr	r3, [pc, #20]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e02:	0a1b      	lsrs	r3, r3, #8
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	4a03      	ldr	r2, [pc, #12]	@ (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0e:	61fb      	str	r3, [r7, #28]
          break;
 8003e10:	e06c      	b.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000
 8003e18:	0800a154 	.word	0x0800a154
 8003e1c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003e20:	4ba5      	ldr	r3, [pc, #660]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e2c:	d160      	bne.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003e2e:	4ba2      	ldr	r3, [pc, #648]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e3a:	d159      	bne.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003e3c:	4b9e      	ldr	r3, [pc, #632]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	0a1b      	lsrs	r3, r3, #8
 8003e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e46:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	fb03 f202 	mul.w	r2, r3, r2
 8003e50:	4b99      	ldr	r3, [pc, #612]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003e62:	4b95      	ldr	r3, [pc, #596]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	0d5b      	lsrs	r3, r3, #21
 8003e68:	f003 0303 	and.w	r3, r3, #3
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e76:	61fb      	str	r3, [r7, #28]
          break;
 8003e78:	e03a      	b.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003e7a:	4b8f      	ldr	r3, [pc, #572]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e86:	d135      	bne.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003e88:	4b8b      	ldr	r3, [pc, #556]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e94:	d12e      	bne.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003e96:	4b88      	ldr	r3, [pc, #544]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	0a1b      	lsrs	r3, r3, #8
 8003e9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ea0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	fb03 f202 	mul.w	r2, r3, r2
 8003eaa:	4b83      	ldr	r3, [pc, #524]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eba:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003ebc:	4b7e      	ldr	r3, [pc, #504]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	0d5b      	lsrs	r3, r3, #21
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed0:	61fb      	str	r3, [r7, #28]
          break;
 8003ed2:	e00f      	b.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003ed4:	4b78      	ldr	r3, [pc, #480]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d10a      	bne.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8003ee2:	4b76      	ldr	r3, [pc, #472]	@ (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8003ee4:	61fb      	str	r3, [r7, #28]
          break;
 8003ee6:	e007      	b.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8003ee8:	bf00      	nop
 8003eea:	e3e2      	b.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003eec:	bf00      	nop
 8003eee:	e3e0      	b.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003ef0:	bf00      	nop
 8003ef2:	e3de      	b.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003ef4:	bf00      	nop
 8003ef6:	e3dc      	b.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003ef8:	bf00      	nop
      break;
 8003efa:	e3da      	b.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003efc:	4b6e      	ldr	r3, [pc, #440]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d827      	bhi.n	8003f5e <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8003f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8003f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f14:	08003f25 	.word	0x08003f25
 8003f18:	08003f2d 	.word	0x08003f2d
 8003f1c:	08003f35 	.word	0x08003f35
 8003f20:	08003f49 	.word	0x08003f49
          frequency = HAL_RCC_GetPCLK2Freq();
 8003f24:	f7ff f84c 	bl	8002fc0 <HAL_RCC_GetPCLK2Freq>
 8003f28:	61f8      	str	r0, [r7, #28]
          break;
 8003f2a:	e01d      	b.n	8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f2c:	f7fe ff9c 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8003f30:	61f8      	str	r0, [r7, #28]
          break;
 8003f32:	e019      	b.n	8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f34:	4b60      	ldr	r3, [pc, #384]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f40:	d10f      	bne.n	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8003f42:	4b5f      	ldr	r3, [pc, #380]	@ (80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003f44:	61fb      	str	r3, [r7, #28]
          break;
 8003f46:	e00c      	b.n	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f48:	4b5b      	ldr	r3, [pc, #364]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d107      	bne.n	8003f66 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8003f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f5a:	61fb      	str	r3, [r7, #28]
          break;
 8003f5c:	e003      	b.n	8003f66 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8003f5e:	bf00      	nop
 8003f60:	e3a8      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f62:	bf00      	nop
 8003f64:	e3a6      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f66:	bf00      	nop
        break;
 8003f68:	e3a4      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003f6a:	4b53      	ldr	r3, [pc, #332]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f70:	f003 030c 	and.w	r3, r3, #12
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b0c      	cmp	r3, #12
 8003f7a:	d83a      	bhi.n	8003ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8003f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	08003fb9 	.word	0x08003fb9
 8003f88:	08003ff3 	.word	0x08003ff3
 8003f8c:	08003ff3 	.word	0x08003ff3
 8003f90:	08003ff3 	.word	0x08003ff3
 8003f94:	08003fc1 	.word	0x08003fc1
 8003f98:	08003ff3 	.word	0x08003ff3
 8003f9c:	08003ff3 	.word	0x08003ff3
 8003fa0:	08003ff3 	.word	0x08003ff3
 8003fa4:	08003fc9 	.word	0x08003fc9
 8003fa8:	08003ff3 	.word	0x08003ff3
 8003fac:	08003ff3 	.word	0x08003ff3
 8003fb0:	08003ff3 	.word	0x08003ff3
 8003fb4:	08003fdd 	.word	0x08003fdd
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fb8:	f7fe ffec 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8003fbc:	61f8      	str	r0, [r7, #28]
          break;
 8003fbe:	e01d      	b.n	8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8003fc0:	f7fe ff52 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8003fc4:	61f8      	str	r0, [r7, #28]
          break;
 8003fc6:	e019      	b.n	8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd4:	d10f      	bne.n	8003ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8003fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003fd8:	61fb      	str	r3, [r7, #28]
          break;
 8003fda:	e00c      	b.n	8003ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003fdc:	4b36      	ldr	r3, [pc, #216]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d107      	bne.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8003fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fee:	61fb      	str	r3, [r7, #28]
          break;
 8003ff0:	e003      	b.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8003ff2:	bf00      	nop
 8003ff4:	e35e      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003ff6:	bf00      	nop
 8003ff8:	e35c      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003ffa:	bf00      	nop
        break;
 8003ffc:	e35a      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004004:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b30      	cmp	r3, #48	@ 0x30
 800400e:	d021      	beq.n	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b30      	cmp	r3, #48	@ 0x30
 8004014:	d829      	bhi.n	800406a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b20      	cmp	r3, #32
 800401a:	d011      	beq.n	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b20      	cmp	r3, #32
 8004020:	d823      	bhi.n	800406a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b10      	cmp	r3, #16
 800402c:	d004      	beq.n	8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 800402e:	e01c      	b.n	800406a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004030:	f7fe ffb0 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8004034:	61f8      	str	r0, [r7, #28]
          break;
 8004036:	e01d      	b.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8004038:	f7fe ff16 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 800403c:	61f8      	str	r0, [r7, #28]
          break;
 800403e:	e019      	b.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004040:	4b1d      	ldr	r3, [pc, #116]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800404c:	d10f      	bne.n	800406e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 800404e:	4b1c      	ldr	r3, [pc, #112]	@ (80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004050:	61fb      	str	r3, [r7, #28]
          break;
 8004052:	e00c      	b.n	800406e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004054:	4b18      	ldr	r3, [pc, #96]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b02      	cmp	r3, #2
 8004060:	d107      	bne.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 8004062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004066:	61fb      	str	r3, [r7, #28]
          break;
 8004068:	e003      	b.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 800406a:	bf00      	nop
 800406c:	e322      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800406e:	bf00      	nop
 8004070:	e320      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004072:	bf00      	nop
        break;
 8004074:	e31e      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004076:	4b10      	ldr	r3, [pc, #64]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2bc0      	cmp	r3, #192	@ 0xc0
 8004086:	d027      	beq.n	80040d8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2bc0      	cmp	r3, #192	@ 0xc0
 800408c:	d82f      	bhi.n	80040ee <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b80      	cmp	r3, #128	@ 0x80
 8004092:	d017      	beq.n	80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b80      	cmp	r3, #128	@ 0x80
 8004098:	d829      	bhi.n	80040ee <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b40      	cmp	r3, #64	@ 0x40
 80040a4:	d004      	beq.n	80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80040a6:	e022      	b.n	80040ee <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 80040a8:	f7fe ff74 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 80040ac:	61f8      	str	r0, [r7, #28]
          break;
 80040ae:	e023      	b.n	80040f8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 80040b0:	f7fe feda 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 80040b4:	61f8      	str	r0, [r7, #28]
          break;
 80040b6:	e01f      	b.n	80040f8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80040b8:	40021000 	.word	0x40021000
 80040bc:	02dc6c00 	.word	0x02dc6c00
 80040c0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040c4:	4b9b      	ldr	r3, [pc, #620]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d0:	d10f      	bne.n	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 80040d2:	4b99      	ldr	r3, [pc, #612]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80040d4:	61fb      	str	r3, [r7, #28]
          break;
 80040d6:	e00c      	b.n	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040d8:	4b96      	ldr	r3, [pc, #600]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d107      	bne.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 80040e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040ea:	61fb      	str	r3, [r7, #28]
          break;
 80040ec:	e003      	b.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 80040ee:	bf00      	nop
 80040f0:	e2e0      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040f2:	bf00      	nop
 80040f4:	e2de      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040f6:	bf00      	nop
        break;
 80040f8:	e2dc      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80040fa:	4b8e      	ldr	r3, [pc, #568]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004100:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800410c:	d025      	beq.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004114:	d82c      	bhi.n	8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800411c:	d013      	beq.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004124:	d824      	bhi.n	8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d004      	beq.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004132:	d004      	beq.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8004134:	e01c      	b.n	8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004136:	f7fe ff2d 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 800413a:	61f8      	str	r0, [r7, #28]
          break;
 800413c:	e01d      	b.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800413e:	f7fe fe93 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8004142:	61f8      	str	r0, [r7, #28]
          break;
 8004144:	e019      	b.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004146:	4b7b      	ldr	r3, [pc, #492]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800414e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004152:	d10f      	bne.n	8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8004154:	4b78      	ldr	r3, [pc, #480]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004156:	61fb      	str	r3, [r7, #28]
          break;
 8004158:	e00c      	b.n	8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800415a:	4b76      	ldr	r3, [pc, #472]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b02      	cmp	r3, #2
 8004166:	d107      	bne.n	8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8004168:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800416c:	61fb      	str	r3, [r7, #28]
          break;
 800416e:	e003      	b.n	8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8004170:	bf00      	nop
 8004172:	e29f      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004174:	bf00      	nop
 8004176:	e29d      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004178:	bf00      	nop
        break;
 800417a:	e29b      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800417c:	4b6d      	ldr	r3, [pc, #436]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004182:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800418e:	d025      	beq.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004196:	d82c      	bhi.n	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800419e:	d013      	beq.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041a6:	d824      	bhi.n	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d004      	beq.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b4:	d004      	beq.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 80041b6:	e01c      	b.n	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80041b8:	f7fe feec 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 80041bc:	61f8      	str	r0, [r7, #28]
          break;
 80041be:	e01d      	b.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 80041c0:	f7fe fe52 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 80041c4:	61f8      	str	r0, [r7, #28]
          break;
 80041c6:	e019      	b.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041c8:	4b5a      	ldr	r3, [pc, #360]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041d4:	d10f      	bne.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 80041d6:	4b58      	ldr	r3, [pc, #352]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80041d8:	61fb      	str	r3, [r7, #28]
          break;
 80041da:	e00c      	b.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041dc:	4b55      	ldr	r3, [pc, #340]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d107      	bne.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 80041ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041ee:	61fb      	str	r3, [r7, #28]
          break;
 80041f0:	e003      	b.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 80041f2:	bf00      	nop
 80041f4:	e25e      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80041f6:	bf00      	nop
 80041f8:	e25c      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80041fa:	bf00      	nop
        break;
 80041fc:	e25a      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80041fe:	4b4d      	ldr	r3, [pc, #308]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004204:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004210:	d007      	beq.n	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004218:	d12f      	bne.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800421a:	f7fe fe25 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 800421e:	61f8      	str	r0, [r7, #28]
          break;
 8004220:	e02e      	b.n	8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004222:	4b44      	ldr	r3, [pc, #272]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800422a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800422e:	d126      	bne.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8004230:	4b40      	ldr	r3, [pc, #256]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d020      	beq.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800423c:	4b3d      	ldr	r3, [pc, #244]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	0a1b      	lsrs	r3, r3, #8
 8004242:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004246:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	fb03 f202 	mul.w	r2, r3, r2
 8004250:	4b38      	ldr	r3, [pc, #224]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	3301      	adds	r3, #1
 800425c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004260:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004262:	4b34      	ldr	r3, [pc, #208]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	0e5b      	lsrs	r3, r3, #25
 8004268:	f003 0303 	and.w	r3, r3, #3
 800426c:	3301      	adds	r3, #1
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	fbb2 f3f3 	udiv	r3, r2, r3
 8004276:	61fb      	str	r3, [r7, #28]
          break;
 8004278:	e001      	b.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 800427a:	bf00      	nop
 800427c:	e21a      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800427e:	bf00      	nop
        break;
 8004280:	e218      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004282:	4b2c      	ldr	r3, [pc, #176]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004284:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d103      	bne.n	800429c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004294:	f7fe fe94 	bl	8002fc0 <HAL_RCC_GetPCLK2Freq>
 8004298:	61f8      	str	r0, [r7, #28]
        break;
 800429a:	e20b      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 800429c:	f7fe fde4 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 80042a0:	61f8      	str	r0, [r7, #28]
        break;
 80042a2:	e207      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80042a4:	4b23      	ldr	r3, [pc, #140]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042aa:	f003 0318 	and.w	r3, r3, #24
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b10      	cmp	r3, #16
 80042b4:	d010      	beq.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b10      	cmp	r3, #16
 80042ba:	d834      	bhi.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d024      	beq.n	8004312 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 80042c8:	e02d      	b.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80042ca:	69b9      	ldr	r1, [r7, #24]
 80042cc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80042d0:	f000 fbe2 	bl	8004a98 <RCCEx_GetSAIxPeriphCLKFreq>
 80042d4:	61f8      	str	r0, [r7, #28]
          break;
 80042d6:	e02b      	b.n	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80042d8:	4b16      	ldr	r3, [pc, #88]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d122      	bne.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80042e4:	4b13      	ldr	r3, [pc, #76]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80042f0:	4b10      	ldr	r3, [pc, #64]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	091b      	lsrs	r3, r3, #4
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	e005      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80042fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004302:	0a1b      	lsrs	r3, r3, #8
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	4a0c      	ldr	r2, [pc, #48]	@ (800433c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800430a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430e:	61fb      	str	r3, [r7, #28]
          break;
 8004310:	e00b      	b.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004312:	4b08      	ldr	r3, [pc, #32]	@ (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800431e:	d106      	bne.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8004320:	4b05      	ldr	r3, [pc, #20]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004322:	61fb      	str	r3, [r7, #28]
          break;
 8004324:	e003      	b.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8004326:	bf00      	nop
 8004328:	e1c4      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800432a:	bf00      	nop
 800432c:	e1c2      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800432e:	bf00      	nop
        break;
 8004330:	e1c0      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8004332:	bf00      	nop
 8004334:	40021000 	.word	0x40021000
 8004338:	00f42400 	.word	0x00f42400
 800433c:	0800a154 	.word	0x0800a154
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004340:	4b96      	ldr	r3, [pc, #600]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004346:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004352:	d013      	beq.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800435a:	d819      	bhi.n	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d004      	beq.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004368:	d004      	beq.n	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 800436a:	e011      	b.n	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 800436c:	f7fe fe12 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8004370:	61f8      	str	r0, [r7, #28]
          break;
 8004372:	e010      	b.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004374:	f7fe fd78 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8004378:	61f8      	str	r0, [r7, #28]
          break;
 800437a:	e00c      	b.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800437c:	4b87      	ldr	r3, [pc, #540]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004388:	d104      	bne.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 800438a:	4b85      	ldr	r3, [pc, #532]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800438c:	61fb      	str	r3, [r7, #28]
          break;
 800438e:	e001      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8004390:	bf00      	nop
 8004392:	e18f      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004394:	bf00      	nop
        break;
 8004396:	e18d      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004398:	4b80      	ldr	r3, [pc, #512]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800439e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043aa:	d013      	beq.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043b2:	d819      	bhi.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d004      	beq.n	80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043c0:	d004      	beq.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 80043c2:	e011      	b.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043c4:	f7fe fde6 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 80043c8:	61f8      	str	r0, [r7, #28]
          break;
 80043ca:	e010      	b.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 80043cc:	f7fe fd4c 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 80043d0:	61f8      	str	r0, [r7, #28]
          break;
 80043d2:	e00c      	b.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043d4:	4b71      	ldr	r3, [pc, #452]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e0:	d104      	bne.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 80043e2:	4b6f      	ldr	r3, [pc, #444]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80043e4:	61fb      	str	r3, [r7, #28]
          break;
 80043e6:	e001      	b.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 80043e8:	bf00      	nop
 80043ea:	e163      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80043ec:	bf00      	nop
        break;
 80043ee:	e161      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80043f0:	4b6a      	ldr	r3, [pc, #424]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004402:	d013      	beq.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800440a:	d819      	bhi.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d004      	beq.n	800441c <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004418:	d004      	beq.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 800441a:	e011      	b.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800441c:	f7fe fdba 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8004420:	61f8      	str	r0, [r7, #28]
          break;
 8004422:	e010      	b.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8004424:	f7fe fd20 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8004428:	61f8      	str	r0, [r7, #28]
          break;
 800442a:	e00c      	b.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800442c:	4b5b      	ldr	r3, [pc, #364]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004438:	d104      	bne.n	8004444 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 800443a:	4b59      	ldr	r3, [pc, #356]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800443c:	61fb      	str	r3, [r7, #28]
          break;
 800443e:	e001      	b.n	8004444 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8004440:	bf00      	nop
 8004442:	e137      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004444:	bf00      	nop
        break;
 8004446:	e135      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004448:	4b54      	ldr	r3, [pc, #336]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800444a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d011      	beq.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d818      	bhi.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d004      	beq.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 800446c:	e011      	b.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800446e:	f7fe fd91 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8004472:	61f8      	str	r0, [r7, #28]
          break;
 8004474:	e010      	b.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8004476:	f7fe fcf7 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 800447a:	61f8      	str	r0, [r7, #28]
          break;
 800447c:	e00c      	b.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800447e:	4b47      	ldr	r3, [pc, #284]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800448a:	d104      	bne.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 800448c:	4b44      	ldr	r3, [pc, #272]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800448e:	61fb      	str	r3, [r7, #28]
          break;
 8004490:	e001      	b.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8004492:	bf00      	nop
 8004494:	e10e      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004496:	bf00      	nop
        break;
 8004498:	e10c      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800449a:	4b40      	ldr	r3, [pc, #256]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80044ac:	d02c      	beq.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80044b4:	d833      	bhi.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80044bc:	d01a      	beq.n	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80044c4:	d82b      	bhi.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044d2:	d004      	beq.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 80044d4:	e023      	b.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044d6:	f7fe fd5d 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 80044da:	61f8      	str	r0, [r7, #28]
          break;
 80044dc:	e026      	b.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80044de:	4b2f      	ldr	r3, [pc, #188]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80044e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d11a      	bne.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 80044ec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80044f0:	61fb      	str	r3, [r7, #28]
          break;
 80044f2:	e016      	b.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044f4:	4b29      	ldr	r3, [pc, #164]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004500:	d111      	bne.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8004502:	4b27      	ldr	r3, [pc, #156]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004504:	61fb      	str	r3, [r7, #28]
          break;
 8004506:	e00e      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004508:	4b24      	ldr	r3, [pc, #144]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b02      	cmp	r3, #2
 8004514:	d109      	bne.n	800452a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8004516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800451a:	61fb      	str	r3, [r7, #28]
          break;
 800451c:	e005      	b.n	800452a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 800451e:	bf00      	nop
 8004520:	e0c8      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004522:	bf00      	nop
 8004524:	e0c6      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004526:	bf00      	nop
 8004528:	e0c4      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800452a:	bf00      	nop
        break;
 800452c:	e0c2      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800452e:	4b1b      	ldr	r3, [pc, #108]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004534:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004540:	d030      	beq.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004548:	d837      	bhi.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004550:	d01a      	beq.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004558:	d82f      	bhi.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d004      	beq.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004566:	d004      	beq.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8004568:	e027      	b.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 800456a:	f7fe fd13 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 800456e:	61f8      	str	r0, [r7, #28]
          break;
 8004570:	e02a      	b.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004572:	4b0a      	ldr	r3, [pc, #40]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b02      	cmp	r3, #2
 800457e:	d11e      	bne.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8004580:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004584:	61fb      	str	r3, [r7, #28]
          break;
 8004586:	e01a      	b.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004588:	4b04      	ldr	r3, [pc, #16]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004594:	d115      	bne.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8004596:	4b02      	ldr	r3, [pc, #8]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004598:	61fb      	str	r3, [r7, #28]
          break;
 800459a:	e012      	b.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800459c:	40021000 	.word	0x40021000
 80045a0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045a4:	4b46      	ldr	r3, [pc, #280]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d109      	bne.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 80045b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045b6:	61fb      	str	r3, [r7, #28]
          break;
 80045b8:	e005      	b.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 80045ba:	bf00      	nop
 80045bc:	e07a      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045be:	bf00      	nop
 80045c0:	e078      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045c2:	bf00      	nop
 80045c4:	e076      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045c6:	bf00      	nop
        break;
 80045c8:	e074      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80045ca:	4b3d      	ldr	r3, [pc, #244]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80045cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045d0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045dc:	d02c      	beq.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045e4:	d855      	bhi.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d004      	beq.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045f2:	d004      	beq.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 80045f4:	e04d      	b.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 80045f6:	f7fe fc37 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 80045fa:	61f8      	str	r0, [r7, #28]
          break;
 80045fc:	e04e      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80045fe:	4b30      	ldr	r3, [pc, #192]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b02      	cmp	r3, #2
 8004608:	d145      	bne.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800460a:	4b2d      	ldr	r3, [pc, #180]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8004616:	4b2a      	ldr	r3, [pc, #168]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	e005      	b.n	800462e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8004622:	4b27      	ldr	r3, [pc, #156]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004624:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004628:	0a1b      	lsrs	r3, r3, #8
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	4a25      	ldr	r2, [pc, #148]	@ (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8004630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004634:	61fb      	str	r3, [r7, #28]
          break;
 8004636:	e02e      	b.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004638:	4b21      	ldr	r3, [pc, #132]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004640:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004644:	d129      	bne.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004646:	4b1e      	ldr	r3, [pc, #120]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800464e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004652:	d122      	bne.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004654:	4b1a      	ldr	r3, [pc, #104]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	0a1b      	lsrs	r3, r3, #8
 800465a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800465e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	fb03 f202 	mul.w	r2, r3, r2
 8004668:	4b15      	ldr	r3, [pc, #84]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	3301      	adds	r3, #1
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800467a:	4b11      	ldr	r3, [pc, #68]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	0d5b      	lsrs	r3, r3, #21
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	3301      	adds	r3, #1
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	fbb2 f3f3 	udiv	r3, r2, r3
 800468e:	61fb      	str	r3, [r7, #28]
          break;
 8004690:	e003      	b.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8004692:	bf00      	nop
 8004694:	e00e      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004696:	bf00      	nop
 8004698:	e00c      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800469a:	bf00      	nop
        break;
 800469c:	e00a      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800469e:	bf00      	nop
 80046a0:	e008      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046a2:	bf00      	nop
 80046a4:	e006      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046a6:	bf00      	nop
 80046a8:	e004      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046aa:	bf00      	nop
 80046ac:	e002      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046ae:	bf00      	nop
 80046b0:	e000      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046b2:	bf00      	nop
    }
  }

  return(frequency);
 80046b4:	69fb      	ldr	r3, [r7, #28]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3720      	adds	r7, #32
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40021000 	.word	0x40021000
 80046c4:	0800a154 	.word	0x0800a154

080046c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046d6:	4b72      	ldr	r3, [pc, #456]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00e      	beq.n	8004700 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046e2:	4b6f      	ldr	r3, [pc, #444]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f003 0203 	and.w	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d103      	bne.n	80046fa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
       ||
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d142      	bne.n	8004780 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	73fb      	strb	r3, [r7, #15]
 80046fe:	e03f      	b.n	8004780 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b03      	cmp	r3, #3
 8004706:	d018      	beq.n	800473a <RCCEx_PLLSAI1_Config+0x72>
 8004708:	2b03      	cmp	r3, #3
 800470a:	d825      	bhi.n	8004758 <RCCEx_PLLSAI1_Config+0x90>
 800470c:	2b01      	cmp	r3, #1
 800470e:	d002      	beq.n	8004716 <RCCEx_PLLSAI1_Config+0x4e>
 8004710:	2b02      	cmp	r3, #2
 8004712:	d009      	beq.n	8004728 <RCCEx_PLLSAI1_Config+0x60>
 8004714:	e020      	b.n	8004758 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004716:	4b62      	ldr	r3, [pc, #392]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d11d      	bne.n	800475e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004726:	e01a      	b.n	800475e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004728:	4b5d      	ldr	r3, [pc, #372]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004730:	2b00      	cmp	r3, #0
 8004732:	d116      	bne.n	8004762 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004738:	e013      	b.n	8004762 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800473a:	4b59      	ldr	r3, [pc, #356]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10f      	bne.n	8004766 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004746:	4b56      	ldr	r3, [pc, #344]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004756:	e006      	b.n	8004766 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
      break;
 800475c:	e004      	b.n	8004768 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800475e:	bf00      	nop
 8004760:	e002      	b.n	8004768 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004762:	bf00      	nop
 8004764:	e000      	b.n	8004768 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004766:	bf00      	nop
    }

    if(status == HAL_OK)
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d108      	bne.n	8004780 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800476e:	4b4c      	ldr	r3, [pc, #304]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f023 0203 	bic.w	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4949      	ldr	r1, [pc, #292]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004780:	7bfb      	ldrb	r3, [r7, #15]
 8004782:	2b00      	cmp	r3, #0
 8004784:	f040 8086 	bne.w	8004894 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004788:	4b45      	ldr	r3, [pc, #276]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a44      	ldr	r2, [pc, #272]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800478e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004794:	f7fd f80a 	bl	80017ac <HAL_GetTick>
 8004798:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800479a:	e009      	b.n	80047b0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800479c:	f7fd f806 	bl	80017ac <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d902      	bls.n	80047b0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	73fb      	strb	r3, [r7, #15]
        break;
 80047ae:	e005      	b.n	80047bc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047b0:	4b3b      	ldr	r3, [pc, #236]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1ef      	bne.n	800479c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d168      	bne.n	8004894 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d113      	bne.n	80047f0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047c8:	4b35      	ldr	r3, [pc, #212]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	4b35      	ldr	r3, [pc, #212]	@ (80048a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047ce:	4013      	ands	r3, r2
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6892      	ldr	r2, [r2, #8]
 80047d4:	0211      	lsls	r1, r2, #8
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	68d2      	ldr	r2, [r2, #12]
 80047da:	06d2      	lsls	r2, r2, #27
 80047dc:	4311      	orrs	r1, r2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6852      	ldr	r2, [r2, #4]
 80047e2:	3a01      	subs	r2, #1
 80047e4:	0112      	lsls	r2, r2, #4
 80047e6:	430a      	orrs	r2, r1
 80047e8:	492d      	ldr	r1, [pc, #180]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	610b      	str	r3, [r1, #16]
 80047ee:	e02d      	b.n	800484c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d115      	bne.n	8004822 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047f6:	4b2a      	ldr	r3, [pc, #168]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	4b2b      	ldr	r3, [pc, #172]	@ (80048a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6892      	ldr	r2, [r2, #8]
 8004802:	0211      	lsls	r1, r2, #8
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6912      	ldr	r2, [r2, #16]
 8004808:	0852      	lsrs	r2, r2, #1
 800480a:	3a01      	subs	r2, #1
 800480c:	0552      	lsls	r2, r2, #21
 800480e:	4311      	orrs	r1, r2
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6852      	ldr	r2, [r2, #4]
 8004814:	3a01      	subs	r2, #1
 8004816:	0112      	lsls	r2, r2, #4
 8004818:	430a      	orrs	r2, r1
 800481a:	4921      	ldr	r1, [pc, #132]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800481c:	4313      	orrs	r3, r2
 800481e:	610b      	str	r3, [r1, #16]
 8004820:	e014      	b.n	800484c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004822:	4b1f      	ldr	r3, [pc, #124]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	4b21      	ldr	r3, [pc, #132]	@ (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004828:	4013      	ands	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6892      	ldr	r2, [r2, #8]
 800482e:	0211      	lsls	r1, r2, #8
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6952      	ldr	r2, [r2, #20]
 8004834:	0852      	lsrs	r2, r2, #1
 8004836:	3a01      	subs	r2, #1
 8004838:	0652      	lsls	r2, r2, #25
 800483a:	4311      	orrs	r1, r2
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6852      	ldr	r2, [r2, #4]
 8004840:	3a01      	subs	r2, #1
 8004842:	0112      	lsls	r2, r2, #4
 8004844:	430a      	orrs	r2, r1
 8004846:	4916      	ldr	r1, [pc, #88]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004848:	4313      	orrs	r3, r2
 800484a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800484c:	4b14      	ldr	r3, [pc, #80]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a13      	ldr	r2, [pc, #76]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004852:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004856:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004858:	f7fc ffa8 	bl	80017ac <HAL_GetTick>
 800485c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800485e:	e009      	b.n	8004874 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004860:	f7fc ffa4 	bl	80017ac <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d902      	bls.n	8004874 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	73fb      	strb	r3, [r7, #15]
          break;
 8004872:	e005      	b.n	8004880 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004874:	4b0a      	ldr	r3, [pc, #40]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0ef      	beq.n	8004860 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004886:	4b06      	ldr	r3, [pc, #24]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004888:	691a      	ldr	r2, [r3, #16]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	4904      	ldr	r1, [pc, #16]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004890:	4313      	orrs	r3, r2
 8004892:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004894:	7bfb      	ldrb	r3, [r7, #15]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	40021000 	.word	0x40021000
 80048a4:	07ff800f 	.word	0x07ff800f
 80048a8:	ff9f800f 	.word	0xff9f800f
 80048ac:	f9ff800f 	.word	0xf9ff800f

080048b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048be:	4b72      	ldr	r3, [pc, #456]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00e      	beq.n	80048e8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80048ca:	4b6f      	ldr	r3, [pc, #444]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f003 0203 	and.w	r2, r3, #3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d103      	bne.n	80048e2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
       ||
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d142      	bne.n	8004968 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	73fb      	strb	r3, [r7, #15]
 80048e6:	e03f      	b.n	8004968 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d018      	beq.n	8004922 <RCCEx_PLLSAI2_Config+0x72>
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d825      	bhi.n	8004940 <RCCEx_PLLSAI2_Config+0x90>
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d002      	beq.n	80048fe <RCCEx_PLLSAI2_Config+0x4e>
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d009      	beq.n	8004910 <RCCEx_PLLSAI2_Config+0x60>
 80048fc:	e020      	b.n	8004940 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048fe:	4b62      	ldr	r3, [pc, #392]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d11d      	bne.n	8004946 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800490e:	e01a      	b.n	8004946 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004910:	4b5d      	ldr	r3, [pc, #372]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004918:	2b00      	cmp	r3, #0
 800491a:	d116      	bne.n	800494a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004920:	e013      	b.n	800494a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004922:	4b59      	ldr	r3, [pc, #356]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10f      	bne.n	800494e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800492e:	4b56      	ldr	r3, [pc, #344]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d109      	bne.n	800494e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800493e:	e006      	b.n	800494e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
      break;
 8004944:	e004      	b.n	8004950 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004946:	bf00      	nop
 8004948:	e002      	b.n	8004950 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800494a:	bf00      	nop
 800494c:	e000      	b.n	8004950 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800494e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d108      	bne.n	8004968 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004956:	4b4c      	ldr	r3, [pc, #304]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f023 0203 	bic.w	r2, r3, #3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4949      	ldr	r1, [pc, #292]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004964:	4313      	orrs	r3, r2
 8004966:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f040 8086 	bne.w	8004a7c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004970:	4b45      	ldr	r3, [pc, #276]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a44      	ldr	r2, [pc, #272]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004976:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800497a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800497c:	f7fc ff16 	bl	80017ac <HAL_GetTick>
 8004980:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004982:	e009      	b.n	8004998 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004984:	f7fc ff12 	bl	80017ac <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d902      	bls.n	8004998 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	73fb      	strb	r3, [r7, #15]
        break;
 8004996:	e005      	b.n	80049a4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004998:	4b3b      	ldr	r3, [pc, #236]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1ef      	bne.n	8004984 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d168      	bne.n	8004a7c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d113      	bne.n	80049d8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049b0:	4b35      	ldr	r3, [pc, #212]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	4b35      	ldr	r3, [pc, #212]	@ (8004a8c <RCCEx_PLLSAI2_Config+0x1dc>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6892      	ldr	r2, [r2, #8]
 80049bc:	0211      	lsls	r1, r2, #8
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	68d2      	ldr	r2, [r2, #12]
 80049c2:	06d2      	lsls	r2, r2, #27
 80049c4:	4311      	orrs	r1, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6852      	ldr	r2, [r2, #4]
 80049ca:	3a01      	subs	r2, #1
 80049cc:	0112      	lsls	r2, r2, #4
 80049ce:	430a      	orrs	r2, r1
 80049d0:	492d      	ldr	r1, [pc, #180]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	614b      	str	r3, [r1, #20]
 80049d6:	e02d      	b.n	8004a34 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d115      	bne.n	8004a0a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049de:	4b2a      	ldr	r3, [pc, #168]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049e0:	695a      	ldr	r2, [r3, #20]
 80049e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004a90 <RCCEx_PLLSAI2_Config+0x1e0>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6892      	ldr	r2, [r2, #8]
 80049ea:	0211      	lsls	r1, r2, #8
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6912      	ldr	r2, [r2, #16]
 80049f0:	0852      	lsrs	r2, r2, #1
 80049f2:	3a01      	subs	r2, #1
 80049f4:	0552      	lsls	r2, r2, #21
 80049f6:	4311      	orrs	r1, r2
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6852      	ldr	r2, [r2, #4]
 80049fc:	3a01      	subs	r2, #1
 80049fe:	0112      	lsls	r2, r2, #4
 8004a00:	430a      	orrs	r2, r1
 8004a02:	4921      	ldr	r1, [pc, #132]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	614b      	str	r3, [r1, #20]
 8004a08:	e014      	b.n	8004a34 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a0c:	695a      	ldr	r2, [r3, #20]
 8004a0e:	4b21      	ldr	r3, [pc, #132]	@ (8004a94 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6892      	ldr	r2, [r2, #8]
 8004a16:	0211      	lsls	r1, r2, #8
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6952      	ldr	r2, [r2, #20]
 8004a1c:	0852      	lsrs	r2, r2, #1
 8004a1e:	3a01      	subs	r2, #1
 8004a20:	0652      	lsls	r2, r2, #25
 8004a22:	4311      	orrs	r1, r2
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6852      	ldr	r2, [r2, #4]
 8004a28:	3a01      	subs	r2, #1
 8004a2a:	0112      	lsls	r2, r2, #4
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	4916      	ldr	r1, [pc, #88]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a34:	4b14      	ldr	r3, [pc, #80]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a13      	ldr	r2, [pc, #76]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a40:	f7fc feb4 	bl	80017ac <HAL_GetTick>
 8004a44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a46:	e009      	b.n	8004a5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a48:	f7fc feb0 	bl	80017ac <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d902      	bls.n	8004a5c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	73fb      	strb	r3, [r7, #15]
          break;
 8004a5a:	e005      	b.n	8004a68 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0ef      	beq.n	8004a48 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a6e:	4b06      	ldr	r3, [pc, #24]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a70:	695a      	ldr	r2, [r3, #20]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	4904      	ldr	r1, [pc, #16]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	07ff800f 	.word	0x07ff800f
 8004a90:	ff9f800f 	.word	0xff9f800f
 8004a94:	f9ff800f 	.word	0xf9ff800f

08004a98 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b089      	sub	sp, #36	@ 0x24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ab4:	d10b      	bne.n	8004ace <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004ab6:	4b7e      	ldr	r3, [pc, #504]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ab8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004abc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004ac0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b60      	cmp	r3, #96	@ 0x60
 8004ac6:	d112      	bne.n	8004aee <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004ac8:	4b7a      	ldr	r3, [pc, #488]	@ (8004cb4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	e00f      	b.n	8004aee <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad4:	d10b      	bne.n	8004aee <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004ad6:	4b76      	ldr	r3, [pc, #472]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004adc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ae0:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ae8:	d101      	bne.n	8004aee <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004aea:	4b72      	ldr	r3, [pc, #456]	@ (8004cb4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004aec:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f040 80d6 	bne.w	8004ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b40      	cmp	r3, #64	@ 0x40
 8004afe:	d003      	beq.n	8004b08 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b06:	d13b      	bne.n	8004b80 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004b08:	4b69      	ldr	r3, [pc, #420]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b14:	f040 80c4 	bne.w	8004ca0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8004b18:	4b65      	ldr	r3, [pc, #404]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 80bd 	beq.w	8004ca0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004b26:	4b62      	ldr	r3, [pc, #392]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	091b      	lsrs	r3, r3, #4
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	3301      	adds	r3, #1
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b38:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	0a1b      	lsrs	r3, r3, #8
 8004b40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b44:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004b46:	4b5a      	ldr	r3, [pc, #360]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	0edb      	lsrs	r3, r3, #27
 8004b4c:	f003 031f 	and.w	r3, r3, #31
 8004b50:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004b58:	4b55      	ldr	r3, [pc, #340]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8004b64:	2311      	movs	r3, #17
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	e001      	b.n	8004b6e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8004b6a:	2307      	movs	r3, #7
 8004b6c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	fb03 f202 	mul.w	r2, r3, r2
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004b7e:	e08f      	b.n	8004ca0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d13a      	bne.n	8004bfc <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004b86:	4b4a      	ldr	r3, [pc, #296]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b92:	f040 8086 	bne.w	8004ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004b96:	4b46      	ldr	r3, [pc, #280]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d07f      	beq.n	8004ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004ba2:	4b43      	ldr	r3, [pc, #268]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	091b      	lsrs	r3, r3, #4
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	3301      	adds	r3, #1
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	0a1b      	lsrs	r3, r3, #8
 8004bbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bc0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004bc2:	4b3b      	ldr	r3, [pc, #236]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	0edb      	lsrs	r3, r3, #27
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004bd4:	4b36      	ldr	r3, [pc, #216]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8004be0:	2311      	movs	r3, #17
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	e001      	b.n	8004bea <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8004be6:	2307      	movs	r3, #7
 8004be8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	fb03 f202 	mul.w	r2, r3, r2
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	61fb      	str	r3, [r7, #28]
 8004bfa:	e052      	b.n	8004ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	2b80      	cmp	r3, #128	@ 0x80
 8004c00:	d003      	beq.n	8004c0a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c08:	d109      	bne.n	8004c1e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c0a:	4b29      	ldr	r3, [pc, #164]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c16:	d144      	bne.n	8004ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8004c18:	4b27      	ldr	r3, [pc, #156]	@ (8004cb8 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8004c1a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c1c:	e041      	b.n	8004ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d003      	beq.n	8004c2c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c2a:	d13a      	bne.n	8004ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004c2c:	4b20      	ldr	r3, [pc, #128]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c38:	d133      	bne.n	8004ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d02d      	beq.n	8004ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8004c46:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	091b      	lsrs	r3, r3, #4
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	3301      	adds	r3, #1
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c58:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004c5a:	4b15      	ldr	r3, [pc, #84]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	0a1b      	lsrs	r3, r3, #8
 8004c60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c64:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8004c66:	4b12      	ldr	r3, [pc, #72]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	0edb      	lsrs	r3, r3, #27
 8004c6c:	f003 031f 	and.w	r3, r3, #31
 8004c70:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10a      	bne.n	8004c8e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004c78:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8004c84:	2311      	movs	r3, #17
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	e001      	b.n	8004c8e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8004c8a:	2307      	movs	r3, #7
 8004c8c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	fb03 f202 	mul.w	r2, r3, r2
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9c:	61fb      	str	r3, [r7, #28]
 8004c9e:	e000      	b.n	8004ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004ca0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004ca2:	69fb      	ldr	r3, [r7, #28]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3724      	adds	r7, #36	@ 0x24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	001fff68 	.word	0x001fff68
 8004cb8:	00f42400 	.word	0x00f42400

08004cbc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08a      	sub	sp, #40	@ 0x28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e1c7      	b.n	800505e <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d10e      	bne.n	8004cf6 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a81      	ldr	r2, [pc, #516]	@ (8004ee4 <HAL_SAI_Init+0x228>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d107      	bne.n	8004cf2 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d103      	bne.n	8004cf2 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e1b3      	b.n	800505e <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fc fbc8 	bl	80014a0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f9b1 	bl	8005078 <SAI_Disable>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e19e      	b.n	800505e <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d00c      	beq.n	8004d4a <HAL_SAI_Init+0x8e>
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d80d      	bhi.n	8004d50 <HAL_SAI_Init+0x94>
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <HAL_SAI_Init+0x82>
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d003      	beq.n	8004d44 <HAL_SAI_Init+0x88>
 8004d3c:	e008      	b.n	8004d50 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004d42:	e008      	b.n	8004d56 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004d44:	2310      	movs	r3, #16
 8004d46:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004d48:	e005      	b.n	8004d56 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004d4a:	2320      	movs	r3, #32
 8004d4c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004d4e:	e002      	b.n	8004d56 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004d54:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d81d      	bhi.n	8004d9a <HAL_SAI_Init+0xde>
 8004d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d64 <HAL_SAI_Init+0xa8>)
 8004d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d64:	08004d75 	.word	0x08004d75
 8004d68:	08004d7b 	.word	0x08004d7b
 8004d6c:	08004d83 	.word	0x08004d83
 8004d70:	08004d8b 	.word	0x08004d8b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61fb      	str	r3, [r7, #28]
      break;
 8004d78:	e012      	b.n	8004da0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004d7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d7e:	61fb      	str	r3, [r7, #28]
      break;
 8004d80:	e00e      	b.n	8004da0 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004d82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d86:	61fb      	str	r3, [r7, #28]
      break;
 8004d88:	e00a      	b.n	8004da0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004d8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d8e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004d98:	e002      	b.n	8004da0 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
      break;
 8004d9e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a4f      	ldr	r2, [pc, #316]	@ (8004ee4 <HAL_SAI_Init+0x228>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <HAL_SAI_Init+0xf8>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a4e      	ldr	r2, [pc, #312]	@ (8004ee8 <HAL_SAI_Init+0x22c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d103      	bne.n	8004dbc <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8004db4:	4a4d      	ldr	r2, [pc, #308]	@ (8004eec <HAL_SAI_Init+0x230>)
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	e002      	b.n	8004dc2 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004dbc:	4a4c      	ldr	r2, [pc, #304]	@ (8004ef0 <HAL_SAI_Init+0x234>)
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d073      	beq.n	8004eb2 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a45      	ldr	r2, [pc, #276]	@ (8004ee4 <HAL_SAI_Init+0x228>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d004      	beq.n	8004dde <HAL_SAI_Init+0x122>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a43      	ldr	r2, [pc, #268]	@ (8004ee8 <HAL_SAI_Init+0x22c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d105      	bne.n	8004dea <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004dde:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004de2:	f7fe fd51 	bl	8003888 <HAL_RCCEx_GetPeriphCLKFreq>
 8004de6:	61b8      	str	r0, [r7, #24]
 8004de8:	e004      	b.n	8004df4 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004dea:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004dee:	f7fe fd4b 	bl	8003888 <HAL_RCCEx_GetPeriphCLKFreq>
 8004df2:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004dfc:	d120      	bne.n	8004e40 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d102      	bne.n	8004e0c <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8004e06:	2340      	movs	r3, #64	@ 0x40
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	e00a      	b.n	8004e22 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d103      	bne.n	8004e1c <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8004e14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	e002      	b.n	8004e22 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e20:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4613      	mov	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	fb02 f303 	mul.w	r3, r2, r3
 8004e38:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e017      	b.n	8004e70 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e48:	d101      	bne.n	8004e4e <HAL_SAI_Init+0x192>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e000      	b.n	8004e50 <HAL_SAI_Init+0x194>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	fb02 f303 	mul.w	r3, r2, r3
 8004e68:	021b      	lsls	r3, r3, #8
 8004e6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e6e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	4a20      	ldr	r2, [pc, #128]	@ (8004ef4 <HAL_SAI_Init+0x238>)
 8004e74:	fba2 2303 	umull	r2, r3, r2, r3
 8004e78:	08da      	lsrs	r2, r3, #3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004e7e:	6979      	ldr	r1, [r7, #20]
 8004e80:	4b1c      	ldr	r3, [pc, #112]	@ (8004ef4 <HAL_SAI_Init+0x238>)
 8004e82:	fba3 2301 	umull	r2, r3, r3, r1
 8004e86:	08da      	lsrs	r2, r3, #3
 8004e88:	4613      	mov	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	1aca      	subs	r2, r1, r3
 8004e92:	2a08      	cmp	r2, #8
 8004e94:	d904      	bls.n	8004ea0 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d104      	bne.n	8004eb2 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	085a      	lsrs	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_SAI_Init+0x206>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d109      	bne.n	8004ed6 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_SAI_Init+0x212>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e001      	b.n	8004ed2 <HAL_SAI_Init+0x216>
 8004ece:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ed2:	623b      	str	r3, [r7, #32]
 8004ed4:	e012      	b.n	8004efc <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d10c      	bne.n	8004ef8 <HAL_SAI_Init+0x23c>
 8004ede:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ee2:	e00a      	b.n	8004efa <HAL_SAI_Init+0x23e>
 8004ee4:	40015404 	.word	0x40015404
 8004ee8:	40015424 	.word	0x40015424
 8004eec:	40015400 	.word	0x40015400
 8004ef0:	40015800 	.word	0x40015800
 8004ef4:	cccccccd 	.word	0xcccccccd
 8004ef8:	2300      	movs	r3, #0
 8004efa:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6819      	ldr	r1, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4b58      	ldr	r3, [pc, #352]	@ (8005068 <HAL_SAI_Init+0x3ac>)
 8004f08:	400b      	ands	r3, r1
 8004f0a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6819      	ldr	r1, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f20:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f26:	431a      	orrs	r2, r3
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8004f34:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f40:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	051b      	lsls	r3, r3, #20
 8004f48:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004f4e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6812      	ldr	r2, [r2, #0]
 8004f62:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004f66:	f023 030f 	bic.w	r3, r3, #15
 8004f6a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6859      	ldr	r1, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6899      	ldr	r1, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	4b35      	ldr	r3, [pc, #212]	@ (800506c <HAL_SAI_Init+0x3b0>)
 8004f96:	400b      	ands	r3, r1
 8004f98:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6899      	ldr	r1, [r3, #8]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004faa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 8004fb0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 8004fb6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004fc0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68d9      	ldr	r1, [r3, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8004fd8:	400b      	ands	r3, r1
 8004fda:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68d9      	ldr	r1, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fea:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004ff2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a19      	ldr	r2, [pc, #100]	@ (8005070 <HAL_SAI_Init+0x3b4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d119      	bne.n	8005044 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8005010:	4b18      	ldr	r3, [pc, #96]	@ (8005074 <HAL_SAI_Init+0x3b8>)
 8005012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005014:	4a17      	ldr	r2, [pc, #92]	@ (8005074 <HAL_SAI_Init+0x3b8>)
 8005016:	f023 0301 	bic.w	r3, r3, #1
 800501a:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005022:	2b01      	cmp	r3, #1
 8005024:	d10e      	bne.n	8005044 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502e:	3b01      	subs	r3, #1
 8005030:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005032:	4910      	ldr	r1, [pc, #64]	@ (8005074 <HAL_SAI_Init+0x3b8>)
 8005034:	4313      	orrs	r3, r2
 8005036:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8005038:	4b0e      	ldr	r3, [pc, #56]	@ (8005074 <HAL_SAI_Init+0x3b8>)
 800503a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503c:	4a0d      	ldr	r2, [pc, #52]	@ (8005074 <HAL_SAI_Init+0x3b8>)
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3728      	adds	r7, #40	@ 0x28
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	f805c010 	.word	0xf805c010
 800506c:	fff88000 	.word	0xfff88000
 8005070:	40015404 	.word	0x40015404
 8005074:	40015400 	.word	0x40015400

08005078 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005080:	4b18      	ldr	r3, [pc, #96]	@ (80050e4 <SAI_Disable+0x6c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a18      	ldr	r2, [pc, #96]	@ (80050e8 <SAI_Disable+0x70>)
 8005086:	fba2 2303 	umull	r2, r3, r2, r3
 800508a:	0b1b      	lsrs	r3, r3, #12
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80050a2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10a      	bne.n	80050c0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	72fb      	strb	r3, [r7, #11]
      break;
 80050be:	e009      	b.n	80050d4 <SAI_Disable+0x5c>
    }
    count--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e7      	bne.n	80050a4 <SAI_Disable+0x2c>

  return status;
 80050d4:	7afb      	ldrb	r3, [r7, #11]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20000000 	.word	0x20000000
 80050e8:	95cbec1b 	.word	0x95cbec1b

080050ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e095      	b.n	800522a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005102:	2b00      	cmp	r3, #0
 8005104:	d108      	bne.n	8005118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800510e:	d009      	beq.n	8005124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	61da      	str	r2, [r3, #28]
 8005116:	e005      	b.n	8005124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fb ff72 	bl	8001028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800515a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005164:	d902      	bls.n	800516c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	e002      	b.n	8005172 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800516c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005170:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800517a:	d007      	beq.n	800518c <HAL_SPI_Init+0xa0>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005184:	d002      	beq.n	800518c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	431a      	orrs	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ce:	ea42 0103 	orr.w	r1, r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	0c1b      	lsrs	r3, r3, #16
 80051e8:	f003 0204 	and.w	r2, r3, #4
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005208:	ea42 0103 	orr.w	r1, r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	60b9      	str	r1, [r7, #8]
 800523c:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e038      	b.n	80052ba <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d106      	bne.n	8005262 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f7fc f915 	bl	800148c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	3308      	adds	r3, #8
 800526a:	4619      	mov	r1, r3
 800526c:	4610      	mov	r0, r2
 800526e:	f000 ffed 	bl	800624c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	461a      	mov	r2, r3
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	f001 f87f 	bl	8006380 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6858      	ldr	r0, [r3, #4]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	f001 f8c3 	bl	800641a <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	6892      	ldr	r2, [r2, #8]
 800529c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	6892      	ldr	r2, [r2, #8]
 80052a8:	f041 0101 	orr.w	r1, r1, #1
 80052ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b082      	sub	sp, #8
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e042      	b.n	800535a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fb ff00 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2224      	movs	r2, #36	@ 0x24
 80052f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0201 	bic.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fc7b 	bl	8005c08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f97c 	bl	8005610 <UART_SetConfig>
 8005318:	4603      	mov	r3, r0
 800531a:	2b01      	cmp	r3, #1
 800531c:	d101      	bne.n	8005322 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e01b      	b.n	800535a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005330:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005340:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f042 0201 	orr.w	r2, r2, #1
 8005350:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fcfa 	bl	8005d4c <UART_CheckIdleState>
 8005358:	4603      	mov	r3, r0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b08a      	sub	sp, #40	@ 0x28
 8005366:	af02      	add	r7, sp, #8
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	603b      	str	r3, [r7, #0]
 800536e:	4613      	mov	r3, r2
 8005370:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005378:	2b20      	cmp	r3, #32
 800537a:	d17b      	bne.n	8005474 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <HAL_UART_Transmit+0x26>
 8005382:	88fb      	ldrh	r3, [r7, #6]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e074      	b.n	8005476 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2221      	movs	r2, #33	@ 0x21
 8005398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800539c:	f7fc fa06 	bl	80017ac <HAL_GetTick>
 80053a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	88fa      	ldrh	r2, [r7, #6]
 80053a6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	88fa      	ldrh	r2, [r7, #6]
 80053ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ba:	d108      	bne.n	80053ce <HAL_UART_Transmit+0x6c>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d104      	bne.n	80053ce <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	61bb      	str	r3, [r7, #24]
 80053cc:	e003      	b.n	80053d6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053d6:	e030      	b.n	800543a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2200      	movs	r2, #0
 80053e0:	2180      	movs	r1, #128	@ 0x80
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 fd5c 	bl	8005ea0 <UART_WaitOnFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e03d      	b.n	8005476 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10b      	bne.n	8005418 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	881a      	ldrh	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800540c:	b292      	uxth	r2, r2
 800540e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	3302      	adds	r3, #2
 8005414:	61bb      	str	r3, [r7, #24]
 8005416:	e007      	b.n	8005428 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	781a      	ldrb	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	3301      	adds	r3, #1
 8005426:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800542e:	b29b      	uxth	r3, r3
 8005430:	3b01      	subs	r3, #1
 8005432:	b29a      	uxth	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1c8      	bne.n	80053d8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2200      	movs	r2, #0
 800544e:	2140      	movs	r1, #64	@ 0x40
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 fd25 	bl	8005ea0 <UART_WaitOnFlagUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d005      	beq.n	8005468 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e006      	b.n	8005476 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2220      	movs	r2, #32
 800546c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	e000      	b.n	8005476 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005474:	2302      	movs	r3, #2
  }
}
 8005476:	4618      	mov	r0, r3
 8005478:	3720      	adds	r7, #32
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b08a      	sub	sp, #40	@ 0x28
 8005482:	af02      	add	r7, sp, #8
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	4613      	mov	r3, r2
 800548c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005494:	2b20      	cmp	r3, #32
 8005496:	f040 80b6 	bne.w	8005606 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <HAL_UART_Receive+0x28>
 80054a0:	88fb      	ldrh	r3, [r7, #6]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e0ae      	b.n	8005608 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2222      	movs	r2, #34	@ 0x22
 80054b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054c0:	f7fc f974 	bl	80017ac <HAL_GetTick>
 80054c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	88fa      	ldrh	r2, [r7, #6]
 80054ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	88fa      	ldrh	r2, [r7, #6]
 80054d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054de:	d10e      	bne.n	80054fe <HAL_UART_Receive+0x80>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d105      	bne.n	80054f4 <HAL_UART_Receive+0x76>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80054ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80054f2:	e02d      	b.n	8005550 <HAL_UART_Receive+0xd2>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	22ff      	movs	r2, #255	@ 0xff
 80054f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80054fc:	e028      	b.n	8005550 <HAL_UART_Receive+0xd2>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10d      	bne.n	8005522 <HAL_UART_Receive+0xa4>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d104      	bne.n	8005518 <HAL_UART_Receive+0x9a>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	22ff      	movs	r2, #255	@ 0xff
 8005512:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005516:	e01b      	b.n	8005550 <HAL_UART_Receive+0xd2>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	227f      	movs	r2, #127	@ 0x7f
 800551c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005520:	e016      	b.n	8005550 <HAL_UART_Receive+0xd2>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800552a:	d10d      	bne.n	8005548 <HAL_UART_Receive+0xca>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <HAL_UART_Receive+0xc0>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	227f      	movs	r2, #127	@ 0x7f
 8005538:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800553c:	e008      	b.n	8005550 <HAL_UART_Receive+0xd2>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	223f      	movs	r2, #63	@ 0x3f
 8005542:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005546:	e003      	b.n	8005550 <HAL_UART_Receive+0xd2>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005556:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005560:	d108      	bne.n	8005574 <HAL_UART_Receive+0xf6>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d104      	bne.n	8005574 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800556a:	2300      	movs	r3, #0
 800556c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	e003      	b.n	800557c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005578:	2300      	movs	r3, #0
 800557a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800557c:	e037      	b.n	80055ee <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2200      	movs	r2, #0
 8005586:	2120      	movs	r1, #32
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 fc89 	bl	8005ea0 <UART_WaitOnFlagUntilTimeout>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2220      	movs	r2, #32
 8005598:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e033      	b.n	8005608 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10c      	bne.n	80055c0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	8a7b      	ldrh	r3, [r7, #18]
 80055b0:	4013      	ands	r3, r2
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	3302      	adds	r3, #2
 80055bc:	61bb      	str	r3, [r7, #24]
 80055be:	e00d      	b.n	80055dc <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	8a7b      	ldrh	r3, [r7, #18]
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	4013      	ands	r3, r2
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	3301      	adds	r3, #1
 80055da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1c1      	bne.n	800557e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	e000      	b.n	8005608 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005606:	2302      	movs	r3, #2
  }
}
 8005608:	4618      	mov	r0, r3
 800560a:	3720      	adds	r7, #32
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005614:	b08c      	sub	sp, #48	@ 0x30
 8005616:	af00      	add	r7, sp, #0
 8005618:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	431a      	orrs	r2, r3
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	431a      	orrs	r2, r3
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	4313      	orrs	r3, r2
 8005636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	4baa      	ldr	r3, [pc, #680]	@ (80058e8 <UART_SetConfig+0x2d8>)
 8005640:	4013      	ands	r3, r2
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005648:	430b      	orrs	r3, r1
 800564a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a9f      	ldr	r2, [pc, #636]	@ (80058ec <UART_SetConfig+0x2dc>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d004      	beq.n	800567c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005678:	4313      	orrs	r3, r2
 800567a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005686:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005690:	430b      	orrs	r3, r1
 8005692:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569a:	f023 010f 	bic.w	r1, r3, #15
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a90      	ldr	r2, [pc, #576]	@ (80058f0 <UART_SetConfig+0x2e0>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d125      	bne.n	8005700 <UART_SetConfig+0xf0>
 80056b4:	4b8f      	ldr	r3, [pc, #572]	@ (80058f4 <UART_SetConfig+0x2e4>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d81a      	bhi.n	80056f8 <UART_SetConfig+0xe8>
 80056c2:	a201      	add	r2, pc, #4	@ (adr r2, 80056c8 <UART_SetConfig+0xb8>)
 80056c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c8:	080056d9 	.word	0x080056d9
 80056cc:	080056e9 	.word	0x080056e9
 80056d0:	080056e1 	.word	0x080056e1
 80056d4:	080056f1 	.word	0x080056f1
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056de:	e116      	b.n	800590e <UART_SetConfig+0x2fe>
 80056e0:	2302      	movs	r3, #2
 80056e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056e6:	e112      	b.n	800590e <UART_SetConfig+0x2fe>
 80056e8:	2304      	movs	r3, #4
 80056ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ee:	e10e      	b.n	800590e <UART_SetConfig+0x2fe>
 80056f0:	2308      	movs	r3, #8
 80056f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056f6:	e10a      	b.n	800590e <UART_SetConfig+0x2fe>
 80056f8:	2310      	movs	r3, #16
 80056fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056fe:	e106      	b.n	800590e <UART_SetConfig+0x2fe>
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a7c      	ldr	r2, [pc, #496]	@ (80058f8 <UART_SetConfig+0x2e8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d138      	bne.n	800577c <UART_SetConfig+0x16c>
 800570a:	4b7a      	ldr	r3, [pc, #488]	@ (80058f4 <UART_SetConfig+0x2e4>)
 800570c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005710:	f003 030c 	and.w	r3, r3, #12
 8005714:	2b0c      	cmp	r3, #12
 8005716:	d82d      	bhi.n	8005774 <UART_SetConfig+0x164>
 8005718:	a201      	add	r2, pc, #4	@ (adr r2, 8005720 <UART_SetConfig+0x110>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005755 	.word	0x08005755
 8005724:	08005775 	.word	0x08005775
 8005728:	08005775 	.word	0x08005775
 800572c:	08005775 	.word	0x08005775
 8005730:	08005765 	.word	0x08005765
 8005734:	08005775 	.word	0x08005775
 8005738:	08005775 	.word	0x08005775
 800573c:	08005775 	.word	0x08005775
 8005740:	0800575d 	.word	0x0800575d
 8005744:	08005775 	.word	0x08005775
 8005748:	08005775 	.word	0x08005775
 800574c:	08005775 	.word	0x08005775
 8005750:	0800576d 	.word	0x0800576d
 8005754:	2300      	movs	r3, #0
 8005756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800575a:	e0d8      	b.n	800590e <UART_SetConfig+0x2fe>
 800575c:	2302      	movs	r3, #2
 800575e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005762:	e0d4      	b.n	800590e <UART_SetConfig+0x2fe>
 8005764:	2304      	movs	r3, #4
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800576a:	e0d0      	b.n	800590e <UART_SetConfig+0x2fe>
 800576c:	2308      	movs	r3, #8
 800576e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005772:	e0cc      	b.n	800590e <UART_SetConfig+0x2fe>
 8005774:	2310      	movs	r3, #16
 8005776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800577a:	e0c8      	b.n	800590e <UART_SetConfig+0x2fe>
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a5e      	ldr	r2, [pc, #376]	@ (80058fc <UART_SetConfig+0x2ec>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d125      	bne.n	80057d2 <UART_SetConfig+0x1c2>
 8005786:	4b5b      	ldr	r3, [pc, #364]	@ (80058f4 <UART_SetConfig+0x2e4>)
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005790:	2b30      	cmp	r3, #48	@ 0x30
 8005792:	d016      	beq.n	80057c2 <UART_SetConfig+0x1b2>
 8005794:	2b30      	cmp	r3, #48	@ 0x30
 8005796:	d818      	bhi.n	80057ca <UART_SetConfig+0x1ba>
 8005798:	2b20      	cmp	r3, #32
 800579a:	d00a      	beq.n	80057b2 <UART_SetConfig+0x1a2>
 800579c:	2b20      	cmp	r3, #32
 800579e:	d814      	bhi.n	80057ca <UART_SetConfig+0x1ba>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <UART_SetConfig+0x19a>
 80057a4:	2b10      	cmp	r3, #16
 80057a6:	d008      	beq.n	80057ba <UART_SetConfig+0x1aa>
 80057a8:	e00f      	b.n	80057ca <UART_SetConfig+0x1ba>
 80057aa:	2300      	movs	r3, #0
 80057ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057b0:	e0ad      	b.n	800590e <UART_SetConfig+0x2fe>
 80057b2:	2302      	movs	r3, #2
 80057b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057b8:	e0a9      	b.n	800590e <UART_SetConfig+0x2fe>
 80057ba:	2304      	movs	r3, #4
 80057bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057c0:	e0a5      	b.n	800590e <UART_SetConfig+0x2fe>
 80057c2:	2308      	movs	r3, #8
 80057c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057c8:	e0a1      	b.n	800590e <UART_SetConfig+0x2fe>
 80057ca:	2310      	movs	r3, #16
 80057cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057d0:	e09d      	b.n	800590e <UART_SetConfig+0x2fe>
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a4a      	ldr	r2, [pc, #296]	@ (8005900 <UART_SetConfig+0x2f0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d125      	bne.n	8005828 <UART_SetConfig+0x218>
 80057dc:	4b45      	ldr	r3, [pc, #276]	@ (80058f4 <UART_SetConfig+0x2e4>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80057e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80057e8:	d016      	beq.n	8005818 <UART_SetConfig+0x208>
 80057ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80057ec:	d818      	bhi.n	8005820 <UART_SetConfig+0x210>
 80057ee:	2b80      	cmp	r3, #128	@ 0x80
 80057f0:	d00a      	beq.n	8005808 <UART_SetConfig+0x1f8>
 80057f2:	2b80      	cmp	r3, #128	@ 0x80
 80057f4:	d814      	bhi.n	8005820 <UART_SetConfig+0x210>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <UART_SetConfig+0x1f0>
 80057fa:	2b40      	cmp	r3, #64	@ 0x40
 80057fc:	d008      	beq.n	8005810 <UART_SetConfig+0x200>
 80057fe:	e00f      	b.n	8005820 <UART_SetConfig+0x210>
 8005800:	2300      	movs	r3, #0
 8005802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005806:	e082      	b.n	800590e <UART_SetConfig+0x2fe>
 8005808:	2302      	movs	r3, #2
 800580a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800580e:	e07e      	b.n	800590e <UART_SetConfig+0x2fe>
 8005810:	2304      	movs	r3, #4
 8005812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005816:	e07a      	b.n	800590e <UART_SetConfig+0x2fe>
 8005818:	2308      	movs	r3, #8
 800581a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800581e:	e076      	b.n	800590e <UART_SetConfig+0x2fe>
 8005820:	2310      	movs	r3, #16
 8005822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005826:	e072      	b.n	800590e <UART_SetConfig+0x2fe>
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a35      	ldr	r2, [pc, #212]	@ (8005904 <UART_SetConfig+0x2f4>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d12a      	bne.n	8005888 <UART_SetConfig+0x278>
 8005832:	4b30      	ldr	r3, [pc, #192]	@ (80058f4 <UART_SetConfig+0x2e4>)
 8005834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005838:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800583c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005840:	d01a      	beq.n	8005878 <UART_SetConfig+0x268>
 8005842:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005846:	d81b      	bhi.n	8005880 <UART_SetConfig+0x270>
 8005848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800584c:	d00c      	beq.n	8005868 <UART_SetConfig+0x258>
 800584e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005852:	d815      	bhi.n	8005880 <UART_SetConfig+0x270>
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <UART_SetConfig+0x250>
 8005858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800585c:	d008      	beq.n	8005870 <UART_SetConfig+0x260>
 800585e:	e00f      	b.n	8005880 <UART_SetConfig+0x270>
 8005860:	2300      	movs	r3, #0
 8005862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005866:	e052      	b.n	800590e <UART_SetConfig+0x2fe>
 8005868:	2302      	movs	r3, #2
 800586a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800586e:	e04e      	b.n	800590e <UART_SetConfig+0x2fe>
 8005870:	2304      	movs	r3, #4
 8005872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005876:	e04a      	b.n	800590e <UART_SetConfig+0x2fe>
 8005878:	2308      	movs	r3, #8
 800587a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800587e:	e046      	b.n	800590e <UART_SetConfig+0x2fe>
 8005880:	2310      	movs	r3, #16
 8005882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005886:	e042      	b.n	800590e <UART_SetConfig+0x2fe>
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a17      	ldr	r2, [pc, #92]	@ (80058ec <UART_SetConfig+0x2dc>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d13a      	bne.n	8005908 <UART_SetConfig+0x2f8>
 8005892:	4b18      	ldr	r3, [pc, #96]	@ (80058f4 <UART_SetConfig+0x2e4>)
 8005894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005898:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800589c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058a0:	d01a      	beq.n	80058d8 <UART_SetConfig+0x2c8>
 80058a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058a6:	d81b      	bhi.n	80058e0 <UART_SetConfig+0x2d0>
 80058a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058ac:	d00c      	beq.n	80058c8 <UART_SetConfig+0x2b8>
 80058ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058b2:	d815      	bhi.n	80058e0 <UART_SetConfig+0x2d0>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <UART_SetConfig+0x2b0>
 80058b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058bc:	d008      	beq.n	80058d0 <UART_SetConfig+0x2c0>
 80058be:	e00f      	b.n	80058e0 <UART_SetConfig+0x2d0>
 80058c0:	2300      	movs	r3, #0
 80058c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058c6:	e022      	b.n	800590e <UART_SetConfig+0x2fe>
 80058c8:	2302      	movs	r3, #2
 80058ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ce:	e01e      	b.n	800590e <UART_SetConfig+0x2fe>
 80058d0:	2304      	movs	r3, #4
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058d6:	e01a      	b.n	800590e <UART_SetConfig+0x2fe>
 80058d8:	2308      	movs	r3, #8
 80058da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058de:	e016      	b.n	800590e <UART_SetConfig+0x2fe>
 80058e0:	2310      	movs	r3, #16
 80058e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058e6:	e012      	b.n	800590e <UART_SetConfig+0x2fe>
 80058e8:	cfff69f3 	.word	0xcfff69f3
 80058ec:	40008000 	.word	0x40008000
 80058f0:	40013800 	.word	0x40013800
 80058f4:	40021000 	.word	0x40021000
 80058f8:	40004400 	.word	0x40004400
 80058fc:	40004800 	.word	0x40004800
 8005900:	40004c00 	.word	0x40004c00
 8005904:	40005000 	.word	0x40005000
 8005908:	2310      	movs	r3, #16
 800590a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4aae      	ldr	r2, [pc, #696]	@ (8005bcc <UART_SetConfig+0x5bc>)
 8005914:	4293      	cmp	r3, r2
 8005916:	f040 8097 	bne.w	8005a48 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800591a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800591e:	2b08      	cmp	r3, #8
 8005920:	d823      	bhi.n	800596a <UART_SetConfig+0x35a>
 8005922:	a201      	add	r2, pc, #4	@ (adr r2, 8005928 <UART_SetConfig+0x318>)
 8005924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005928:	0800594d 	.word	0x0800594d
 800592c:	0800596b 	.word	0x0800596b
 8005930:	08005955 	.word	0x08005955
 8005934:	0800596b 	.word	0x0800596b
 8005938:	0800595b 	.word	0x0800595b
 800593c:	0800596b 	.word	0x0800596b
 8005940:	0800596b 	.word	0x0800596b
 8005944:	0800596b 	.word	0x0800596b
 8005948:	08005963 	.word	0x08005963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800594c:	f7fd fb22 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8005950:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005952:	e010      	b.n	8005976 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005954:	4b9e      	ldr	r3, [pc, #632]	@ (8005bd0 <UART_SetConfig+0x5c0>)
 8005956:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005958:	e00d      	b.n	8005976 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595a:	f7fd fa85 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 800595e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005960:	e009      	b.n	8005976 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005966:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005968:	e005      	b.n	8005976 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005974:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 8130 	beq.w	8005bde <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005982:	4a94      	ldr	r2, [pc, #592]	@ (8005bd4 <UART_SetConfig+0x5c4>)
 8005984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005988:	461a      	mov	r2, r3
 800598a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005990:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	4613      	mov	r3, r2
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	4413      	add	r3, r2
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d305      	bcc.n	80059ae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d903      	bls.n	80059b6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80059b4:	e113      	b.n	8005bde <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b8:	2200      	movs	r2, #0
 80059ba:	60bb      	str	r3, [r7, #8]
 80059bc:	60fa      	str	r2, [r7, #12]
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c2:	4a84      	ldr	r2, [pc, #528]	@ (8005bd4 <UART_SetConfig+0x5c4>)
 80059c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2200      	movs	r2, #0
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059d8:	f7fa fc62 	bl	80002a0 <__aeabi_uldivmod>
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	4610      	mov	r0, r2
 80059e2:	4619      	mov	r1, r3
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	020b      	lsls	r3, r1, #8
 80059ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059f2:	0202      	lsls	r2, r0, #8
 80059f4:	6979      	ldr	r1, [r7, #20]
 80059f6:	6849      	ldr	r1, [r1, #4]
 80059f8:	0849      	lsrs	r1, r1, #1
 80059fa:	2000      	movs	r0, #0
 80059fc:	460c      	mov	r4, r1
 80059fe:	4605      	mov	r5, r0
 8005a00:	eb12 0804 	adds.w	r8, r2, r4
 8005a04:	eb43 0905 	adc.w	r9, r3, r5
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	469a      	mov	sl, r3
 8005a10:	4693      	mov	fp, r2
 8005a12:	4652      	mov	r2, sl
 8005a14:	465b      	mov	r3, fp
 8005a16:	4640      	mov	r0, r8
 8005a18:	4649      	mov	r1, r9
 8005a1a:	f7fa fc41 	bl	80002a0 <__aeabi_uldivmod>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4613      	mov	r3, r2
 8005a24:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a2c:	d308      	bcc.n	8005a40 <UART_SetConfig+0x430>
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a34:	d204      	bcs.n	8005a40 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6a3a      	ldr	r2, [r7, #32]
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	e0ce      	b.n	8005bde <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005a46:	e0ca      	b.n	8005bde <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a50:	d166      	bne.n	8005b20 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005a52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d827      	bhi.n	8005aaa <UART_SetConfig+0x49a>
 8005a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a60 <UART_SetConfig+0x450>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005a85 	.word	0x08005a85
 8005a64:	08005a8d 	.word	0x08005a8d
 8005a68:	08005a95 	.word	0x08005a95
 8005a6c:	08005aab 	.word	0x08005aab
 8005a70:	08005a9b 	.word	0x08005a9b
 8005a74:	08005aab 	.word	0x08005aab
 8005a78:	08005aab 	.word	0x08005aab
 8005a7c:	08005aab 	.word	0x08005aab
 8005a80:	08005aa3 	.word	0x08005aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a84:	f7fd fa86 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8005a88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a8a:	e014      	b.n	8005ab6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a8c:	f7fd fa98 	bl	8002fc0 <HAL_RCC_GetPCLK2Freq>
 8005a90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a92:	e010      	b.n	8005ab6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a94:	4b4e      	ldr	r3, [pc, #312]	@ (8005bd0 <UART_SetConfig+0x5c0>)
 8005a96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a98:	e00d      	b.n	8005ab6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a9a:	f7fd f9e5 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8005a9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005aa0:	e009      	b.n	8005ab6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005aa8:	e005      	b.n	8005ab6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ab4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8090 	beq.w	8005bde <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac2:	4a44      	ldr	r2, [pc, #272]	@ (8005bd4 <UART_SetConfig+0x5c4>)
 8005ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ad0:	005a      	lsls	r2, r3, #1
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	085b      	lsrs	r3, r3, #1
 8005ad8:	441a      	add	r2, r3
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	2b0f      	cmp	r3, #15
 8005ae8:	d916      	bls.n	8005b18 <UART_SetConfig+0x508>
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af0:	d212      	bcs.n	8005b18 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	f023 030f 	bic.w	r3, r3, #15
 8005afa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	085b      	lsrs	r3, r3, #1
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	8bfb      	ldrh	r3, [r7, #30]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	8bfa      	ldrh	r2, [r7, #30]
 8005b14:	60da      	str	r2, [r3, #12]
 8005b16:	e062      	b.n	8005bde <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b1e:	e05e      	b.n	8005bde <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d828      	bhi.n	8005b7a <UART_SetConfig+0x56a>
 8005b28:	a201      	add	r2, pc, #4	@ (adr r2, 8005b30 <UART_SetConfig+0x520>)
 8005b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2e:	bf00      	nop
 8005b30:	08005b55 	.word	0x08005b55
 8005b34:	08005b5d 	.word	0x08005b5d
 8005b38:	08005b65 	.word	0x08005b65
 8005b3c:	08005b7b 	.word	0x08005b7b
 8005b40:	08005b6b 	.word	0x08005b6b
 8005b44:	08005b7b 	.word	0x08005b7b
 8005b48:	08005b7b 	.word	0x08005b7b
 8005b4c:	08005b7b 	.word	0x08005b7b
 8005b50:	08005b73 	.word	0x08005b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b54:	f7fd fa1e 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8005b58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b5a:	e014      	b.n	8005b86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b5c:	f7fd fa30 	bl	8002fc0 <HAL_RCC_GetPCLK2Freq>
 8005b60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b62:	e010      	b.n	8005b86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b64:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd0 <UART_SetConfig+0x5c0>)
 8005b66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b68:	e00d      	b.n	8005b86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b6a:	f7fd f97d 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8005b6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b70:	e009      	b.n	8005b86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b78:	e005      	b.n	8005b86 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005b84:	bf00      	nop
    }

    if (pclk != 0U)
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d028      	beq.n	8005bde <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b90:	4a10      	ldr	r2, [pc, #64]	@ (8005bd4 <UART_SetConfig+0x5c4>)
 8005b92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b96:	461a      	mov	r2, r3
 8005b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	441a      	add	r2, r3
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bae:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	2b0f      	cmp	r3, #15
 8005bb4:	d910      	bls.n	8005bd8 <UART_SetConfig+0x5c8>
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bbc:	d20c      	bcs.n	8005bd8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60da      	str	r2, [r3, #12]
 8005bc8:	e009      	b.n	8005bde <UART_SetConfig+0x5ce>
 8005bca:	bf00      	nop
 8005bcc:	40008000 	.word	0x40008000
 8005bd0:	00f42400 	.word	0x00f42400
 8005bd4:	0800a184 	.word	0x0800a184
      }
      else
      {
        ret = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005bfa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3730      	adds	r7, #48	@ 0x30
 8005c02:	46bd      	mov	sp, r7
 8005c04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005c08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00a      	beq.n	8005c76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7a:	f003 0304 	and.w	r3, r3, #4
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01a      	beq.n	8005d1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d06:	d10a      	bne.n	8005d1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	605a      	str	r2, [r3, #4]
  }
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b098      	sub	sp, #96	@ 0x60
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d5c:	f7fb fd26 	bl	80017ac <HAL_GetTick>
 8005d60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d12f      	bne.n	8005dd0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f88e 	bl	8005ea0 <UART_WaitOnFlagUntilTimeout>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d022      	beq.n	8005dd0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005daa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e6      	bne.n	8005d8a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e063      	b.n	8005e98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0304 	and.w	r3, r3, #4
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	d149      	bne.n	8005e72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dde:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005de6:	2200      	movs	r2, #0
 8005de8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f857 	bl	8005ea0 <UART_WaitOnFlagUntilTimeout>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d03c      	beq.n	8005e72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	623b      	str	r3, [r7, #32]
   return(result);
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e16:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e18:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e6      	bne.n	8005df8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3308      	adds	r3, #8
 8005e30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f023 0301 	bic.w	r3, r3, #1
 8005e40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3308      	adds	r3, #8
 8005e48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e4a:	61fa      	str	r2, [r7, #28]
 8005e4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	69b9      	ldr	r1, [r7, #24]
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	617b      	str	r3, [r7, #20]
   return(result);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e5      	bne.n	8005e2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e012      	b.n	8005e98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3758      	adds	r7, #88	@ 0x58
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	603b      	str	r3, [r7, #0]
 8005eac:	4613      	mov	r3, r2
 8005eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb0:	e04f      	b.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005eb8:	d04b      	beq.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eba:	f7fb fc77 	bl	80017ac <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d302      	bcc.n	8005ed0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e04e      	b.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d037      	beq.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b80      	cmp	r3, #128	@ 0x80
 8005ee6:	d034      	beq.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b40      	cmp	r3, #64	@ 0x40
 8005eec:	d031      	beq.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d110      	bne.n	8005f1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2208      	movs	r2, #8
 8005f02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f838 	bl	8005f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e029      	b.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f2c:	d111      	bne.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 f81e 	bl	8005f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e00f      	b.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69da      	ldr	r2, [r3, #28]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	bf0c      	ite	eq
 8005f62:	2301      	moveq	r3, #1
 8005f64:	2300      	movne	r3, #0
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	461a      	mov	r2, r3
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d0a0      	beq.n	8005eb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b095      	sub	sp, #84	@ 0x54
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fa2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e6      	bne.n	8005f82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3308      	adds	r3, #8
 8005fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fca:	f023 0301 	bic.w	r3, r3, #1
 8005fce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e3      	bne.n	8005fb4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d118      	bne.n	8006026 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	60bb      	str	r3, [r7, #8]
   return(result);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f023 0310 	bic.w	r3, r3, #16
 8006008:	647b      	str	r3, [r7, #68]	@ 0x44
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	6979      	ldr	r1, [r7, #20]
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	613b      	str	r3, [r7, #16]
   return(result);
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e6      	bne.n	8005ff4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800603a:	bf00      	nop
 800603c:	3754      	adds	r7, #84	@ 0x54
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_UARTEx_DisableFifoMode+0x16>
 8006058:	2302      	movs	r3, #2
 800605a:	e027      	b.n	80060ac <HAL_UARTEx_DisableFifoMode+0x66>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2224      	movs	r2, #36	@ 0x24
 8006068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0201 	bic.w	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800608a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2220      	movs	r2, #32
 800609e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e02d      	b.n	800612c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2224      	movs	r2, #36	@ 0x24
 80060dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0201 	bic.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f84f 	bl	80061b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2220      	movs	r2, #32
 800611e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006148:	2302      	movs	r3, #2
 800614a:	e02d      	b.n	80061a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2224      	movs	r2, #36	@ 0x24
 8006158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0201 	bic.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f811 	bl	80061b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2220      	movs	r2, #32
 800619a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d108      	bne.n	80061d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061d0:	e031      	b.n	8006236 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061d2:	2308      	movs	r3, #8
 80061d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061d6:	2308      	movs	r3, #8
 80061d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	0e5b      	lsrs	r3, r3, #25
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	0f5b      	lsrs	r3, r3, #29
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061fa:	7bbb      	ldrb	r3, [r7, #14]
 80061fc:	7b3a      	ldrb	r2, [r7, #12]
 80061fe:	4911      	ldr	r1, [pc, #68]	@ (8006244 <UARTEx_SetNbDataToProcess+0x94>)
 8006200:	5c8a      	ldrb	r2, [r1, r2]
 8006202:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006206:	7b3a      	ldrb	r2, [r7, #12]
 8006208:	490f      	ldr	r1, [pc, #60]	@ (8006248 <UARTEx_SetNbDataToProcess+0x98>)
 800620a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800620c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006210:	b29a      	uxth	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	7b7a      	ldrb	r2, [r7, #13]
 800621c:	4909      	ldr	r1, [pc, #36]	@ (8006244 <UARTEx_SetNbDataToProcess+0x94>)
 800621e:	5c8a      	ldrb	r2, [r1, r2]
 8006220:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006224:	7b7a      	ldrb	r2, [r7, #13]
 8006226:	4908      	ldr	r1, [pc, #32]	@ (8006248 <UARTEx_SetNbDataToProcess+0x98>)
 8006228:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800622a:	fb93 f3f2 	sdiv	r3, r3, r2
 800622e:	b29a      	uxth	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006236:	bf00      	nop
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	0800a19c 	.word	0x0800a19c
 8006248:	0800a1a4 	.word	0x0800a1a4

0800624c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	6812      	ldr	r2, [r2, #0]
 8006264:	f023 0101 	bic.w	r1, r3, #1
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	2b08      	cmp	r3, #8
 8006274:	d102      	bne.n	800627c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006276:	2340      	movs	r3, #64	@ 0x40
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	e001      	b.n	8006280 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800628c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006292:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006298:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800629e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80062a4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80062aa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80062b0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 80062b6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 80062bc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 80062c2:	4313      	orrs	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80062ee:	4b23      	ldr	r3, [pc, #140]	@ (800637c <FMC_NORSRAM_Init+0x130>)
 80062f0:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062f8:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006300:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8006308:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006310:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	43db      	mvns	r3, r3
 8006320:	ea02 0103 	and.w	r1, r2, r3
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	4319      	orrs	r1, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800633a:	d10c      	bne.n	8006356 <FMC_NORSRAM_Init+0x10a>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d008      	beq.n	8006356 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d006      	beq.n	800636c <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	0008fb7f 	.word	0x0008fb7f

08006380 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006380:	b480      	push	{r7}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 8006396:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800639e:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 80063a6:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 80063ae:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	3b01      	subs	r3, #1
 80063b6:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 80063b8:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	3b02      	subs	r3, #2
 80063c0:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 80063c2:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 80063ce:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
    Timing->AccessMode;
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063e2:	d113      	bne.n	800640c <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80063ec:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	051b      	lsls	r3, r3, #20
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	431a      	orrs	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	371c      	adds	r7, #28
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800641a:	b480      	push	{r7}
 800641c:	b085      	sub	sp, #20
 800641e:	af00      	add	r7, sp, #0
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	607a      	str	r2, [r7, #4]
 8006426:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800642e:	d121      	bne.n	8006474 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006438:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	6819      	ldr	r1, [r3, #0]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	4319      	orrs	r1, r3
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	4319      	orrs	r1, r3
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	079b      	lsls	r3, r3, #30
 8006456:	4319      	orrs	r1, r3
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	4319      	orrs	r1, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	041b      	lsls	r3, r3, #16
 8006464:	430b      	orrs	r3, r1
 8006466:	ea42 0103 	orr.w	r1, r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006472:	e005      	b.n	8006480 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800647c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800648e:	b084      	sub	sp, #16
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	f107 001c 	add.w	r0, r7, #28
 800649c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fa69 	bl	8006984 <USB_CoreReset>
 80064b2:	4603      	mov	r3, r0
 80064b4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80064b6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d106      	bne.n	80064cc <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80064ca:	e005      	b.n	80064d8 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064e4:	b004      	add	sp, #16
 80064e6:	4770      	bx	lr

080064e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f023 0201 	bic.w	r2, r3, #1
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b084      	sub	sp, #16
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	460b      	mov	r3, r1
 8006514:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006526:	78fb      	ldrb	r3, [r7, #3]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d115      	bne.n	8006558 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006538:	200a      	movs	r0, #10
 800653a:	f7fb f943 	bl	80017c4 <HAL_Delay>
      ms += 10U;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	330a      	adds	r3, #10
 8006542:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fa0f 	bl	8006968 <USB_GetMode>
 800654a:	4603      	mov	r3, r0
 800654c:	2b01      	cmp	r3, #1
 800654e:	d01e      	beq.n	800658e <USB_SetCurrentMode+0x84>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2bc7      	cmp	r3, #199	@ 0xc7
 8006554:	d9f0      	bls.n	8006538 <USB_SetCurrentMode+0x2e>
 8006556:	e01a      	b.n	800658e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d115      	bne.n	800658a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800656a:	200a      	movs	r0, #10
 800656c:	f7fb f92a 	bl	80017c4 <HAL_Delay>
      ms += 10U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	330a      	adds	r3, #10
 8006574:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f9f6 	bl	8006968 <USB_GetMode>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d005      	beq.n	800658e <USB_SetCurrentMode+0x84>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2bc7      	cmp	r3, #199	@ 0xc7
 8006586:	d9f0      	bls.n	800656a <USB_SetCurrentMode+0x60>
 8006588:	e001      	b.n	800658e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e005      	b.n	800659a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2bc8      	cmp	r3, #200	@ 0xc8
 8006592:	d101      	bne.n	8006598 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e000      	b.n	800659a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065a4:	b084      	sub	sp, #16
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b086      	sub	sp, #24
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80065b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065be:	2300      	movs	r3, #0
 80065c0:	613b      	str	r3, [r7, #16]
 80065c2:	e009      	b.n	80065d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	3340      	adds	r3, #64	@ 0x40
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	2200      	movs	r2, #0
 80065d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	3301      	adds	r3, #1
 80065d6:	613b      	str	r3, [r7, #16]
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	2b0e      	cmp	r3, #14
 80065dc:	d9f2      	bls.n	80065c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d11c      	bne.n	8006620 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065f4:	f043 0302 	orr.w	r3, r3, #2
 80065f8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fe:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	e005      	b.n	800662c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006624:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006632:	461a      	mov	r2, r3
 8006634:	2300      	movs	r3, #0
 8006636:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006638:	2103      	movs	r1, #3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f95a 	bl	80068f4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006640:	2110      	movs	r1, #16
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f8f6 	bl	8006834 <USB_FlushTxFifo>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f920 	bl	8006898 <USB_FlushRxFifo>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006668:	461a      	mov	r2, r3
 800666a:	2300      	movs	r3, #0
 800666c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006674:	461a      	mov	r2, r3
 8006676:	2300      	movs	r3, #0
 8006678:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006680:	461a      	mov	r2, r3
 8006682:	2300      	movs	r3, #0
 8006684:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006686:	2300      	movs	r3, #0
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	e043      	b.n	8006714 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800669e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066a2:	d118      	bne.n	80066d6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10a      	bne.n	80066c0 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066b6:	461a      	mov	r2, r3
 80066b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	e013      	b.n	80066e8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066cc:	461a      	mov	r2, r3
 80066ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	e008      	b.n	80066e8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e2:	461a      	mov	r2, r3
 80066e4:	2300      	movs	r3, #0
 80066e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066f4:	461a      	mov	r2, r3
 80066f6:	2300      	movs	r3, #0
 80066f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006706:	461a      	mov	r2, r3
 8006708:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800670c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	3301      	adds	r3, #1
 8006712:	613b      	str	r3, [r7, #16]
 8006714:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006718:	461a      	mov	r2, r3
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	4293      	cmp	r3, r2
 800671e:	d3b5      	bcc.n	800668c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006720:	2300      	movs	r3, #0
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	e043      	b.n	80067ae <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006738:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800673c:	d118      	bne.n	8006770 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10a      	bne.n	800675a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006750:	461a      	mov	r2, r3
 8006752:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006756:	6013      	str	r3, [r2, #0]
 8006758:	e013      	b.n	8006782 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006766:	461a      	mov	r2, r3
 8006768:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	e008      	b.n	8006782 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800677c:	461a      	mov	r2, r3
 800677e:	2300      	movs	r3, #0
 8006780:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800678e:	461a      	mov	r2, r3
 8006790:	2300      	movs	r3, #0
 8006792:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a0:	461a      	mov	r2, r3
 80067a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80067a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	3301      	adds	r3, #1
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80067b2:	461a      	mov	r2, r3
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d3b5      	bcc.n	8006726 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80067da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	f043 0210 	orr.w	r2, r3, #16
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	699a      	ldr	r2, [r3, #24]
 80067ec:	4b10      	ldr	r3, [pc, #64]	@ (8006830 <USB_DevInit+0x28c>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	f043 0208 	orr.w	r2, r3, #8
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006808:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800680c:	2b01      	cmp	r3, #1
 800680e:	d107      	bne.n	8006820 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006818:	f043 0304 	orr.w	r3, r3, #4
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006820:	7dfb      	ldrb	r3, [r7, #23]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800682c:	b004      	add	sp, #16
 800682e:	4770      	bx	lr
 8006830:	803c3800 	.word	0x803c3800

08006834 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3301      	adds	r3, #1
 8006846:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800684e:	d901      	bls.n	8006854 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e01b      	b.n	800688c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	daf2      	bge.n	8006842 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	019b      	lsls	r3, r3, #6
 8006864:	f043 0220 	orr.w	r2, r3, #32
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	3301      	adds	r3, #1
 8006870:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006878:	d901      	bls.n	800687e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e006      	b.n	800688c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b20      	cmp	r3, #32
 8006888:	d0f0      	beq.n	800686c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	3301      	adds	r3, #1
 80068a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068b0:	d901      	bls.n	80068b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e018      	b.n	80068e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	daf2      	bge.n	80068a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2210      	movs	r2, #16
 80068c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068d4:	d901      	bls.n	80068da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e006      	b.n	80068e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f003 0310 	and.w	r3, r3, #16
 80068e2:	2b10      	cmp	r3, #16
 80068e4:	d0f0      	beq.n	80068c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	68f9      	ldr	r1, [r7, #12]
 8006910:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006914:	4313      	orrs	r3, r2
 8006916:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006926:	b480      	push	{r7}
 8006928:	b085      	sub	sp, #20
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006940:	f023 0303 	bic.w	r3, r3, #3
 8006944:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006954:	f043 0302 	orr.w	r3, r3, #2
 8006958:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	f003 0301 	and.w	r3, r3, #1
}
 8006978:	4618      	mov	r0, r3
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	3301      	adds	r3, #1
 8006994:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800699c:	d901      	bls.n	80069a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e01b      	b.n	80069da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	daf2      	bge.n	8006990 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	f043 0201 	orr.w	r2, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3301      	adds	r3, #1
 80069be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069c6:	d901      	bls.n	80069cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e006      	b.n	80069da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d0f0      	beq.n	80069ba <USB_CoreReset+0x36>

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
	...

080069e8 <ai4i_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool ai4i_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_ai4i_activations_map, 1, params)) {
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	2101      	movs	r1, #1
 80069f6:	4836      	ldr	r0, [pc, #216]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 80069f8:	f000 fd46 	bl	8007488 <ai_platform_get_activations_map>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d05b      	beq.n	8006aba <ai4i_configure_activations+0xd2>
    /* Updating activations (byte) offsets */
    
    serving_default_input_40_output_array.data = AI_PTR(g_ai4i_activations_map[0] + 236);
 8006a02:	4b33      	ldr	r3, [pc, #204]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	33ec      	adds	r3, #236	@ 0xec
 8006a08:	4a32      	ldr	r2, [pc, #200]	@ (8006ad4 <ai4i_configure_activations+0xec>)
 8006a0a:	6093      	str	r3, [r2, #8]
    serving_default_input_40_output_array.data_start = AI_PTR(g_ai4i_activations_map[0] + 236);
 8006a0c:	4b30      	ldr	r3, [pc, #192]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	33ec      	adds	r3, #236	@ 0xec
 8006a12:	4a30      	ldr	r2, [pc, #192]	@ (8006ad4 <ai4i_configure_activations+0xec>)
 8006a14:	60d3      	str	r3, [r2, #12]
    gemm_0_output_array.data = AI_PTR(g_ai4i_activations_map[0] + 256);
 8006a16:	4b2e      	ldr	r3, [pc, #184]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006a1e:	4a2e      	ldr	r2, [pc, #184]	@ (8006ad8 <ai4i_configure_activations+0xf0>)
 8006a20:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_ai4i_activations_map[0] + 256);
 8006a22:	4b2b      	ldr	r3, [pc, #172]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006a2a:	4a2b      	ldr	r2, [pc, #172]	@ (8006ad8 <ai4i_configure_activations+0xf0>)
 8006a2c:	60d3      	str	r3, [r2, #12]
    nl_0_nl_output_array.data = AI_PTR(g_ai4i_activations_map[0] + 256);
 8006a2e:	4b28      	ldr	r3, [pc, #160]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006a36:	4a29      	ldr	r2, [pc, #164]	@ (8006adc <ai4i_configure_activations+0xf4>)
 8006a38:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_ai4i_activations_map[0] + 256);
 8006a3a:	4b25      	ldr	r3, [pc, #148]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006a42:	4a26      	ldr	r2, [pc, #152]	@ (8006adc <ai4i_configure_activations+0xf4>)
 8006a44:	60d3      	str	r3, [r2, #12]
    gemm_1_output_array.data = AI_PTR(g_ai4i_activations_map[0] + 0);
 8006a46:	4b22      	ldr	r3, [pc, #136]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a25      	ldr	r2, [pc, #148]	@ (8006ae0 <ai4i_configure_activations+0xf8>)
 8006a4c:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_ai4i_activations_map[0] + 0);
 8006a4e:	4b20      	ldr	r3, [pc, #128]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a23      	ldr	r2, [pc, #140]	@ (8006ae0 <ai4i_configure_activations+0xf8>)
 8006a54:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(g_ai4i_activations_map[0] + 256);
 8006a56:	4b1e      	ldr	r3, [pc, #120]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006a5e:	4a21      	ldr	r2, [pc, #132]	@ (8006ae4 <ai4i_configure_activations+0xfc>)
 8006a60:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_ai4i_activations_map[0] + 256);
 8006a62:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ae4 <ai4i_configure_activations+0xfc>)
 8006a6c:	60d3      	str	r3, [r2, #12]
    gemm_2_output_array.data = AI_PTR(g_ai4i_activations_map[0] + 0);
 8006a6e:	4b18      	ldr	r3, [pc, #96]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae8 <ai4i_configure_activations+0x100>)
 8006a74:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_ai4i_activations_map[0] + 0);
 8006a76:	4b16      	ldr	r3, [pc, #88]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae8 <ai4i_configure_activations+0x100>)
 8006a7c:	60d3      	str	r3, [r2, #12]
    nl_2_nl_output_array.data = AI_PTR(g_ai4i_activations_map[0] + 128);
 8006a7e:	4b14      	ldr	r3, [pc, #80]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3380      	adds	r3, #128	@ 0x80
 8006a84:	4a19      	ldr	r2, [pc, #100]	@ (8006aec <ai4i_configure_activations+0x104>)
 8006a86:	6093      	str	r3, [r2, #8]
    nl_2_nl_output_array.data_start = AI_PTR(g_ai4i_activations_map[0] + 128);
 8006a88:	4b11      	ldr	r3, [pc, #68]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3380      	adds	r3, #128	@ 0x80
 8006a8e:	4a17      	ldr	r2, [pc, #92]	@ (8006aec <ai4i_configure_activations+0x104>)
 8006a90:	60d3      	str	r3, [r2, #12]
    gemm_3_output_array.data = AI_PTR(g_ai4i_activations_map[0] + 0);
 8006a92:	4b0f      	ldr	r3, [pc, #60]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a16      	ldr	r2, [pc, #88]	@ (8006af0 <ai4i_configure_activations+0x108>)
 8006a98:	6093      	str	r3, [r2, #8]
    gemm_3_output_array.data_start = AI_PTR(g_ai4i_activations_map[0] + 0);
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a14      	ldr	r2, [pc, #80]	@ (8006af0 <ai4i_configure_activations+0x108>)
 8006aa0:	60d3      	str	r3, [r2, #12]
    nl_4_output_array.data = AI_PTR(g_ai4i_activations_map[0] + 20);
 8006aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3314      	adds	r3, #20
 8006aa8:	4a12      	ldr	r2, [pc, #72]	@ (8006af4 <ai4i_configure_activations+0x10c>)
 8006aaa:	6093      	str	r3, [r2, #8]
    nl_4_output_array.data_start = AI_PTR(g_ai4i_activations_map[0] + 20);
 8006aac:	4b08      	ldr	r3, [pc, #32]	@ (8006ad0 <ai4i_configure_activations+0xe8>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3314      	adds	r3, #20
 8006ab2:	4a10      	ldr	r2, [pc, #64]	@ (8006af4 <ai4i_configure_activations+0x10c>)
 8006ab4:	60d3      	str	r3, [r2, #12]
    return true;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e005      	b.n	8006ac6 <ai4i_configure_activations+0xde>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8006aba:	2213      	movs	r2, #19
 8006abc:	2130      	movs	r1, #48	@ 0x30
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fd64 	bl	800758c <ai_platform_network_set_error>
  return false;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20001154 	.word	0x20001154
 8006ad4:	2000000c 	.word	0x2000000c
 8006ad8:	2000001c 	.word	0x2000001c
 8006adc:	2000002c 	.word	0x2000002c
 8006ae0:	2000003c 	.word	0x2000003c
 8006ae4:	2000004c 	.word	0x2000004c
 8006ae8:	2000005c 	.word	0x2000005c
 8006aec:	2000006c 	.word	0x2000006c
 8006af0:	2000007c 	.word	0x2000007c
 8006af4:	2000008c 	.word	0x2000008c

08006af8 <ai4i_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool ai4i_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_ai4i_weights_map, 1, params)) {
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	2101      	movs	r1, #1
 8006b06:	4850      	ldr	r0, [pc, #320]	@ (8006c48 <ai4i_configure_weights+0x150>)
 8006b08:	f000 fc6a 	bl	80073e0 <ai_platform_get_weights_map>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 8090 	beq.w	8006c34 <ai4i_configure_weights+0x13c>
    /* Updating weights (byte) offsets */
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8006b14:	4b4d      	ldr	r3, [pc, #308]	@ (8006c4c <ai4i_configure_weights+0x154>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b1c:	4a4b      	ldr	r2, [pc, #300]	@ (8006c4c <ai4i_configure_weights+0x154>)
 8006b1e:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_ai4i_weights_map[0] + 0);
 8006b20:	4b49      	ldr	r3, [pc, #292]	@ (8006c48 <ai4i_configure_weights+0x150>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a49      	ldr	r2, [pc, #292]	@ (8006c4c <ai4i_configure_weights+0x154>)
 8006b26:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_ai4i_weights_map[0] + 0);
 8006b28:	4b47      	ldr	r3, [pc, #284]	@ (8006c48 <ai4i_configure_weights+0x150>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a47      	ldr	r2, [pc, #284]	@ (8006c4c <ai4i_configure_weights+0x154>)
 8006b2e:	60d3      	str	r3, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8006b30:	4b47      	ldr	r3, [pc, #284]	@ (8006c50 <ai4i_configure_weights+0x158>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b38:	4a45      	ldr	r2, [pc, #276]	@ (8006c50 <ai4i_configure_weights+0x158>)
 8006b3a:	6013      	str	r3, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_ai4i_weights_map[0] + 2560);
 8006b3c:	4b42      	ldr	r3, [pc, #264]	@ (8006c48 <ai4i_configure_weights+0x150>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f503 6320 	add.w	r3, r3, #2560	@ 0xa00
 8006b44:	4a42      	ldr	r2, [pc, #264]	@ (8006c50 <ai4i_configure_weights+0x158>)
 8006b46:	6093      	str	r3, [r2, #8]
    gemm_0_bias_array.data_start = AI_PTR(g_ai4i_weights_map[0] + 2560);
 8006b48:	4b3f      	ldr	r3, [pc, #252]	@ (8006c48 <ai4i_configure_weights+0x150>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f503 6320 	add.w	r3, r3, #2560	@ 0xa00
 8006b50:	4a3f      	ldr	r2, [pc, #252]	@ (8006c50 <ai4i_configure_weights+0x158>)
 8006b52:	60d3      	str	r3, [r2, #12]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8006b54:	4b3f      	ldr	r3, [pc, #252]	@ (8006c54 <ai4i_configure_weights+0x15c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b5c:	4a3d      	ldr	r2, [pc, #244]	@ (8006c54 <ai4i_configure_weights+0x15c>)
 8006b5e:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_ai4i_weights_map[0] + 3072);
 8006b60:	4b39      	ldr	r3, [pc, #228]	@ (8006c48 <ai4i_configure_weights+0x150>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8006b68:	4a3a      	ldr	r2, [pc, #232]	@ (8006c54 <ai4i_configure_weights+0x15c>)
 8006b6a:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_ai4i_weights_map[0] + 3072);
 8006b6c:	4b36      	ldr	r3, [pc, #216]	@ (8006c48 <ai4i_configure_weights+0x150>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8006b74:	4a37      	ldr	r2, [pc, #220]	@ (8006c54 <ai4i_configure_weights+0x15c>)
 8006b76:	60d3      	str	r3, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8006b78:	4b37      	ldr	r3, [pc, #220]	@ (8006c58 <ai4i_configure_weights+0x160>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b80:	4a35      	ldr	r2, [pc, #212]	@ (8006c58 <ai4i_configure_weights+0x160>)
 8006b82:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_ai4i_weights_map[0] + 35840);
 8006b84:	4b30      	ldr	r3, [pc, #192]	@ (8006c48 <ai4i_configure_weights+0x150>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f503 430c 	add.w	r3, r3, #35840	@ 0x8c00
 8006b8c:	4a32      	ldr	r2, [pc, #200]	@ (8006c58 <ai4i_configure_weights+0x160>)
 8006b8e:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_ai4i_weights_map[0] + 35840);
 8006b90:	4b2d      	ldr	r3, [pc, #180]	@ (8006c48 <ai4i_configure_weights+0x150>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f503 430c 	add.w	r3, r3, #35840	@ 0x8c00
 8006b98:	4a2f      	ldr	r2, [pc, #188]	@ (8006c58 <ai4i_configure_weights+0x160>)
 8006b9a:	60d3      	str	r3, [r2, #12]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8006b9c:	4b2f      	ldr	r3, [pc, #188]	@ (8006c5c <ai4i_configure_weights+0x164>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ba4:	4a2d      	ldr	r2, [pc, #180]	@ (8006c5c <ai4i_configure_weights+0x164>)
 8006ba6:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_ai4i_weights_map[0] + 36096);
 8006ba8:	4b27      	ldr	r3, [pc, #156]	@ (8006c48 <ai4i_configure_weights+0x150>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f503 430d 	add.w	r3, r3, #36096	@ 0x8d00
 8006bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8006c5c <ai4i_configure_weights+0x164>)
 8006bb2:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_ai4i_weights_map[0] + 36096);
 8006bb4:	4b24      	ldr	r3, [pc, #144]	@ (8006c48 <ai4i_configure_weights+0x150>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f503 430d 	add.w	r3, r3, #36096	@ 0x8d00
 8006bbc:	4a27      	ldr	r2, [pc, #156]	@ (8006c5c <ai4i_configure_weights+0x164>)
 8006bbe:	60d3      	str	r3, [r2, #12]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8006bc0:	4b27      	ldr	r3, [pc, #156]	@ (8006c60 <ai4i_configure_weights+0x168>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bc8:	4a25      	ldr	r2, [pc, #148]	@ (8006c60 <ai4i_configure_weights+0x168>)
 8006bca:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_ai4i_weights_map[0] + 44288);
 8006bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8006c48 <ai4i_configure_weights+0x150>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f503 432d 	add.w	r3, r3, #44288	@ 0xad00
 8006bd4:	4a22      	ldr	r2, [pc, #136]	@ (8006c60 <ai4i_configure_weights+0x168>)
 8006bd6:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_ai4i_weights_map[0] + 44288);
 8006bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8006c48 <ai4i_configure_weights+0x150>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f503 432d 	add.w	r3, r3, #44288	@ 0xad00
 8006be0:	4a1f      	ldr	r2, [pc, #124]	@ (8006c60 <ai4i_configure_weights+0x168>)
 8006be2:	60d3      	str	r3, [r2, #12]
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8006be4:	4b1f      	ldr	r3, [pc, #124]	@ (8006c64 <ai4i_configure_weights+0x16c>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bec:	4a1d      	ldr	r2, [pc, #116]	@ (8006c64 <ai4i_configure_weights+0x16c>)
 8006bee:	6013      	str	r3, [r2, #0]
    gemm_3_weights_array.data = AI_PTR(g_ai4i_weights_map[0] + 44416);
 8006bf0:	4b15      	ldr	r3, [pc, #84]	@ (8006c48 <ai4i_configure_weights+0x150>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f503 432d 	add.w	r3, r3, #44288	@ 0xad00
 8006bf8:	3380      	adds	r3, #128	@ 0x80
 8006bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8006c64 <ai4i_configure_weights+0x16c>)
 8006bfc:	6093      	str	r3, [r2, #8]
    gemm_3_weights_array.data_start = AI_PTR(g_ai4i_weights_map[0] + 44416);
 8006bfe:	4b12      	ldr	r3, [pc, #72]	@ (8006c48 <ai4i_configure_weights+0x150>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f503 432d 	add.w	r3, r3, #44288	@ 0xad00
 8006c06:	3380      	adds	r3, #128	@ 0x80
 8006c08:	4a16      	ldr	r2, [pc, #88]	@ (8006c64 <ai4i_configure_weights+0x16c>)
 8006c0a:	60d3      	str	r3, [r2, #12]
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8006c0c:	4b16      	ldr	r3, [pc, #88]	@ (8006c68 <ai4i_configure_weights+0x170>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c14:	4a14      	ldr	r2, [pc, #80]	@ (8006c68 <ai4i_configure_weights+0x170>)
 8006c16:	6013      	str	r3, [r2, #0]
    gemm_3_bias_array.data = AI_PTR(g_ai4i_weights_map[0] + 45056);
 8006c18:	4b0b      	ldr	r3, [pc, #44]	@ (8006c48 <ai4i_configure_weights+0x150>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8006c20:	4a11      	ldr	r2, [pc, #68]	@ (8006c68 <ai4i_configure_weights+0x170>)
 8006c22:	6093      	str	r3, [r2, #8]
    gemm_3_bias_array.data_start = AI_PTR(g_ai4i_weights_map[0] + 45056);
 8006c24:	4b08      	ldr	r3, [pc, #32]	@ (8006c48 <ai4i_configure_weights+0x150>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8006c2c:	4a0e      	ldr	r2, [pc, #56]	@ (8006c68 <ai4i_configure_weights+0x170>)
 8006c2e:	60d3      	str	r3, [r2, #12]
    return true;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e005      	b.n	8006c40 <ai4i_configure_weights+0x148>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8006c34:	2212      	movs	r2, #18
 8006c36:	2130      	movs	r1, #48	@ 0x30
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fca7 	bl	800758c <ai_platform_network_set_error>
  return false;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	20001158 	.word	0x20001158
 8006c4c:	2000009c 	.word	0x2000009c
 8006c50:	200000ac 	.word	0x200000ac
 8006c54:	200000bc 	.word	0x200000bc
 8006c58:	200000cc 	.word	0x200000cc
 8006c5c:	200000dc 	.word	0x200000dc
 8006c60:	200000ec 	.word	0x200000ec
 8006c64:	200000fc 	.word	0x200000fc
 8006c68:	2000010c 	.word	0x2000010c

08006c6c <ai_ai4i_get_error>:
}


AI_API_ENTRY
ai_error ai_ai4i_get_error(ai_handle network)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fc7d 	bl	8007574 <ai_platform_network_get_error>
 8006c7a:	4603      	mov	r3, r0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <ai_ai4i_create>:


AI_API_ENTRY
ai_error ai_ai4i_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af02      	add	r7, sp, #8
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8006c8e:	2300      	movs	r3, #0
 8006c90:	9301      	str	r3, [sp, #4]
 8006c92:	2305      	movs	r3, #5
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	2301      	movs	r3, #1
 8006c98:	4a04      	ldr	r2, [pc, #16]	@ (8006cac <ai_ai4i_create+0x28>)
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fd65 	bl	800776c <ai_platform_network_create>
 8006ca2:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	20000878 	.word	0x20000878

08006cb0 <ai_ai4i_create_and_init>:


AI_API_ENTRY
ai_error ai_ai4i_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b094      	sub	sp, #80	@ 0x50
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_ai4i_create(network, AI_AI4I_DATA_CONFIG);
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f7ff ffe0 	bl	8006c84 <ai_ai4i_create>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8006cc8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <ai_ai4i_create_and_init+0x24>
    return err;
 8006cd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cd2:	e067      	b.n	8006da4 <ai_ai4i_create_and_init+0xf4>
  }
  
  if (ai_ai4i_data_params_get(&params) != true) {
 8006cd4:	f107 0310 	add.w	r3, r7, #16
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 f8e7 	bl	8006eac <ai_ai4i_data_params_get>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	f083 0301 	eor.w	r3, r3, #1
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d008      	beq.n	8006cfc <ai_ai4i_create_and_init+0x4c>
    err = ai_ai4i_get_error(*network);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff ffbc 	bl	8006c6c <ai_ai4i_get_error>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8006cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cfa:	e053      	b.n	8006da4 <ai_ai4i_create_and_init+0xf4>
  }
#if defined(AI_AI4I_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006d02:	e012      	b.n	8006d2a <ai_ai4i_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8006d04:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8006d08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	4413      	add	r3, r2
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	f107 0310 	add.w	r3, r7, #16
 8006d18:	330c      	adds	r3, #12
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 fb50 	bl	80073c0 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8006d20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006d24:	3301      	adds	r3, #1
 8006d26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d004      	beq.n	8006d3a <ai_ai4i_create_and_init+0x8a>
 8006d30:	8bfb      	ldrh	r3, [r7, #30]
 8006d32:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d3e4      	bcc.n	8006d04 <ai_ai4i_create_and_init+0x54>
  }
#endif
#if defined(AI_AI4I_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006d40:	e012      	b.n	8006d68 <ai_ai4i_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8006d42:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8006d46:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	4413      	add	r3, r2
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	f107 0310 	add.w	r3, r7, #16
 8006d56:	3304      	adds	r3, #4
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 fb31 	bl	80073c0 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8006d5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006d62:	3301      	adds	r3, #1
 8006d64:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d004      	beq.n	8006d78 <ai_ai4i_create_and_init+0xc8>
 8006d6e:	8afb      	ldrh	r3, [r7, #22]
 8006d70:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d3e4      	bcc.n	8006d42 <ai_ai4i_create_and_init+0x92>
  }
#endif
  if (ai_ai4i_init(*network, &params) != true) {
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f107 0210 	add.w	r2, r7, #16
 8006d80:	4611      	mov	r1, r2
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 f846 	bl	8006e14 <ai_ai4i_init>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f083 0301 	eor.w	r3, r3, #1
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d006      	beq.n	8006da2 <ai_ai4i_create_and_init+0xf2>
    err = ai_ai4i_get_error(*network);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff ff67 	bl	8006c6c <ai_ai4i_get_error>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8006da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3750      	adds	r7, #80	@ 0x50
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <ai_ai4i_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_ai4i_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d104      	bne.n	8006dc6 <ai_ai4i_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8006dbc:	4b06      	ldr	r3, [pc, #24]	@ (8006dd8 <ai_ai4i_inputs_get+0x2c>)
 8006dbe:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a06      	ldr	r2, [pc, #24]	@ (8006ddc <ai_ai4i_inputs_get+0x30>)
 8006dc4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fbe5 	bl	8007598 <ai_platform_inputs_get>
 8006dce:	4603      	mov	r3, r0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	20000878 	.word	0x20000878
 8006ddc:	a1c00100 	.word	0xa1c00100

08006de0 <ai_ai4i_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_ai4i_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d104      	bne.n	8006dfa <ai_ai4i_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8006df0:	4b06      	ldr	r3, [pc, #24]	@ (8006e0c <ai_ai4i_outputs_get+0x2c>)
 8006df2:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a06      	ldr	r2, [pc, #24]	@ (8006e10 <ai_ai4i_outputs_get+0x30>)
 8006df8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fc41 	bl	8007684 <ai_platform_outputs_get>
 8006e02:	4603      	mov	r3, r0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20000878 	.word	0x20000878
 8006e10:	a1c00100 	.word	0xa1c00100

08006e14 <ai_ai4i_init>:


AI_API_ENTRY
ai_bool ai_ai4i_init(
  ai_handle network, const ai_network_params* params)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fce5 	bl	80077f0 <ai_platform_network_init>
 8006e26:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <ai_ai4i_init+0x22>
 8006e32:	2300      	movs	r3, #0
 8006e34:	e026      	b.n	8006e84 <ai_ai4i_init+0x70>
  ok &= ai4i_configure_weights(net_ctx, params);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f7ff fe5d 	bl	8006af8 <ai4i_configure_weights>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	461a      	mov	r2, r3
 8006e42:	7afb      	ldrb	r3, [r7, #11]
 8006e44:	4013      	ands	r3, r2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	bf14      	ite	ne
 8006e4a:	2301      	movne	r3, #1
 8006e4c:	2300      	moveq	r3, #0
 8006e4e:	72fb      	strb	r3, [r7, #11]
  ok &= ai4i_configure_activations(net_ctx, params);
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f7ff fdc8 	bl	80069e8 <ai4i_configure_activations>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	7afb      	ldrb	r3, [r7, #11]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	bf14      	ite	ne
 8006e64:	2301      	movne	r3, #1
 8006e66:	2300      	moveq	r3, #0
 8006e68:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fd8e 	bl	800798c <ai_platform_network_post_init>
 8006e70:	4603      	mov	r3, r0
 8006e72:	461a      	mov	r2, r3
 8006e74:	7afb      	ldrb	r3, [r7, #11]
 8006e76:	4013      	ands	r3, r2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	bf14      	ite	ne
 8006e7c:	2301      	movne	r3, #1
 8006e7e:	2300      	moveq	r3, #0
 8006e80:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006e82:	7afb      	ldrb	r3, [r7, #11]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <ai_ai4i_run>:


AI_API_ENTRY
ai_i32 ai_ai4i_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	68b9      	ldr	r1, [r7, #8]
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 fda5 	bl	80079ec <ai_platform_network_process>
 8006ea2:	4603      	mov	r3, r0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <ai_ai4i_data_params_get>:
 * @ingroup ai4i_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_ai4i_data_params_get(ai_network_params* params)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <ai_ai4i_data_params_get+0x12>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	e016      	b.n	8006eec <ai_ai4i_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8006ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8006ef4 <ai_ai4i_data_params_get+0x48>)
 8006ec0:	f107 0310 	add.w	r3, r7, #16
 8006ec4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ec8:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_AI4I_DATA_ACTIVATIONS_COUNT, g_ai4i_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8006ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8006ef8 <ai_ai4i_data_params_get+0x4c>)
 8006ece:	f107 0308 	add.w	r3, r7, #8
 8006ed2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ed6:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_AI4I_DATA_WEIGHTS_COUNT, g_ai4i_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8006eda:	f107 0210 	add.w	r2, r7, #16
 8006ede:	f107 0308 	add.w	r3, r7, #8
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fb23 	bl	8007530 <ai_platform_bind_network_params>
 8006eea:	4603      	mov	r3, r0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3718      	adds	r7, #24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	08009fa0 	.word	0x08009fa0
 8006ef8:	08009fa8 	.word	0x08009fa8

08006efc <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d009      	beq.n	8006f20 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8006f0c:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8006f0e:	461a      	mov	r2, r3
        err.type, err.code);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	4807      	ldr	r0, [pc, #28]	@ (8006f38 <ai_log_err+0x3c>)
 8006f1a:	f002 f895 	bl	8009048 <iprintf>
 8006f1e:	e009      	b.n	8006f34 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8006f20:	793b      	ldrb	r3, [r7, #4]
 8006f22:	4619      	mov	r1, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	4803      	ldr	r0, [pc, #12]	@ (8006f3c <ai_log_err+0x40>)
 8006f2e:	f002 f88b 	bl	8009048 <iprintf>

  do {} while (1);
 8006f32:	bf00      	nop
 8006f34:	bf00      	nop
 8006f36:	e7fd      	b.n	8006f34 <ai_log_err+0x38>
 8006f38:	08009fb0 	.word	0x08009fb0
 8006f3c:	08009fe4 	.word	0x08009fe4

08006f40 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_ai4i_create_and_init(&ai4i, act_addr, NULL);
 8006f48:	2200      	movs	r2, #0
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	4828      	ldr	r0, [pc, #160]	@ (8006ff0 <ai_boostrap+0xb0>)
 8006f4e:	f7ff feaf 	bl	8006cb0 <ai_ai4i_create_and_init>
 8006f52:	4603      	mov	r3, r0
 8006f54:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8006f56:	7b3b      	ldrb	r3, [r7, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d006      	beq.n	8006f6a <ai_boostrap+0x2a>
    ai_log_err(err, "ai_ai4i_create_and_init");
 8006f5c:	4925      	ldr	r1, [pc, #148]	@ (8006ff4 <ai_boostrap+0xb4>)
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f7ff ffcc 	bl	8006efc <ai_log_err>
    return -1;
 8006f64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f68:	e03e      	b.n	8006fe8 <ai_boostrap+0xa8>
  }

  ai_input = ai_ai4i_inputs_get(ai4i, NULL);
 8006f6a:	4b21      	ldr	r3, [pc, #132]	@ (8006ff0 <ai_boostrap+0xb0>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2100      	movs	r1, #0
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7ff ff1b 	bl	8006dac <ai_ai4i_inputs_get>
 8006f76:	4603      	mov	r3, r0
 8006f78:	4a1f      	ldr	r2, [pc, #124]	@ (8006ff8 <ai_boostrap+0xb8>)
 8006f7a:	6013      	str	r3, [r2, #0]
  ai_output = ai_ai4i_outputs_get(ai4i, NULL);
 8006f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ff0 <ai_boostrap+0xb0>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2100      	movs	r1, #0
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7ff ff2c 	bl	8006de0 <ai_ai4i_outputs_get>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8006ffc <ai_boostrap+0xbc>)
 8006f8c:	6013      	str	r3, [r2, #0]

#if defined(AI_AI4I_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_AI4I_IN_NUM; idx++) {
 8006f8e:	2300      	movs	r3, #0
 8006f90:	617b      	str	r3, [r7, #20]
 8006f92:	e00f      	b.n	8006fb4 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8006f94:	4b18      	ldr	r3, [pc, #96]	@ (8006ff8 <ai_boostrap+0xb8>)
 8006f96:	6819      	ldr	r1, [r3, #0]
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	00db      	lsls	r3, r3, #3
 8006f9e:	1a9b      	subs	r3, r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	440b      	add	r3, r1
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	4916      	ldr	r1, [pc, #88]	@ (8007000 <ai_boostrap+0xc0>)
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_AI4I_IN_NUM; idx++) {
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	ddec      	ble.n	8006f94 <ai_boostrap+0x54>

#if defined(AI_AI4I_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_AI4I_OUT_NUM; idx++) {
 8006fba:	2300      	movs	r3, #0
 8006fbc:	613b      	str	r3, [r7, #16]
 8006fbe:	e00f      	b.n	8006fe0 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8006fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8006ffc <ai_boostrap+0xbc>)
 8006fc2:	6819      	ldr	r1, [r3, #0]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	00db      	lsls	r3, r3, #3
 8006fca:	1a9b      	subs	r3, r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	440b      	add	r3, r1
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	490c      	ldr	r1, [pc, #48]	@ (8007004 <ai_boostrap+0xc4>)
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_AI4I_OUT_NUM; idx++) {
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	613b      	str	r3, [r7, #16]
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	ddec      	ble.n	8006fc0 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_AI4I_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20001500 	.word	0x20001500
 8006ff4:	0800a014 	.word	0x0800a014
 8006ff8:	20001504 	.word	0x20001504
 8006ffc:	20001508 	.word	0x20001508
 8007000:	200011f4 	.word	0x200011f4
 8007004:	200011f8 	.word	0x200011f8

08007008 <ai_run>:

static int ai_run(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_ai4i_run(ai4i, ai_input, ai_output);
 800700e:	4b0f      	ldr	r3, [pc, #60]	@ (800704c <ai_run+0x44>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a0f      	ldr	r2, [pc, #60]	@ (8007050 <ai_run+0x48>)
 8007014:	6811      	ldr	r1, [r2, #0]
 8007016:	4a0f      	ldr	r2, [pc, #60]	@ (8007054 <ai_run+0x4c>)
 8007018:	6812      	ldr	r2, [r2, #0]
 800701a:	4618      	mov	r0, r3
 800701c:	f7ff ff36 	bl	8006e8c <ai_ai4i_run>
 8007020:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d00c      	beq.n	8007042 <ai_run+0x3a>
    ai_log_err(ai_ai4i_get_error(ai4i),
 8007028:	4b08      	ldr	r3, [pc, #32]	@ (800704c <ai_run+0x44>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff fe1d 	bl	8006c6c <ai_ai4i_get_error>
 8007032:	4603      	mov	r3, r0
 8007034:	4908      	ldr	r1, [pc, #32]	@ (8007058 <ai_run+0x50>)
 8007036:	4618      	mov	r0, r3
 8007038:	f7ff ff60 	bl	8006efc <ai_log_err>
        "ai_ai4i_run");
    return -1;
 800703c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007040:	e000      	b.n	8007044 <ai_run+0x3c>
  }

  return 0;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	20001500 	.word	0x20001500
 8007050:	20001504 	.word	0x20001504
 8007054:	20001508 	.word	0x20001508
 8007058:	0800a02c 	.word	0x0800a02c

0800705c <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8 *data[])

{
 800705c:	b580      	push	{r7, lr}
 800705e:	b08e      	sub	sp, #56	@ 0x38
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
    // 1. Variables for data acquisition
    unsigned char tmp[BYTES_IN_FLOATS] = {0};
 8007064:	2300      	movs	r3, #0
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	f107 0310 	add.w	r3, r7, #16
 800706c:	2200      	movs	r2, #0
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	605a      	str	r2, [r3, #4]
 8007072:	609a      	str	r2, [r3, #8]
 8007074:	60da      	str	r2, [r3, #12]
    int num_elements = sizeof(tmp) / sizeof(tmp[0]);
 8007076:	2314      	movs	r3, #20
 8007078:	62bb      	str	r3, [r7, #40]	@ 0x28
    int num_floats = num_elements / 4;
 800707a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707c:	2b00      	cmp	r3, #0
 800707e:	da00      	bge.n	8007082 <acquire_and_process_data+0x26>
 8007080:	3303      	adds	r3, #3
 8007082:	109b      	asrs	r3, r3, #2
 8007084:	627b      	str	r3, [r7, #36]	@ 0x24

    // 2. Receive data from UART
    HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, (uint8_t *)tmp, sizeof(tmp), TIMEOUT);
 8007086:	f107 010c 	add.w	r1, r7, #12
 800708a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800708e:	2214      	movs	r2, #20
 8007090:	482c      	ldr	r0, [pc, #176]	@ (8007144 <acquire_and_process_data+0xe8>)
 8007092:	f7fe f9f4 	bl	800547e <HAL_UART_Receive>
 8007096:	4603      	mov	r3, r0
 8007098:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    // Check the return status of HAL_UART_Receive
    if (status != HAL_OK){
 800709c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d007      	beq.n	80070b4 <acquire_and_process_data+0x58>

      printf("Failed to receive data from UART. Error code: %d\n", status);
 80070a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070a8:	4619      	mov	r1, r3
 80070aa:	4827      	ldr	r0, [pc, #156]	@ (8007148 <acquire_and_process_data+0xec>)
 80070ac:	f001 ffcc 	bl	8009048 <iprintf>
      return (1);
 80070b0:	2301      	movs	r3, #1
 80070b2:	e042      	b.n	800713a <acquire_and_process_data+0xde>
    }

    // 3. Reconstruct floats from bytes
    if (num_elements % 4 != 0){
 80070b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b6:	f003 0303 	and.w	r3, r3, #3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d004      	beq.n	80070c8 <acquire_and_process_data+0x6c>
      printf("The array length is not a multiple of 4 bytes. Cannot reconstruct floats.\n");
 80070be:	4823      	ldr	r0, [pc, #140]	@ (800714c <acquire_and_process_data+0xf0>)
 80070c0:	f002 f82a 	bl	8009118 <puts>
      return (1);
 80070c4:	2301      	movs	r3, #1
 80070c6:	e038      	b.n	800713a <acquire_and_process_data+0xde>
    }

    for (size_t i = 0; i < num_floats; i++){
 80070c8:	2300      	movs	r3, #0
 80070ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80070cc:	e030      	b.n	8007130 <acquire_and_process_data+0xd4>
      unsigned char bytes[4] = {0};
 80070ce:	2300      	movs	r3, #0
 80070d0:	60bb      	str	r3, [r7, #8]
      // Reconstruction of the bytes
      for (size_t j = 0; j < 4; j++){
 80070d2:	2300      	movs	r3, #0
 80070d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80070d6:	e010      	b.n	80070fa <acquire_and_process_data+0x9e>
        bytes[j] = tmp[i * 4 + j];
 80070d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070da:	009a      	lsls	r2, r3, #2
 80070dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070de:	4413      	add	r3, r2
 80070e0:	3338      	adds	r3, #56	@ 0x38
 80070e2:	443b      	add	r3, r7
 80070e4:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
 80070e8:	f107 0208 	add.w	r2, r7, #8
 80070ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ee:	4413      	add	r3, r2
 80070f0:	460a      	mov	r2, r1
 80070f2:	701a      	strb	r2, [r3, #0]
      for (size_t j = 0; j < 4; j++){
 80070f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f6:	3301      	adds	r3, #1
 80070f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d9eb      	bls.n	80070d8 <acquire_and_process_data+0x7c>
      }
      // Store the bytes in 'data'
      for (size_t k = 0; k < 4; k++){
 8007100:	2300      	movs	r3, #0
 8007102:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007104:	e00e      	b.n	8007124 <acquire_and_process_data+0xc8>
        ((uint8_t *)data)[(i * 4 + k)] = bytes[k];
 8007106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007108:	009a      	lsls	r2, r3, #2
 800710a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710c:	4413      	add	r3, r2
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	4413      	add	r3, r2
 8007112:	f107 0108 	add.w	r1, r7, #8
 8007116:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007118:	440a      	add	r2, r1
 800711a:	7812      	ldrb	r2, [r2, #0]
 800711c:	701a      	strb	r2, [r3, #0]
      for (size_t k = 0; k < 4; k++){
 800711e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007120:	3301      	adds	r3, #1
 8007122:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007126:	2b03      	cmp	r3, #3
 8007128:	d9ed      	bls.n	8007106 <acquire_and_process_data+0xaa>
    for (size_t i = 0; i < num_floats; i++){
 800712a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800712c:	3301      	adds	r3, #1
 800712e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007132:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007134:	429a      	cmp	r2, r3
 8007136:	d3ca      	bcc.n	80070ce <acquire_and_process_data+0x72>
      }
    }
    return (0);
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3738      	adds	r7, #56	@ 0x38
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20000ae8 	.word	0x20000ae8
 8007148:	0800a038 	.word	0x0800a038
 800714c:	0800a06c 	.word	0x0800a06c

08007150 <post_process>:

int post_process(ai_i8 *data[]){
 8007150:	b580      	push	{r7, lr}
 8007152:	b08e      	sub	sp, #56	@ 0x38
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
    // Get the output data
    if (data == NULL){
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d104      	bne.n	8007168 <post_process+0x18>
      printf("The output data is NULL.\n");
 800715e:	4838      	ldr	r0, [pc, #224]	@ (8007240 <post_process+0xf0>)
 8007160:	f001 ffda 	bl	8009118 <puts>
      return (1);
 8007164:	2301      	movs	r3, #1
 8007166:	e066      	b.n	8007236 <post_process+0xe6>
    }
    uint8_t *output = data;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // An array to store the float outputs
    float outs[CLASS_NUMBER] = {0.0};
 800716c:	f107 0314 	add.w	r3, r7, #20
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	605a      	str	r2, [r3, #4]
 8007176:	609a      	str	r2, [r3, #8]
 8007178:	60da      	str	r2, [r3, #12]
 800717a:	611a      	str	r2, [r3, #16]
    uint8_t outs_uint8[CLASS_NUMBER] = {0};
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	2300      	movs	r3, #0
 8007182:	743b      	strb	r3, [r7, #16]
    /* Convert the probability to float */
    for (size_t i = 0; i < CLASS_NUMBER; i++){
 8007184:	2300      	movs	r3, #0
 8007186:	637b      	str	r3, [r7, #52]	@ 0x34
 8007188:	e03a      	b.n	8007200 <post_process+0xb0>
      uint8_t temp[4] = {0};
 800718a:	2300      	movs	r3, #0
 800718c:	60bb      	str	r3, [r7, #8]
      // Extract 4 bytes to reconstruct a float
      for (size_t j = 0; j < 4; j++){
 800718e:	2300      	movs	r3, #0
 8007190:	633b      	str	r3, [r7, #48]	@ 0x30
 8007192:	e00f      	b.n	80071b4 <post_process+0x64>
        temp[j] = output[i * 4 + j];
 8007194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007196:	009a      	lsls	r2, r3, #2
 8007198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719a:	4413      	add	r3, r2
 800719c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800719e:	4413      	add	r3, r2
 80071a0:	7819      	ldrb	r1, [r3, #0]
 80071a2:	f107 0208 	add.w	r2, r7, #8
 80071a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a8:	4413      	add	r3, r2
 80071aa:	460a      	mov	r2, r1
 80071ac:	701a      	strb	r2, [r3, #0]
      for (size_t j = 0; j < 4; j++){
 80071ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b0:	3301      	adds	r3, #1
 80071b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80071b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d9ec      	bls.n	8007194 <post_process+0x44>
      }

      // Reconstruct the float from the bytes
      outs[i] = *(float *)&temp;
 80071ba:	f107 0308 	add.w	r3, r7, #8
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	3338      	adds	r3, #56	@ 0x38
 80071c6:	443b      	add	r3, r7
 80071c8:	3b24      	subs	r3, #36	@ 0x24
 80071ca:	601a      	str	r2, [r3, #0]
      // Convert the float to uint8_t for UART transmission
      outs_uint8[i] = (char)(outs[i] * 255);
 80071cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	3338      	adds	r3, #56	@ 0x38
 80071d2:	443b      	add	r3, r7
 80071d4:	3b24      	subs	r3, #36	@ 0x24
 80071d6:	edd3 7a00 	vldr	s15, [r3]
 80071da:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8007244 <post_process+0xf4>
 80071de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071e6:	edc7 7a00 	vstr	s15, [r7]
 80071ea:	783b      	ldrb	r3, [r7, #0]
 80071ec:	b2d9      	uxtb	r1, r3
 80071ee:	f107 020c 	add.w	r2, r7, #12
 80071f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071f4:	4413      	add	r3, r2
 80071f6:	460a      	mov	r2, r1
 80071f8:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < CLASS_NUMBER; i++){
 80071fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071fc:	3301      	adds	r3, #1
 80071fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007202:	2b04      	cmp	r3, #4
 8007204:	d9c1      	bls.n	800718a <post_process+0x3a>
    }

  // Transmit the output data
  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t *)outs_uint8, sizeof(outs_uint8), TIMEOUT);
 8007206:	f107 010c 	add.w	r1, r7, #12
 800720a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800720e:	2205      	movs	r2, #5
 8007210:	480d      	ldr	r0, [pc, #52]	@ (8007248 <post_process+0xf8>)
 8007212:	f7fe f8a6 	bl	8005362 <HAL_UART_Transmit>
 8007216:	4603      	mov	r3, r0
 8007218:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  // Check the return status of HAL_UART_Transmit
  if (status != HAL_OK){
 800721c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007220:	2b00      	cmp	r3, #0
 8007222:	d007      	beq.n	8007234 <post_process+0xe4>
  printf("Failed to transmit data to UART. Error code: %d\n", status);
 8007224:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007228:	4619      	mov	r1, r3
 800722a:	4808      	ldr	r0, [pc, #32]	@ (800724c <post_process+0xfc>)
 800722c:	f001 ff0c 	bl	8009048 <iprintf>
  return (1);
 8007230:	2301      	movs	r3, #1
 8007232:	e000      	b.n	8007236 <post_process+0xe6>
  }
  return 0;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3738      	adds	r7, #56	@ 0x38
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	0800a0b8 	.word	0x0800a0b8
 8007244:	437f0000 	.word	0x437f0000
 8007248:	20000ae8 	.word	0x20000ae8
 800724c:	0800a0d4 	.word	0x0800a0d4

08007250 <synchronize_UART>:

void synchronize_UART(void){
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
    bool is_synced = 0;
 8007256:	2300      	movs	r3, #0
 8007258:	71fb      	strb	r3, [r7, #7]
    unsigned char rx[2] = {0};
 800725a:	2300      	movs	r3, #0
 800725c:	80bb      	strh	r3, [r7, #4]
    unsigned char tx[2] = {ACKNOWLEDGE, 0};
 800725e:	23cd      	movs	r3, #205	@ 0xcd
 8007260:	803b      	strh	r3, [r7, #0]
    while (!is_synced){
 8007262:	e012      	b.n	800728a <synchronize_UART+0x3a>
      HAL_UART_Receive(&huart2, (uint8_t *)rx, sizeof(rx), TIMEOUT);
 8007264:	1d39      	adds	r1, r7, #4
 8007266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800726a:	2202      	movs	r2, #2
 800726c:	480c      	ldr	r0, [pc, #48]	@ (80072a0 <synchronize_UART+0x50>)
 800726e:	f7fe f906 	bl	800547e <HAL_UART_Receive>
      if (rx[0] == SYNCHRONISATION){
 8007272:	793b      	ldrb	r3, [r7, #4]
 8007274:	2bab      	cmp	r3, #171	@ 0xab
 8007276:	d108      	bne.n	800728a <synchronize_UART+0x3a>
        HAL_UART_Transmit(&huart2, (uint8_t *)tx, sizeof(tx), TIMEOUT);
 8007278:	4639      	mov	r1, r7
 800727a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800727e:	2202      	movs	r2, #2
 8007280:	4807      	ldr	r0, [pc, #28]	@ (80072a0 <synchronize_UART+0x50>)
 8007282:	f7fe f86e 	bl	8005362 <HAL_UART_Transmit>
        is_synced = 1;
 8007286:	2301      	movs	r3, #1
 8007288:	71fb      	strb	r3, [r7, #7]
    while (!is_synced){
 800728a:	79fb      	ldrb	r3, [r7, #7]
 800728c:	f083 0301 	eor.w	r3, r3, #1
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e6      	bne.n	8007264 <synchronize_UART+0x14>
      }
    }
    return;
 8007296:	bf00      	nop
}
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	20000ae8 	.word	0x20000ae8

080072a4 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 80072a8:	4803      	ldr	r0, [pc, #12]	@ (80072b8 <MX_X_CUBE_AI_Init+0x14>)
 80072aa:	f001 ff35 	bl	8009118 <puts>

  ai_boostrap(data_activations0);
 80072ae:	4803      	ldr	r0, [pc, #12]	@ (80072bc <MX_X_CUBE_AI_Init+0x18>)
 80072b0:	f7ff fe46 	bl	8006f40 <ai_boostrap>
    /* USER CODE END 5 */
}
 80072b4:	bf00      	nop
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	0800a108 	.word	0x0800a108
 80072bc:	2000091c 	.word	0x2000091c

080072c0 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 80072c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80072ca:	60fb      	str	r3, [r7, #12]
  uint8_t *in_data = ai_input[0].data;
 80072cc:	4b19      	ldr	r3, [pc, #100]	@ (8007334 <MX_X_CUBE_AI_Process+0x74>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	60bb      	str	r3, [r7, #8]
  uint8_t *out_data = ai_output[0].data;
 80072d4:	4b18      	ldr	r3, [pc, #96]	@ (8007338 <MX_X_CUBE_AI_Process+0x78>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	607b      	str	r3, [r7, #4]
  synchronize_UART();
 80072dc:	f7ff ffb8 	bl	8007250 <synchronize_UART>
  if (ai4i) {
 80072e0:	4b16      	ldr	r3, [pc, #88]	@ (800733c <MX_X_CUBE_AI_Process+0x7c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d013      	beq.n	8007310 <MX_X_CUBE_AI_Process+0x50>
    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(in_data);
 80072e8:	68b8      	ldr	r0, [r7, #8]
 80072ea:	f7ff feb7 	bl	800705c <acquire_and_process_data>
 80072ee:	60f8      	str	r0, [r7, #12]

      /* 2 - process the data - call inference engine */
      if (res == 0)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d102      	bne.n	80072fc <MX_X_CUBE_AI_Process+0x3c>
        res = ai_run();
 80072f6:	f7ff fe87 	bl	8007008 <ai_run>
 80072fa:	60f8      	str	r0, [r7, #12]
      /* 3- post-process the predictions */
      if (res == 0)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d103      	bne.n	800730a <MX_X_CUBE_AI_Process+0x4a>
        res = post_process(out_data);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff ff24 	bl	8007150 <post_process>
 8007308:	60f8      	str	r0, [r7, #12]
    } while (res==0);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0eb      	beq.n	80072e8 <MX_X_CUBE_AI_Process+0x28>

  }

  if (res) {
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <MX_X_CUBE_AI_Process+0x6c>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8007316:	2311      	movs	r3, #17
 8007318:	703b      	strb	r3, [r7, #0]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2210      	movs	r2, #16
 800731e:	f362 231f 	bfi	r3, r2, #8, #24
 8007322:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 8007324:	4906      	ldr	r1, [pc, #24]	@ (8007340 <MX_X_CUBE_AI_Process+0x80>)
 8007326:	6838      	ldr	r0, [r7, #0]
 8007328:	f7ff fde8 	bl	8006efc <ai_log_err>
  }
    /* USER CODE END 6 */
}
 800732c:	bf00      	nop
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	20001504 	.word	0x20001504
 8007338:	20001508 	.word	0x20001508
 800733c:	20001500 	.word	0x20001500
 8007340:	0800a128 	.word	0x0800a128

08007344 <ai_buffer_get_size>:
 8007344:	b378      	cbz	r0, 80073a6 <ai_buffer_get_size+0x62>
 8007346:	b410      	push	{r4}
 8007348:	6803      	ldr	r3, [r0, #0]
 800734a:	4a17      	ldr	r2, [pc, #92]	@ (80073a8 <ai_buffer_get_size+0x64>)
 800734c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8007350:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007354:	4293      	cmp	r3, r2
 8007356:	d01e      	beq.n	8007396 <ai_buffer_get_size+0x52>
 8007358:	6984      	ldr	r4, [r0, #24]
 800735a:	6862      	ldr	r2, [r4, #4]
 800735c:	7d03      	ldrb	r3, [r0, #20]
 800735e:	6941      	ldr	r1, [r0, #20]
 8007360:	f1a3 0301 	sub.w	r3, r3, #1
 8007364:	fab3 f383 	clz	r3, r3
 8007368:	095b      	lsrs	r3, r3, #5
 800736a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800736e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8007372:	da0b      	bge.n	800738c <ai_buffer_get_size+0x48>
 8007374:	2b01      	cmp	r3, #1
 8007376:	d102      	bne.n	800737e <ai_buffer_get_size+0x3a>
 8007378:	2802      	cmp	r0, #2
 800737a:	d007      	beq.n	800738c <ai_buffer_get_size+0x48>
 800737c:	2302      	movs	r3, #2
 800737e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8007382:	3301      	adds	r3, #1
 8007384:	4298      	cmp	r0, r3
 8007386:	fb01 f202 	mul.w	r2, r1, r2
 800738a:	d1f3      	bne.n	8007374 <ai_buffer_get_size+0x30>
 800738c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8007390:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	2900      	cmp	r1, #0
 8007398:	d0de      	beq.n	8007358 <ai_buffer_get_size+0x14>
 800739a:	6984      	ldr	r4, [r0, #24]
 800739c:	6862      	ldr	r2, [r4, #4]
 800739e:	321f      	adds	r2, #31
 80073a0:	f022 021f 	bic.w	r2, r2, #31
 80073a4:	e7da      	b.n	800735c <ai_buffer_get_size+0x18>
 80073a6:	4770      	bx	lr
 80073a8:	000400c0 	.word	0x000400c0

080073ac <ai_buffer_array_sane>:
 80073ac:	b138      	cbz	r0, 80073be <ai_buffer_array_sane+0x12>
 80073ae:	6843      	ldr	r3, [r0, #4]
 80073b0:	b123      	cbz	r3, 80073bc <ai_buffer_array_sane+0x10>
 80073b2:	8840      	ldrh	r0, [r0, #2]
 80073b4:	3800      	subs	r0, #0
 80073b6:	bf18      	it	ne
 80073b8:	2001      	movne	r0, #1
 80073ba:	4770      	bx	lr
 80073bc:	4618      	mov	r0, r3
 80073be:	4770      	bx	lr

080073c0 <ai_buffer_array_item_set_address>:
 80073c0:	b150      	cbz	r0, 80073d8 <ai_buffer_array_item_set_address+0x18>
 80073c2:	6843      	ldr	r3, [r0, #4]
 80073c4:	b14b      	cbz	r3, 80073da <ai_buffer_array_item_set_address+0x1a>
 80073c6:	8840      	ldrh	r0, [r0, #2]
 80073c8:	b900      	cbnz	r0, 80073cc <ai_buffer_array_item_set_address+0xc>
 80073ca:	4770      	bx	lr
 80073cc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80073d0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80073d4:	2001      	movs	r0, #1
 80073d6:	605a      	str	r2, [r3, #4]
 80073d8:	4770      	bx	lr
 80073da:	4618      	mov	r0, r3
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop

080073e0 <ai_platform_get_weights_map>:
 80073e0:	2a00      	cmp	r2, #0
 80073e2:	d037      	beq.n	8007454 <ai_platform_get_weights_map+0x74>
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	4604      	mov	r4, r0
 80073e8:	b1a0      	cbz	r0, 8007414 <ai_platform_get_weights_map+0x34>
 80073ea:	460f      	mov	r7, r1
 80073ec:	b191      	cbz	r1, 8007414 <ai_platform_get_weights_map+0x34>
 80073ee:	4b25      	ldr	r3, [pc, #148]	@ (8007484 <ai_platform_get_weights_map+0xa4>)
 80073f0:	6810      	ldr	r0, [r2, #0]
 80073f2:	4298      	cmp	r0, r3
 80073f4:	4615      	mov	r5, r2
 80073f6:	d00f      	beq.n	8007418 <ai_platform_get_weights_map+0x38>
 80073f8:	6855      	ldr	r5, [r2, #4]
 80073fa:	b15d      	cbz	r5, 8007414 <ai_platform_get_weights_map+0x34>
 80073fc:	682e      	ldr	r6, [r5, #0]
 80073fe:	429e      	cmp	r6, r3
 8007400:	d02a      	beq.n	8007458 <ai_platform_get_weights_map+0x78>
 8007402:	f1a1 0001 	sub.w	r0, r1, #1
 8007406:	6025      	str	r5, [r4, #0]
 8007408:	fab0 f080 	clz	r0, r0
 800740c:	0940      	lsrs	r0, r0, #5
 800740e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007410:	42a7      	cmp	r7, r4
 8007412:	d034      	beq.n	800747e <ai_platform_get_weights_map+0x9e>
 8007414:	2000      	movs	r0, #0
 8007416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007418:	1d10      	adds	r0, r2, #4
 800741a:	f7ff ffc7 	bl	80073ac <ai_buffer_array_sane>
 800741e:	2800      	cmp	r0, #0
 8007420:	d0f8      	beq.n	8007414 <ai_platform_get_weights_map+0x34>
 8007422:	88eb      	ldrh	r3, [r5, #6]
 8007424:	429f      	cmp	r7, r3
 8007426:	d1f5      	bne.n	8007414 <ai_platform_get_weights_map+0x34>
 8007428:	f04f 0c00 	mov.w	ip, #0
 800742c:	1f20      	subs	r0, r4, #4
 800742e:	46e6      	mov	lr, ip
 8007430:	68ab      	ldr	r3, [r5, #8]
 8007432:	4463      	add	r3, ip
 8007434:	f10c 0c1c 	add.w	ip, ip, #28
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	b12b      	cbz	r3, 8007448 <ai_platform_get_weights_map+0x68>
 800743c:	f10e 0e01 	add.w	lr, lr, #1
 8007440:	4577      	cmp	r7, lr
 8007442:	f840 3f04 	str.w	r3, [r0, #4]!
 8007446:	d1f3      	bne.n	8007430 <ai_platform_get_weights_map+0x50>
 8007448:	eba7 000e 	sub.w	r0, r7, lr
 800744c:	fab0 f080 	clz	r0, r0
 8007450:	0940      	lsrs	r0, r0, #5
 8007452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007454:	2000      	movs	r0, #0
 8007456:	4770      	bx	lr
 8007458:	1f20      	subs	r0, r4, #4
 800745a:	462a      	mov	r2, r5
 800745c:	2400      	movs	r4, #0
 800745e:	e000      	b.n	8007462 <ai_platform_get_weights_map+0x82>
 8007460:	461c      	mov	r4, r3
 8007462:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8007466:	42b3      	cmp	r3, r6
 8007468:	d0d2      	beq.n	8007410 <ai_platform_get_weights_map+0x30>
 800746a:	f840 3f04 	str.w	r3, [r0, #4]!
 800746e:	1c63      	adds	r3, r4, #1
 8007470:	429f      	cmp	r7, r3
 8007472:	d1f5      	bne.n	8007460 <ai_platform_get_weights_map+0x80>
 8007474:	3402      	adds	r4, #2
 8007476:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800747a:	42b3      	cmp	r3, r6
 800747c:	d1ca      	bne.n	8007414 <ai_platform_get_weights_map+0x34>
 800747e:	2001      	movs	r0, #1
 8007480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007482:	bf00      	nop
 8007484:	a1facade 	.word	0xa1facade

08007488 <ai_platform_get_activations_map>:
 8007488:	2a00      	cmp	r2, #0
 800748a:	d038      	beq.n	80074fe <ai_platform_get_activations_map+0x76>
 800748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748e:	4604      	mov	r4, r0
 8007490:	b1a0      	cbz	r0, 80074bc <ai_platform_get_activations_map+0x34>
 8007492:	460f      	mov	r7, r1
 8007494:	b191      	cbz	r1, 80074bc <ai_platform_get_activations_map+0x34>
 8007496:	4b25      	ldr	r3, [pc, #148]	@ (800752c <ai_platform_get_activations_map+0xa4>)
 8007498:	6810      	ldr	r0, [r2, #0]
 800749a:	4298      	cmp	r0, r3
 800749c:	4615      	mov	r5, r2
 800749e:	d00f      	beq.n	80074c0 <ai_platform_get_activations_map+0x38>
 80074a0:	6a15      	ldr	r5, [r2, #32]
 80074a2:	b15d      	cbz	r5, 80074bc <ai_platform_get_activations_map+0x34>
 80074a4:	682e      	ldr	r6, [r5, #0]
 80074a6:	429e      	cmp	r6, r3
 80074a8:	d02b      	beq.n	8007502 <ai_platform_get_activations_map+0x7a>
 80074aa:	f1a1 0001 	sub.w	r0, r1, #1
 80074ae:	6025      	str	r5, [r4, #0]
 80074b0:	fab0 f080 	clz	r0, r0
 80074b4:	0940      	lsrs	r0, r0, #5
 80074b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b8:	42a7      	cmp	r7, r4
 80074ba:	d035      	beq.n	8007528 <ai_platform_get_activations_map+0xa0>
 80074bc:	2000      	movs	r0, #0
 80074be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074c0:	f102 000c 	add.w	r0, r2, #12
 80074c4:	f7ff ff72 	bl	80073ac <ai_buffer_array_sane>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d0f7      	beq.n	80074bc <ai_platform_get_activations_map+0x34>
 80074cc:	89eb      	ldrh	r3, [r5, #14]
 80074ce:	429f      	cmp	r7, r3
 80074d0:	d1f4      	bne.n	80074bc <ai_platform_get_activations_map+0x34>
 80074d2:	f04f 0c00 	mov.w	ip, #0
 80074d6:	1f20      	subs	r0, r4, #4
 80074d8:	46e6      	mov	lr, ip
 80074da:	692b      	ldr	r3, [r5, #16]
 80074dc:	4463      	add	r3, ip
 80074de:	f10c 0c1c 	add.w	ip, ip, #28
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	b12b      	cbz	r3, 80074f2 <ai_platform_get_activations_map+0x6a>
 80074e6:	f10e 0e01 	add.w	lr, lr, #1
 80074ea:	4577      	cmp	r7, lr
 80074ec:	f840 3f04 	str.w	r3, [r0, #4]!
 80074f0:	d1f3      	bne.n	80074da <ai_platform_get_activations_map+0x52>
 80074f2:	eba7 000e 	sub.w	r0, r7, lr
 80074f6:	fab0 f080 	clz	r0, r0
 80074fa:	0940      	lsrs	r0, r0, #5
 80074fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074fe:	2000      	movs	r0, #0
 8007500:	4770      	bx	lr
 8007502:	1f20      	subs	r0, r4, #4
 8007504:	462a      	mov	r2, r5
 8007506:	2400      	movs	r4, #0
 8007508:	e000      	b.n	800750c <ai_platform_get_activations_map+0x84>
 800750a:	461c      	mov	r4, r3
 800750c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8007510:	42b3      	cmp	r3, r6
 8007512:	d0d1      	beq.n	80074b8 <ai_platform_get_activations_map+0x30>
 8007514:	f840 3f04 	str.w	r3, [r0, #4]!
 8007518:	1c63      	adds	r3, r4, #1
 800751a:	429f      	cmp	r7, r3
 800751c:	d1f5      	bne.n	800750a <ai_platform_get_activations_map+0x82>
 800751e:	3402      	adds	r4, #2
 8007520:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007524:	42b3      	cmp	r3, r6
 8007526:	d1c9      	bne.n	80074bc <ai_platform_get_activations_map+0x34>
 8007528:	2001      	movs	r0, #1
 800752a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800752c:	a1facade 	.word	0xa1facade

08007530 <ai_platform_bind_network_params>:
 8007530:	b1a0      	cbz	r0, 800755c <ai_platform_bind_network_params+0x2c>
 8007532:	b1b1      	cbz	r1, 8007562 <ai_platform_bind_network_params+0x32>
 8007534:	b1c2      	cbz	r2, 8007568 <ai_platform_bind_network_params+0x38>
 8007536:	b410      	push	{r4}
 8007538:	4603      	mov	r3, r0
 800753a:	4c0d      	ldr	r4, [pc, #52]	@ (8007570 <ai_platform_bind_network_params+0x40>)
 800753c:	f843 4b04 	str.w	r4, [r3], #4
 8007540:	f100 0c0c 	add.w	ip, r0, #12
 8007544:	c903      	ldmia	r1, {r0, r1}
 8007546:	e883 0003 	stmia.w	r3, {r0, r1}
 800754a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800754e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8007552:	2301      	movs	r3, #1
 8007554:	4618      	mov	r0, r3
 8007556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	4603      	mov	r3, r0
 800755e:	4618      	mov	r0, r3
 8007560:	4770      	bx	lr
 8007562:	460b      	mov	r3, r1
 8007564:	4618      	mov	r0, r3
 8007566:	4770      	bx	lr
 8007568:	4613      	mov	r3, r2
 800756a:	4618      	mov	r0, r3
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	a1facade 	.word	0xa1facade

08007574 <ai_platform_network_get_error>:
 8007574:	4b04      	ldr	r3, [pc, #16]	@ (8007588 <ai_platform_network_get_error+0x14>)
 8007576:	6802      	ldr	r2, [r0, #0]
 8007578:	4393      	bics	r3, r2
 800757a:	d102      	bne.n	8007582 <ai_platform_network_get_error+0xe>
 800757c:	300c      	adds	r0, #12
 800757e:	f000 bc77 	b.w	8007e70 <core_get_error>
 8007582:	f241 0010 	movw	r0, #4112	@ 0x1010
 8007586:	4770      	bx	lr
 8007588:	a1c00100 	.word	0xa1c00100

0800758c <ai_platform_network_set_error>:
 800758c:	b110      	cbz	r0, 8007594 <ai_platform_network_set_error+0x8>
 800758e:	300c      	adds	r0, #12
 8007590:	f000 bc74 	b.w	8007e7c <core_set_error>
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop

08007598 <ai_platform_inputs_get>:
 8007598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759c:	4b38      	ldr	r3, [pc, #224]	@ (8007680 <ai_platform_inputs_get+0xe8>)
 800759e:	6802      	ldr	r2, [r0, #0]
 80075a0:	b085      	sub	sp, #20
 80075a2:	4393      	bics	r3, r2
 80075a4:	9003      	str	r0, [sp, #12]
 80075a6:	9102      	str	r1, [sp, #8]
 80075a8:	d160      	bne.n	800766c <ai_platform_inputs_get+0xd4>
 80075aa:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d04f      	beq.n	8007650 <ai_platform_inputs_get+0xb8>
 80075b0:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 80075b4:	f1ba 0f00 	cmp.w	sl, #0
 80075b8:	d04a      	beq.n	8007650 <ai_platform_inputs_get+0xb8>
 80075ba:	f04f 0b00 	mov.w	fp, #0
 80075be:	465d      	mov	r5, fp
 80075c0:	e016      	b.n	80075f0 <ai_platform_inputs_get+0x58>
 80075c2:	9901      	ldr	r1, [sp, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	507a      	str	r2, [r7, r1]
 80075c8:	69b1      	ldr	r1, [r6, #24]
 80075ca:	684e      	ldr	r6, [r1, #4]
 80075cc:	60a3      	str	r3, [r4, #8]
 80075ce:	f04f 0201 	mov.w	r2, #1
 80075d2:	7522      	strb	r2, [r4, #20]
 80075d4:	6961      	ldr	r1, [r4, #20]
 80075d6:	6020      	str	r0, [r4, #0]
 80075d8:	f369 211f 	bfi	r1, r9, #8, #24
 80075dc:	2300      	movs	r3, #0
 80075de:	e9c4 3603 	strd	r3, r6, [r4, #12]
 80075e2:	e9c4 1805 	strd	r1, r8, [r4, #20]
 80075e6:	f8c4 c004 	str.w	ip, [r4, #4]
 80075ea:	3501      	adds	r5, #1
 80075ec:	f10b 0b1c 	add.w	fp, fp, #28
 80075f0:	f8ba 3000 	ldrh.w	r3, [sl]
 80075f4:	42ab      	cmp	r3, r5
 80075f6:	b2aa      	uxth	r2, r5
 80075f8:	d93c      	bls.n	8007674 <ai_platform_inputs_get+0xdc>
 80075fa:	f8da 3004 	ldr.w	r3, [sl, #4]
 80075fe:	00e9      	lsls	r1, r5, #3
 8007600:	9101      	str	r1, [sp, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d036      	beq.n	8007674 <ai_platform_inputs_get+0xdc>
 8007606:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800760a:	2e00      	cmp	r6, #0
 800760c:	d032      	beq.n	8007674 <ai_platform_inputs_get+0xdc>
 800760e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007612:	69b2      	ldr	r2, [r6, #24]
 8007614:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8007618:	6810      	ldr	r0, [r2, #0]
 800761a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800761e:	68b3      	ldr	r3, [r6, #8]
 8007620:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8007624:	f001 fb00 	bl	8008c28 <ai_array_to_buffer_fmt>
 8007628:	69b1      	ldr	r1, [r6, #24]
 800762a:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800762e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8007632:	445c      	add	r4, fp
 8007634:	2b00      	cmp	r3, #0
 8007636:	d0c8      	beq.n	80075ca <ai_platform_inputs_get+0x32>
 8007638:	2100      	movs	r1, #0
 800763a:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800763e:	6831      	ldr	r1, [r6, #0]
 8007640:	6059      	str	r1, [r3, #4]
 8007642:	b111      	cbz	r1, 800764a <ai_platform_inputs_get+0xb2>
 8007644:	8849      	ldrh	r1, [r1, #2]
 8007646:	2900      	cmp	r1, #0
 8007648:	d1bb      	bne.n	80075c2 <ai_platform_inputs_get+0x2a>
 800764a:	69b1      	ldr	r1, [r6, #24]
 800764c:	2300      	movs	r3, #0
 800764e:	e7bc      	b.n	80075ca <ai_platform_inputs_get+0x32>
 8007650:	9803      	ldr	r0, [sp, #12]
 8007652:	2218      	movs	r2, #24
 8007654:	2111      	movs	r1, #17
 8007656:	300c      	adds	r0, #12
 8007658:	f000 fc10 	bl	8007e7c <core_set_error>
 800765c:	2200      	movs	r2, #0
 800765e:	4610      	mov	r0, r2
 8007660:	9b02      	ldr	r3, [sp, #8]
 8007662:	b103      	cbz	r3, 8007666 <ai_platform_inputs_get+0xce>
 8007664:	801a      	strh	r2, [r3, #0]
 8007666:	b005      	add	sp, #20
 8007668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766c:	2000      	movs	r0, #0
 800766e:	b005      	add	sp, #20
 8007670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007674:	2a00      	cmp	r2, #0
 8007676:	d0eb      	beq.n	8007650 <ai_platform_inputs_get+0xb8>
 8007678:	f8da 3008 	ldr.w	r3, [sl, #8]
 800767c:	6858      	ldr	r0, [r3, #4]
 800767e:	e7ef      	b.n	8007660 <ai_platform_inputs_get+0xc8>
 8007680:	a1c00100 	.word	0xa1c00100

08007684 <ai_platform_outputs_get>:
 8007684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007688:	4b37      	ldr	r3, [pc, #220]	@ (8007768 <ai_platform_outputs_get+0xe4>)
 800768a:	6802      	ldr	r2, [r0, #0]
 800768c:	b085      	sub	sp, #20
 800768e:	4393      	bics	r3, r2
 8007690:	9003      	str	r0, [sp, #12]
 8007692:	9102      	str	r1, [sp, #8]
 8007694:	d15d      	bne.n	8007752 <ai_platform_outputs_get+0xce>
 8007696:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8007698:	2b01      	cmp	r3, #1
 800769a:	d94c      	bls.n	8007736 <ai_platform_outputs_get+0xb2>
 800769c:	f04f 0b00 	mov.w	fp, #0
 80076a0:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 80076a4:	465d      	mov	r5, fp
 80076a6:	46d8      	mov	r8, fp
 80076a8:	e016      	b.n	80076d8 <ai_platform_outputs_get+0x54>
 80076aa:	9a01      	ldr	r2, [sp, #4]
 80076ac:	2101      	movs	r1, #1
 80076ae:	50b9      	str	r1, [r7, r2]
 80076b0:	69b2      	ldr	r2, [r6, #24]
 80076b2:	6856      	ldr	r6, [r2, #4]
 80076b4:	6020      	str	r0, [r4, #0]
 80076b6:	f04f 0201 	mov.w	r2, #1
 80076ba:	7522      	strb	r2, [r4, #20]
 80076bc:	6960      	ldr	r0, [r4, #20]
 80076be:	f8c4 c004 	str.w	ip, [r4, #4]
 80076c2:	f369 201f 	bfi	r0, r9, #8, #24
 80076c6:	e9c4 6004 	strd	r6, r0, [r4, #16]
 80076ca:	e9c4 3802 	strd	r3, r8, [r4, #8]
 80076ce:	9b00      	ldr	r3, [sp, #0]
 80076d0:	61a3      	str	r3, [r4, #24]
 80076d2:	3501      	adds	r5, #1
 80076d4:	f10b 0b1c 	add.w	fp, fp, #28
 80076d8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80076dc:	42ab      	cmp	r3, r5
 80076de:	b2aa      	uxth	r2, r5
 80076e0:	d93b      	bls.n	800775a <ai_platform_outputs_get+0xd6>
 80076e2:	f8da 3010 	ldr.w	r3, [sl, #16]
 80076e6:	00e9      	lsls	r1, r5, #3
 80076e8:	9101      	str	r1, [sp, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d035      	beq.n	800775a <ai_platform_outputs_get+0xd6>
 80076ee:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80076f2:	2e00      	cmp	r6, #0
 80076f4:	d031      	beq.n	800775a <ai_platform_outputs_get+0xd6>
 80076f6:	f8da 3014 	ldr.w	r3, [sl, #20]
 80076fa:	69b2      	ldr	r2, [r6, #24]
 80076fc:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8007700:	68b3      	ldr	r3, [r6, #8]
 8007702:	6810      	ldr	r0, [r2, #0]
 8007704:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8007708:	68f3      	ldr	r3, [r6, #12]
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	f001 fa8c 	bl	8008c28 <ai_array_to_buffer_fmt>
 8007710:	69b2      	ldr	r2, [r6, #24]
 8007712:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8007716:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800771a:	445c      	add	r4, fp
 800771c:	2b00      	cmp	r3, #0
 800771e:	d0c8      	beq.n	80076b2 <ai_platform_outputs_get+0x2e>
 8007720:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 8007724:	6832      	ldr	r2, [r6, #0]
 8007726:	605a      	str	r2, [r3, #4]
 8007728:	b112      	cbz	r2, 8007730 <ai_platform_outputs_get+0xac>
 800772a:	8852      	ldrh	r2, [r2, #2]
 800772c:	2a00      	cmp	r2, #0
 800772e:	d1bc      	bne.n	80076aa <ai_platform_outputs_get+0x26>
 8007730:	69b2      	ldr	r2, [r6, #24]
 8007732:	2300      	movs	r3, #0
 8007734:	e7bd      	b.n	80076b2 <ai_platform_outputs_get+0x2e>
 8007736:	9803      	ldr	r0, [sp, #12]
 8007738:	2218      	movs	r2, #24
 800773a:	2111      	movs	r1, #17
 800773c:	300c      	adds	r0, #12
 800773e:	f000 fb9d 	bl	8007e7c <core_set_error>
 8007742:	2200      	movs	r2, #0
 8007744:	4610      	mov	r0, r2
 8007746:	9b02      	ldr	r3, [sp, #8]
 8007748:	b103      	cbz	r3, 800774c <ai_platform_outputs_get+0xc8>
 800774a:	801a      	strh	r2, [r3, #0]
 800774c:	b005      	add	sp, #20
 800774e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007752:	2000      	movs	r0, #0
 8007754:	b005      	add	sp, #20
 8007756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775a:	2a00      	cmp	r2, #0
 800775c:	d0eb      	beq.n	8007736 <ai_platform_outputs_get+0xb2>
 800775e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8007762:	6858      	ldr	r0, [r3, #4]
 8007764:	e7ef      	b.n	8007746 <ai_platform_outputs_get+0xc2>
 8007766:	bf00      	nop
 8007768:	a1c00100 	.word	0xa1c00100

0800776c <ai_platform_network_create>:
 800776c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007770:	b083      	sub	sp, #12
 8007772:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 8007776:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800777a:	b320      	cbz	r0, 80077c6 <ai_platform_network_create+0x5a>
 800777c:	6002      	str	r2, [r0, #0]
 800777e:	4616      	mov	r6, r2
 8007780:	461f      	mov	r7, r3
 8007782:	4604      	mov	r4, r0
 8007784:	f000 fb72 	bl	8007e6c <core_init>
 8007788:	b970      	cbnz	r0, 80077a8 <ai_platform_network_create+0x3c>
 800778a:	2530      	movs	r5, #48	@ 0x30
 800778c:	2300      	movs	r3, #0
 800778e:	6023      	str	r3, [r4, #0]
 8007790:	2410      	movs	r4, #16
 8007792:	4642      	mov	r2, r8
 8007794:	4649      	mov	r1, r9
 8007796:	4638      	mov	r0, r7
 8007798:	f001 fac8 	bl	8008d2c <ai_version_get>
 800779c:	60b0      	str	r0, [r6, #8]
 800779e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80077a2:	b003      	add	sp, #12
 80077a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077a8:	2200      	movs	r2, #0
 80077aa:	4649      	mov	r1, r9
 80077ac:	4638      	mov	r0, r7
 80077ae:	f001 fabd 	bl	8008d2c <ai_version_get>
 80077b2:	2200      	movs	r2, #0
 80077b4:	4605      	mov	r5, r0
 80077b6:	2105      	movs	r1, #5
 80077b8:	2001      	movs	r0, #1
 80077ba:	f001 fab7 	bl	8008d2c <ai_version_get>
 80077be:	4285      	cmp	r5, r0
 80077c0:	d008      	beq.n	80077d4 <ai_platform_network_create+0x68>
 80077c2:	2501      	movs	r5, #1
 80077c4:	e7e2      	b.n	800778c <ai_platform_network_create+0x20>
 80077c6:	2510      	movs	r5, #16
 80077c8:	462c      	mov	r4, r5
 80077ca:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80077ce:	b003      	add	sp, #12
 80077d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077d4:	4b05      	ldr	r3, [pc, #20]	@ (80077ec <ai_platform_network_create+0x80>)
 80077d6:	9301      	str	r3, [sp, #4]
 80077d8:	a801      	add	r0, sp, #4
 80077da:	f000 fb5b 	bl	8007e94 <ai_check_custom_types>
 80077de:	b110      	cbz	r0, 80077e6 <ai_platform_network_create+0x7a>
 80077e0:	2400      	movs	r4, #0
 80077e2:	4625      	mov	r5, r4
 80077e4:	e7d5      	b.n	8007792 <ai_platform_network_create+0x26>
 80077e6:	2502      	movs	r5, #2
 80077e8:	e7d0      	b.n	800778c <ai_platform_network_create+0x20>
 80077ea:	bf00      	nop
 80077ec:	84048403 	.word	0x84048403

080077f0 <ai_platform_network_init>:
 80077f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f4:	4b63      	ldr	r3, [pc, #396]	@ (8007984 <ai_platform_network_init+0x194>)
 80077f6:	6802      	ldr	r2, [r0, #0]
 80077f8:	4393      	bics	r3, r2
 80077fa:	b083      	sub	sp, #12
 80077fc:	d156      	bne.n	80078ac <ai_platform_network_init+0xbc>
 80077fe:	4604      	mov	r4, r0
 8007800:	460f      	mov	r7, r1
 8007802:	2900      	cmp	r1, #0
 8007804:	f000 80a9 	beq.w	800795a <ai_platform_network_init+0x16a>
 8007808:	680b      	ldr	r3, [r1, #0]
 800780a:	495f      	ldr	r1, [pc, #380]	@ (8007988 <ai_platform_network_init+0x198>)
 800780c:	428b      	cmp	r3, r1
 800780e:	d113      	bne.n	8007838 <ai_platform_network_init+0x48>
 8007810:	495c      	ldr	r1, [pc, #368]	@ (8007984 <ai_platform_network_init+0x194>)
 8007812:	89bd      	ldrh	r5, [r7, #12]
 8007814:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 8007818:	f8d7 8010 	ldr.w	r8, [r7, #16]
 800781c:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 8007820:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 8007824:	68be      	ldr	r6, [r7, #8]
 8007826:	428a      	cmp	r2, r1
 8007828:	d02c      	beq.n	8007884 <ai_platform_network_init+0x94>
 800782a:	2303      	movs	r3, #3
 800782c:	6123      	str	r3, [r4, #16]
 800782e:	4627      	mov	r7, r4
 8007830:	4638      	mov	r0, r7
 8007832:	b003      	add	sp, #12
 8007834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007838:	2101      	movs	r1, #1
 800783a:	4638      	mov	r0, r7
 800783c:	9301      	str	r3, [sp, #4]
 800783e:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8007842:	f7ff fd7f 	bl	8007344 <ai_buffer_get_size>
 8007846:	f107 081c 	add.w	r8, r7, #28
 800784a:	4605      	mov	r5, r0
 800784c:	2101      	movs	r1, #1
 800784e:	4640      	mov	r0, r8
 8007850:	463e      	mov	r6, r7
 8007852:	6a3f      	ldr	r7, [r7, #32]
 8007854:	f7ff fd76 	bl	8007344 <ai_buffer_get_size>
 8007858:	2d00      	cmp	r5, #0
 800785a:	9b01      	ldr	r3, [sp, #4]
 800785c:	bf0a      	itet	eq
 800785e:	46a9      	moveq	r9, r5
 8007860:	f04f 0901 	movne.w	r9, #1
 8007864:	462e      	moveq	r6, r5
 8007866:	b330      	cbz	r0, 80078b6 <ai_platform_network_init+0xc6>
 8007868:	2f00      	cmp	r7, #0
 800786a:	f000 8084 	beq.w	8007976 <ai_platform_network_init+0x186>
 800786e:	f04f 0a01 	mov.w	sl, #1
 8007872:	f1bb 0f00 	cmp.w	fp, #0
 8007876:	d021      	beq.n	80078bc <ai_platform_network_init+0xcc>
 8007878:	2500      	movs	r5, #0
 800787a:	6822      	ldr	r2, [r4, #0]
 800787c:	4941      	ldr	r1, [pc, #260]	@ (8007984 <ai_platform_network_init+0x194>)
 800787e:	428a      	cmp	r2, r1
 8007880:	46ab      	mov	fp, r5
 8007882:	d1d2      	bne.n	800782a <ai_platform_network_init+0x3a>
 8007884:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 8007886:	454a      	cmp	r2, r9
 8007888:	4a3f      	ldr	r2, [pc, #252]	@ (8007988 <ai_platform_network_init+0x198>)
 800788a:	d221      	bcs.n	80078d0 <ai_platform_network_init+0xe0>
 800788c:	4293      	cmp	r3, r2
 800788e:	d15c      	bne.n	800794a <ai_platform_network_init+0x15a>
 8007890:	6266      	str	r6, [r4, #36]	@ 0x24
 8007892:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8007896:	f8a4 b020 	strh.w	fp, [r4, #32]
 800789a:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 800789e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 80078a2:	8525      	strh	r5, [r4, #40]	@ 0x28
 80078a4:	4620      	mov	r0, r4
 80078a6:	f000 fb1f 	bl	8007ee8 <ai_layers_init_all>
 80078aa:	e7be      	b.n	800782a <ai_platform_network_init+0x3a>
 80078ac:	2700      	movs	r7, #0
 80078ae:	4638      	mov	r0, r7
 80078b0:	b003      	add	sp, #12
 80078b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b6:	4680      	mov	r8, r0
 80078b8:	4682      	mov	sl, r0
 80078ba:	e7da      	b.n	8007872 <ai_platform_network_init+0x82>
 80078bc:	2d00      	cmp	r5, #0
 80078be:	d0dc      	beq.n	800787a <ai_platform_network_init+0x8a>
 80078c0:	2212      	movs	r2, #18
 80078c2:	2110      	movs	r1, #16
 80078c4:	f104 000c 	add.w	r0, r4, #12
 80078c8:	f000 fad8 	bl	8007e7c <core_set_error>
 80078cc:	465f      	mov	r7, fp
 80078ce:	e7af      	b.n	8007830 <ai_platform_network_init+0x40>
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d0dd      	beq.n	8007890 <ai_platform_network_init+0xa0>
 80078d4:	f1b9 0f00 	cmp.w	r9, #0
 80078d8:	d018      	beq.n	800790c <ai_platform_network_init+0x11c>
 80078da:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80078e4:	2700      	movs	r7, #0
 80078e6:	4699      	mov	r9, r3
 80078e8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80078ea:	eb06 0e07 	add.w	lr, r6, r7
 80078ee:	eb03 0c07 	add.w	ip, r3, r7
 80078f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80078f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80078fa:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80078fe:	371c      	adds	r7, #28
 8007900:	45b9      	cmp	r9, r7
 8007902:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8007906:	d1ef      	bne.n	80078e8 <ai_platform_network_init+0xf8>
 8007908:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800790c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800790e:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8007912:	4553      	cmp	r3, sl
 8007914:	f8a4 b020 	strh.w	fp, [r4, #32]
 8007918:	d325      	bcc.n	8007966 <ai_platform_network_init+0x176>
 800791a:	f1ba 0f00 	cmp.w	sl, #0
 800791e:	d0be      	beq.n	800789e <ai_platform_network_init+0xae>
 8007920:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 8007924:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8007928:	f04f 0c00 	mov.w	ip, #0
 800792c:	eb08 070c 	add.w	r7, r8, ip
 8007930:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007932:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007934:	4466      	add	r6, ip
 8007936:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007938:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800793c:	f10c 0c1c 	add.w	ip, ip, #28
 8007940:	45f4      	cmp	ip, lr
 8007942:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8007946:	d1f1      	bne.n	800792c <ai_platform_network_init+0x13c>
 8007948:	e7a9      	b.n	800789e <ai_platform_network_init+0xae>
 800794a:	2212      	movs	r2, #18
 800794c:	2116      	movs	r1, #22
 800794e:	f104 000c 	add.w	r0, r4, #12
 8007952:	f000 fa93 	bl	8007e7c <core_set_error>
 8007956:	2700      	movs	r7, #0
 8007958:	e76a      	b.n	8007830 <ai_platform_network_init+0x40>
 800795a:	2211      	movs	r2, #17
 800795c:	2110      	movs	r1, #16
 800795e:	300c      	adds	r0, #12
 8007960:	f000 fa8c 	bl	8007e7c <core_set_error>
 8007964:	e764      	b.n	8007830 <ai_platform_network_init+0x40>
 8007966:	2213      	movs	r2, #19
 8007968:	2116      	movs	r1, #22
 800796a:	f104 000c 	add.w	r0, r4, #12
 800796e:	f000 fa85 	bl	8007e7c <core_set_error>
 8007972:	2700      	movs	r7, #0
 8007974:	e75c      	b.n	8007830 <ai_platform_network_init+0x40>
 8007976:	2213      	movs	r2, #19
 8007978:	2110      	movs	r1, #16
 800797a:	f104 000c 	add.w	r0, r4, #12
 800797e:	f000 fa7d 	bl	8007e7c <core_set_error>
 8007982:	e755      	b.n	8007830 <ai_platform_network_init+0x40>
 8007984:	a1c00100 	.word	0xa1c00100
 8007988:	a1facade 	.word	0xa1facade

0800798c <ai_platform_network_post_init>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4b16      	ldr	r3, [pc, #88]	@ (80079e8 <ai_platform_network_post_init+0x5c>)
 8007990:	6802      	ldr	r2, [r0, #0]
 8007992:	ea02 0103 	and.w	r1, r2, r3
 8007996:	4393      	bics	r3, r2
 8007998:	d108      	bne.n	80079ac <ai_platform_network_post_init+0x20>
 800799a:	6903      	ldr	r3, [r0, #16]
 800799c:	f013 0502 	ands.w	r5, r3, #2
 80079a0:	4604      	mov	r4, r0
 80079a2:	d005      	beq.n	80079b0 <ai_platform_network_post_init+0x24>
 80079a4:	428a      	cmp	r2, r1
 80079a6:	d00a      	beq.n	80079be <ai_platform_network_post_init+0x32>
 80079a8:	2001      	movs	r0, #1
 80079aa:	bd38      	pop	{r3, r4, r5, pc}
 80079ac:	2000      	movs	r0, #0
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	2210      	movs	r2, #16
 80079b2:	2111      	movs	r1, #17
 80079b4:	300c      	adds	r0, #12
 80079b6:	f000 fa61 	bl	8007e7c <core_set_error>
 80079ba:	4628      	mov	r0, r5
 80079bc:	bd38      	pop	{r3, r4, r5, pc}
 80079be:	f000 faa1 	bl	8007f04 <ai_layers_post_init_all>
 80079c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d0ef      	beq.n	80079a8 <ai_platform_network_post_init+0x1c>
 80079c8:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80079ca:	e008      	b.n	80079de <ai_platform_network_post_init+0x52>
 80079cc:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 80079d0:	4798      	blx	r3
 80079d2:	692b      	ldr	r3, [r5, #16]
 80079d4:	42ab      	cmp	r3, r5
 80079d6:	d0e7      	beq.n	80079a8 <ai_platform_network_post_init+0x1c>
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d0e5      	beq.n	80079a8 <ai_platform_network_post_init+0x1c>
 80079dc:	461d      	mov	r5, r3
 80079de:	4629      	mov	r1, r5
 80079e0:	2000      	movs	r0, #0
 80079e2:	2d00      	cmp	r5, #0
 80079e4:	d1f2      	bne.n	80079cc <ai_platform_network_post_init+0x40>
 80079e6:	e7df      	b.n	80079a8 <ai_platform_network_post_init+0x1c>
 80079e8:	a1c00100 	.word	0xa1c00100

080079ec <ai_platform_network_process>:
 80079ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f0:	4bb5      	ldr	r3, [pc, #724]	@ (8007cc8 <ai_platform_network_process+0x2dc>)
 80079f2:	4605      	mov	r5, r0
 80079f4:	6800      	ldr	r0, [r0, #0]
 80079f6:	b085      	sub	sp, #20
 80079f8:	4383      	bics	r3, r0
 80079fa:	9202      	str	r2, [sp, #8]
 80079fc:	f040 8140 	bne.w	8007c80 <ai_platform_network_process+0x294>
 8007a00:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 8125 	beq.w	8007c52 <ai_platform_network_process+0x266>
 8007a08:	692b      	ldr	r3, [r5, #16]
 8007a0a:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 8007a0e:	f003 0303 	and.w	r3, r3, #3
 8007a12:	2700      	movs	r7, #0
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	61af      	str	r7, [r5, #24]
 8007a18:	f040 8137 	bne.w	8007c8a <ai_platform_network_process+0x29e>
 8007a1c:	2900      	cmp	r1, #0
 8007a1e:	f000 811e 	beq.w	8007c5e <ai_platform_network_process+0x272>
 8007a22:	f1ba 0f00 	cmp.w	sl, #0
 8007a26:	f000 811a 	beq.w	8007c5e <ai_platform_network_process+0x272>
 8007a2a:	f8ba 3000 	ldrh.w	r3, [sl]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 8115 	beq.w	8007c5e <ai_platform_network_process+0x272>
 8007a34:	698b      	ldr	r3, [r1, #24]
 8007a36:	9503      	str	r5, [sp, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	9301      	str	r3, [sp, #4]
 8007a3c:	460e      	mov	r6, r1
 8007a3e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d072      	beq.n	8007b2c <ai_platform_network_process+0x140>
 8007a46:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007a4a:	2c00      	cmp	r4, #0
 8007a4c:	d06e      	beq.n	8007b2c <ai_platform_network_process+0x140>
 8007a4e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007a52:	f8d3 9000 	ldr.w	r9, [r3]
 8007a56:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8007a5a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007a5e:	f000 81d3 	beq.w	8007e08 <ai_platform_network_process+0x41c>
 8007a62:	69a3      	ldr	r3, [r4, #24]
 8007a64:	2101      	movs	r1, #1
 8007a66:	4630      	mov	r0, r6
 8007a68:	685d      	ldr	r5, [r3, #4]
 8007a6a:	f7ff fc6b 	bl	8007344 <ai_buffer_get_size>
 8007a6e:	4285      	cmp	r5, r0
 8007a70:	f0c0 8116 	bcc.w	8007ca0 <ai_platform_network_process+0x2b4>
 8007a74:	68e0      	ldr	r0, [r4, #12]
 8007a76:	69b1      	ldr	r1, [r6, #24]
 8007a78:	68c2      	ldr	r2, [r0, #12]
 8007a7a:	68cb      	ldr	r3, [r1, #12]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	f040 810f 	bne.w	8007ca0 <ai_platform_network_process+0x2b4>
 8007a82:	6882      	ldr	r2, [r0, #8]
 8007a84:	688b      	ldr	r3, [r1, #8]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	f040 810a 	bne.w	8007ca0 <ai_platform_network_process+0x2b4>
 8007a8c:	6842      	ldr	r2, [r0, #4]
 8007a8e:	684b      	ldr	r3, [r1, #4]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	f040 8105 	bne.w	8007ca0 <ai_platform_network_process+0x2b4>
 8007a96:	69a3      	ldr	r3, [r4, #24]
 8007a98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a9c:	f001 f934 	bl	8008d08 <ai_array_get_data_byte_size>
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f001 f948 	bl	8008d38 <get_tensor_byte_size>
 8007aa8:	4285      	cmp	r5, r0
 8007aaa:	f0c0 80f9 	bcc.w	8007ca0 <ai_platform_network_process+0x2b4>
 8007aae:	69a3      	ldr	r3, [r4, #24]
 8007ab0:	6818      	ldr	r0, [r3, #0]
 8007ab2:	f001 f8b9 	bl	8008c28 <ai_array_to_buffer_fmt>
 8007ab6:	6833      	ldr	r3, [r6, #0]
 8007ab8:	4058      	eors	r0, r3
 8007aba:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8007abe:	f040 81a5 	bne.w	8007e0c <ai_platform_network_process+0x420>
 8007ac2:	6873      	ldr	r3, [r6, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 819f 	beq.w	8007e08 <ai_platform_network_process+0x41c>
 8007aca:	69b3      	ldr	r3, [r6, #24]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 81a5 	beq.w	8007e1e <ai_platform_network_process+0x432>
 8007ad4:	9a01      	ldr	r2, [sp, #4]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	bf38      	it	cc
 8007ada:	461a      	movcc	r2, r3
 8007adc:	4620      	mov	r0, r4
 8007ade:	9201      	str	r2, [sp, #4]
 8007ae0:	f001 f92a 	bl	8008d38 <get_tensor_byte_size>
 8007ae4:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ae8:	69b3      	ldr	r3, [r6, #24]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	fb00 f303 	mul.w	r3, r0, r3
 8007af0:	f8c8 300c 	str.w	r3, [r8, #12]
 8007af4:	6871      	ldr	r1, [r6, #4]
 8007af6:	f8c8 1004 	str.w	r1, [r8, #4]
 8007afa:	440b      	add	r3, r1
 8007afc:	f849 300b 	str.w	r3, [r9, fp]
 8007b00:	69a0      	ldr	r0, [r4, #24]
 8007b02:	6803      	ldr	r3, [r0, #0]
 8007b04:	009a      	lsls	r2, r3, #2
 8007b06:	f107 0701 	add.w	r7, r7, #1
 8007b0a:	f106 061c 	add.w	r6, r6, #28
 8007b0e:	f100 80b1 	bmi.w	8007c74 <ai_platform_network_process+0x288>
 8007b12:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007b16:	1a9b      	subs	r3, r3, r2
 8007b18:	4419      	add	r1, r3
 8007b1a:	6081      	str	r1, [r0, #8]
 8007b1c:	69a3      	ldr	r3, [r4, #24]
 8007b1e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007b22:	60da      	str	r2, [r3, #12]
 8007b24:	f8ba 3000 	ldrh.w	r3, [sl]
 8007b28:	42bb      	cmp	r3, r7
 8007b2a:	d888      	bhi.n	8007a3e <ai_platform_network_process+0x52>
 8007b2c:	9d03      	ldr	r5, [sp, #12]
 8007b2e:	9b02      	ldr	r3, [sp, #8]
 8007b30:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 817c 	beq.w	8007e30 <ai_platform_network_process+0x444>
 8007b38:	2a01      	cmp	r2, #1
 8007b3a:	f240 80bd 	bls.w	8007cb8 <ai_platform_network_process+0x2cc>
 8007b3e:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 8007b42:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 80b6 	beq.w	8007cb8 <ai_platform_network_process+0x2cc>
 8007b4c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007b50:	2700      	movs	r7, #0
 8007b52:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 80bd 	beq.w	8007cd6 <ai_platform_network_process+0x2ea>
 8007b5c:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8007b60:	2e00      	cmp	r6, #0
 8007b62:	f000 80b8 	beq.w	8007cd6 <ai_platform_network_process+0x2ea>
 8007b66:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007b6a:	681c      	ldr	r4, [r3, #0]
 8007b6c:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 8007b70:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8007b74:	f000 8160 	beq.w	8007e38 <ai_platform_network_process+0x44c>
 8007b78:	69b3      	ldr	r3, [r6, #24]
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	9302      	str	r3, [sp, #8]
 8007b80:	4658      	mov	r0, fp
 8007b82:	f7ff fbdf 	bl	8007344 <ai_buffer_get_size>
 8007b86:	9b02      	ldr	r3, [sp, #8]
 8007b88:	4283      	cmp	r3, r0
 8007b8a:	f0c0 8095 	bcc.w	8007cb8 <ai_platform_network_process+0x2cc>
 8007b8e:	68f0      	ldr	r0, [r6, #12]
 8007b90:	f8db 1018 	ldr.w	r1, [fp, #24]
 8007b94:	68c2      	ldr	r2, [r0, #12]
 8007b96:	68cb      	ldr	r3, [r1, #12]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	f040 808d 	bne.w	8007cb8 <ai_platform_network_process+0x2cc>
 8007b9e:	6882      	ldr	r2, [r0, #8]
 8007ba0:	688b      	ldr	r3, [r1, #8]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	f040 8088 	bne.w	8007cb8 <ai_platform_network_process+0x2cc>
 8007ba8:	6842      	ldr	r2, [r0, #4]
 8007baa:	684b      	ldr	r3, [r1, #4]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	f040 8083 	bne.w	8007cb8 <ai_platform_network_process+0x2cc>
 8007bb2:	69b3      	ldr	r3, [r6, #24]
 8007bb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bb8:	f001 f8a6 	bl	8008d08 <ai_array_get_data_byte_size>
 8007bbc:	9002      	str	r0, [sp, #8]
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f001 f8ba 	bl	8008d38 <get_tensor_byte_size>
 8007bc4:	9b02      	ldr	r3, [sp, #8]
 8007bc6:	4283      	cmp	r3, r0
 8007bc8:	d376      	bcc.n	8007cb8 <ai_platform_network_process+0x2cc>
 8007bca:	69b3      	ldr	r3, [r6, #24]
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	f001 f82b 	bl	8008c28 <ai_array_to_buffer_fmt>
 8007bd2:	f8db 3000 	ldr.w	r3, [fp]
 8007bd6:	4058      	eors	r0, r3
 8007bd8:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8007bdc:	f040 8134 	bne.w	8007e48 <ai_platform_network_process+0x45c>
 8007be0:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 8127 	beq.w	8007e38 <ai_platform_network_process+0x44c>
 8007bea:	f8db 3018 	ldr.w	r3, [fp, #24]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f000 8133 	beq.w	8007e5c <ai_platform_network_process+0x470>
 8007bf6:	9a01      	ldr	r2, [sp, #4]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	bf38      	it	cc
 8007bfc:	461a      	movcc	r2, r3
 8007bfe:	4630      	mov	r0, r6
 8007c00:	9201      	str	r2, [sp, #4]
 8007c02:	f001 f899 	bl	8008d38 <get_tensor_byte_size>
 8007c06:	f8c9 0008 	str.w	r0, [r9, #8]
 8007c0a:	f8db 3018 	ldr.w	r3, [fp, #24]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	fb00 f303 	mul.w	r3, r0, r3
 8007c14:	f8c9 300c 	str.w	r3, [r9, #12]
 8007c18:	f8db 1004 	ldr.w	r1, [fp, #4]
 8007c1c:	f8c9 1004 	str.w	r1, [r9, #4]
 8007c20:	440b      	add	r3, r1
 8007c22:	f844 300a 	str.w	r3, [r4, sl]
 8007c26:	69b0      	ldr	r0, [r6, #24]
 8007c28:	6803      	ldr	r3, [r0, #0]
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	f107 0701 	add.w	r7, r7, #1
 8007c30:	f10b 0b1c 	add.w	fp, fp, #28
 8007c34:	d44a      	bmi.n	8007ccc <ai_platform_network_process+0x2e0>
 8007c36:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007c3a:	1a9b      	subs	r3, r3, r2
 8007c3c:	4419      	add	r1, r3
 8007c3e:	6081      	str	r1, [r0, #8]
 8007c40:	69b3      	ldr	r3, [r6, #24]
 8007c42:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007c46:	60da      	str	r2, [r3, #12]
 8007c48:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007c4c:	42bb      	cmp	r3, r7
 8007c4e:	d880      	bhi.n	8007b52 <ai_platform_network_process+0x166>
 8007c50:	e041      	b.n	8007cd6 <ai_platform_network_process+0x2ea>
 8007c52:	692a      	ldr	r2, [r5, #16]
 8007c54:	61ab      	str	r3, [r5, #24]
 8007c56:	f002 0203 	and.w	r2, r2, #3
 8007c5a:	2a03      	cmp	r2, #3
 8007c5c:	d115      	bne.n	8007c8a <ai_platform_network_process+0x29e>
 8007c5e:	2217      	movs	r2, #23
 8007c60:	2112      	movs	r1, #18
 8007c62:	f105 000c 	add.w	r0, r5, #12
 8007c66:	f000 f909 	bl	8007e7c <core_set_error>
 8007c6a:	2400      	movs	r4, #0
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	b005      	add	sp, #20
 8007c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c74:	f8ba 3000 	ldrh.w	r3, [sl]
 8007c78:	429f      	cmp	r7, r3
 8007c7a:	f4ff aee0 	bcc.w	8007a3e <ai_platform_network_process+0x52>
 8007c7e:	e755      	b.n	8007b2c <ai_platform_network_process+0x140>
 8007c80:	2400      	movs	r4, #0
 8007c82:	4620      	mov	r0, r4
 8007c84:	b005      	add	sp, #20
 8007c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c8a:	2230      	movs	r2, #48	@ 0x30
 8007c8c:	2111      	movs	r1, #17
 8007c8e:	f105 000c 	add.w	r0, r5, #12
 8007c92:	f000 f8f3 	bl	8007e7c <core_set_error>
 8007c96:	2400      	movs	r4, #0
 8007c98:	4620      	mov	r0, r4
 8007c9a:	b005      	add	sp, #20
 8007c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca0:	9d03      	ldr	r5, [sp, #12]
 8007ca2:	2218      	movs	r2, #24
 8007ca4:	2112      	movs	r1, #18
 8007ca6:	f105 000c 	add.w	r0, r5, #12
 8007caa:	f000 f8e7 	bl	8007e7c <core_set_error>
 8007cae:	2400      	movs	r4, #0
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	b005      	add	sp, #20
 8007cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb8:	2218      	movs	r2, #24
 8007cba:	2113      	movs	r1, #19
 8007cbc:	f105 000c 	add.w	r0, r5, #12
 8007cc0:	f000 f8dc 	bl	8007e7c <core_set_error>
 8007cc4:	2400      	movs	r4, #0
 8007cc6:	e7d1      	b.n	8007c6c <ai_platform_network_process+0x280>
 8007cc8:	a1c00100 	.word	0xa1c00100
 8007ccc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007cd0:	429f      	cmp	r7, r3
 8007cd2:	f4ff af3e 	bcc.w	8007b52 <ai_platform_network_process+0x166>
 8007cd6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007cda:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8007cdc:	832b      	strh	r3, [r5, #24]
 8007cde:	2a00      	cmp	r2, #0
 8007ce0:	f040 808c 	bne.w	8007dfc <ai_platform_network_process+0x410>
 8007ce4:	4616      	mov	r6, r2
 8007ce6:	4617      	mov	r7, r2
 8007ce8:	8b6c      	ldrh	r4, [r5, #26]
 8007cea:	429c      	cmp	r4, r3
 8007cec:	bf38      	it	cc
 8007cee:	46ab      	movcc	fp, r5
 8007cf0:	d2bc      	bcs.n	8007c6c <ai_platform_network_process+0x280>
 8007cf2:	2e00      	cmp	r6, #0
 8007cf4:	d030      	beq.n	8007d58 <ai_platform_network_process+0x36c>
 8007cf6:	f04f 0800 	mov.w	r8, #0
 8007cfa:	e014      	b.n	8007d26 <ai_platform_network_process+0x33a>
 8007cfc:	6882      	ldr	r2, [r0, #8]
 8007cfe:	68c5      	ldr	r5, [r0, #12]
 8007d00:	6863      	ldr	r3, [r4, #4]
 8007d02:	1b52      	subs	r2, r2, r5
 8007d04:	4413      	add	r3, r2
 8007d06:	6083      	str	r3, [r0, #8]
 8007d08:	698b      	ldr	r3, [r1, #24]
 8007d0a:	6862      	ldr	r2, [r4, #4]
 8007d0c:	60da      	str	r2, [r3, #12]
 8007d0e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8007d12:	f859 200a 	ldr.w	r2, [r9, sl]
 8007d16:	440b      	add	r3, r1
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	bf24      	itt	cs
 8007d1c:	68e3      	ldrcs	r3, [r4, #12]
 8007d1e:	1ad3      	subcs	r3, r2, r3
 8007d20:	6063      	str	r3, [r4, #4]
 8007d22:	f108 0801 	add.w	r8, r8, #1
 8007d26:	8833      	ldrh	r3, [r6, #0]
 8007d28:	4543      	cmp	r3, r8
 8007d2a:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007d2e:	d913      	bls.n	8007d58 <ai_platform_network_process+0x36c>
 8007d30:	6873      	ldr	r3, [r6, #4]
 8007d32:	b18b      	cbz	r3, 8007d58 <ai_platform_network_process+0x36c>
 8007d34:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007d38:	b171      	cbz	r1, 8007d58 <ai_platform_network_process+0x36c>
 8007d3a:	6988      	ldr	r0, [r1, #24]
 8007d3c:	68b2      	ldr	r2, [r6, #8]
 8007d3e:	6803      	ldr	r3, [r0, #0]
 8007d40:	f8d2 9000 	ldr.w	r9, [r2]
 8007d44:	009d      	lsls	r5, r3, #2
 8007d46:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007d4a:	d5d7      	bpl.n	8007cfc <ai_platform_network_process+0x310>
 8007d4c:	6881      	ldr	r1, [r0, #8]
 8007d4e:	68a2      	ldr	r2, [r4, #8]
 8007d50:	6860      	ldr	r0, [r4, #4]
 8007d52:	f000 fec7 	bl	8008ae4 <st_int8_copy>
 8007d56:	e7da      	b.n	8007d0e <ai_platform_network_process+0x322>
 8007d58:	4658      	mov	r0, fp
 8007d5a:	f000 f8e7 	bl	8007f2c <ai_layers_forward_all>
 8007d5e:	2f00      	cmp	r7, #0
 8007d60:	d03d      	beq.n	8007dde <ai_platform_network_process+0x3f2>
 8007d62:	2400      	movs	r4, #0
 8007d64:	e016      	b.n	8007d94 <ai_platform_network_process+0x3a8>
 8007d66:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007d6a:	f859 100a 	ldr.w	r1, [r9, sl]
 8007d6e:	4413      	add	r3, r2
 8007d70:	428b      	cmp	r3, r1
 8007d72:	bf24      	itt	cs
 8007d74:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007d78:	1acb      	subcs	r3, r1, r3
 8007d7a:	f8c8 3004 	str.w	r3, [r8, #4]
 8007d7e:	6981      	ldr	r1, [r0, #24]
 8007d80:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007d84:	1b52      	subs	r2, r2, r5
 8007d86:	4413      	add	r3, r2
 8007d88:	608b      	str	r3, [r1, #8]
 8007d8a:	6983      	ldr	r3, [r0, #24]
 8007d8c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007d90:	60da      	str	r2, [r3, #12]
 8007d92:	3401      	adds	r4, #1
 8007d94:	883b      	ldrh	r3, [r7, #0]
 8007d96:	42a3      	cmp	r3, r4
 8007d98:	d921      	bls.n	8007dde <ai_platform_network_process+0x3f2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	b1fb      	cbz	r3, 8007dde <ai_platform_network_process+0x3f2>
 8007d9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007da2:	b1e0      	cbz	r0, 8007dde <ai_platform_network_process+0x3f2>
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	6983      	ldr	r3, [r0, #24]
 8007da8:	f8d2 9000 	ldr.w	r9, [r2]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	0092      	lsls	r2, r2, #2
 8007db0:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007db4:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8007db8:	d5d5      	bpl.n	8007d66 <ai_platform_network_process+0x37a>
 8007dba:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8007dbe:	6898      	ldr	r0, [r3, #8]
 8007dc0:	f000 fe90 	bl	8008ae4 <st_int8_copy>
 8007dc4:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007dc8:	f859 200a 	ldr.w	r2, [r9, sl]
 8007dcc:	440b      	add	r3, r1
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	bf24      	itt	cs
 8007dd2:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007dd6:	1ad3      	subcs	r3, r2, r3
 8007dd8:	f8c8 3004 	str.w	r3, [r8, #4]
 8007ddc:	e7d9      	b.n	8007d92 <ai_platform_network_process+0x3a6>
 8007dde:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 8007de2:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8007de6:	3401      	adds	r4, #1
 8007de8:	b2a4      	uxth	r4, r4
 8007dea:	42a3      	cmp	r3, r4
 8007dec:	f8ab 401a 	strh.w	r4, [fp, #26]
 8007df0:	f63f af7f 	bhi.w	8007cf2 <ai_platform_network_process+0x306>
 8007df4:	4620      	mov	r0, r4
 8007df6:	b005      	add	sp, #20
 8007df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dfc:	2a01      	cmp	r2, #1
 8007dfe:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8007e00:	d02a      	beq.n	8007e58 <ai_platform_network_process+0x46c>
 8007e02:	f106 070c 	add.w	r7, r6, #12
 8007e06:	e76f      	b.n	8007ce8 <ai_platform_network_process+0x2fc>
 8007e08:	9d03      	ldr	r5, [sp, #12]
 8007e0a:	e728      	b.n	8007c5e <ai_platform_network_process+0x272>
 8007e0c:	9d03      	ldr	r5, [sp, #12]
 8007e0e:	2219      	movs	r2, #25
 8007e10:	2112      	movs	r1, #18
 8007e12:	f105 000c 	add.w	r0, r5, #12
 8007e16:	f000 f831 	bl	8007e7c <core_set_error>
 8007e1a:	2400      	movs	r4, #0
 8007e1c:	e726      	b.n	8007c6c <ai_platform_network_process+0x280>
 8007e1e:	9d03      	ldr	r5, [sp, #12]
 8007e20:	4604      	mov	r4, r0
 8007e22:	2221      	movs	r2, #33	@ 0x21
 8007e24:	2112      	movs	r1, #18
 8007e26:	f105 000c 	add.w	r0, r5, #12
 8007e2a:	f000 f827 	bl	8007e7c <core_set_error>
 8007e2e:	e71d      	b.n	8007c6c <ai_platform_network_process+0x280>
 8007e30:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007e34:	832b      	strh	r3, [r5, #24]
 8007e36:	e752      	b.n	8007cde <ai_platform_network_process+0x2f2>
 8007e38:	2217      	movs	r2, #23
 8007e3a:	2113      	movs	r1, #19
 8007e3c:	f105 000c 	add.w	r0, r5, #12
 8007e40:	f000 f81c 	bl	8007e7c <core_set_error>
 8007e44:	2400      	movs	r4, #0
 8007e46:	e711      	b.n	8007c6c <ai_platform_network_process+0x280>
 8007e48:	2219      	movs	r2, #25
 8007e4a:	2113      	movs	r1, #19
 8007e4c:	f105 000c 	add.w	r0, r5, #12
 8007e50:	f000 f814 	bl	8007e7c <core_set_error>
 8007e54:	2400      	movs	r4, #0
 8007e56:	e709      	b.n	8007c6c <ai_platform_network_process+0x280>
 8007e58:	2700      	movs	r7, #0
 8007e5a:	e745      	b.n	8007ce8 <ai_platform_network_process+0x2fc>
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	2221      	movs	r2, #33	@ 0x21
 8007e60:	2113      	movs	r1, #19
 8007e62:	f105 000c 	add.w	r0, r5, #12
 8007e66:	f000 f809 	bl	8007e7c <core_set_error>
 8007e6a:	e6ff      	b.n	8007c6c <ai_platform_network_process+0x280>

08007e6c <core_init>:
 8007e6c:	2001      	movs	r0, #1
 8007e6e:	4770      	bx	lr

08007e70 <core_get_error>:
 8007e70:	4603      	mov	r3, r0
 8007e72:	2200      	movs	r2, #0
 8007e74:	6800      	ldr	r0, [r0, #0]
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop

08007e7c <core_set_error>:
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	7800      	ldrb	r0, [r0, #0]
 8007e80:	b108      	cbz	r0, 8007e86 <core_set_error+0xa>
 8007e82:	2000      	movs	r0, #0
 8007e84:	4770      	bx	lr
 8007e86:	7019      	strb	r1, [r3, #0]
 8007e88:	6819      	ldr	r1, [r3, #0]
 8007e8a:	f362 211f 	bfi	r1, r2, #8, #24
 8007e8e:	2001      	movs	r0, #1
 8007e90:	6019      	str	r1, [r3, #0]
 8007e92:	4770      	bx	lr

08007e94 <ai_check_custom_types>:
 8007e94:	b082      	sub	sp, #8
 8007e96:	4b13      	ldr	r3, [pc, #76]	@ (8007ee4 <ai_check_custom_types+0x50>)
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	b118      	cbz	r0, 8007ea4 <ai_check_custom_types+0x10>
 8007e9c:	7803      	ldrb	r3, [r0, #0]
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d002      	beq.n	8007ea8 <ai_check_custom_types+0x14>
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	b002      	add	sp, #8
 8007ea6:	4770      	bx	lr
 8007ea8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d004      	beq.n	8007eba <ai_check_custom_types+0x26>
 8007eb0:	2001      	movs	r0, #1
 8007eb2:	f080 0001 	eor.w	r0, r0, #1
 8007eb6:	b002      	add	sp, #8
 8007eb8:	4770      	bx	lr
 8007eba:	7842      	ldrb	r2, [r0, #1]
 8007ebc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	f100 0001 	add.w	r0, r0, #1
 8007ec6:	d1f3      	bne.n	8007eb0 <ai_check_custom_types+0x1c>
 8007ec8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007ecc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d1ed      	bne.n	8007eb0 <ai_check_custom_types+0x1c>
 8007ed4:	7842      	ldrb	r2, [r0, #1]
 8007ed6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d1e8      	bne.n	8007eb0 <ai_check_custom_types+0x1c>
 8007ede:	2000      	movs	r0, #0
 8007ee0:	e7e7      	b.n	8007eb2 <ai_check_custom_types+0x1e>
 8007ee2:	bf00      	nop
 8007ee4:	84048403 	.word	0x84048403

08007ee8 <ai_layers_init_all>:
 8007ee8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007eea:	2100      	movs	r1, #0
 8007eec:	b143      	cbz	r3, 8007f00 <ai_layers_init_all+0x18>
 8007eee:	691a      	ldr	r2, [r3, #16]
 8007ef0:	60d8      	str	r0, [r3, #12]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	f101 0101 	add.w	r1, r1, #1
 8007ef8:	d002      	beq.n	8007f00 <ai_layers_init_all+0x18>
 8007efa:	b10a      	cbz	r2, 8007f00 <ai_layers_init_all+0x18>
 8007efc:	4613      	mov	r3, r2
 8007efe:	e7f5      	b.n	8007eec <ai_layers_init_all+0x4>
 8007f00:	4608      	mov	r0, r1
 8007f02:	4770      	bx	lr

08007f04 <ai_layers_post_init_all>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8007f08:	2500      	movs	r5, #0
 8007f0a:	b16c      	cbz	r4, 8007f28 <ai_layers_post_init_all+0x24>
 8007f0c:	6863      	ldr	r3, [r4, #4]
 8007f0e:	07db      	lsls	r3, r3, #31
 8007f10:	d504      	bpl.n	8007f1c <ai_layers_post_init_all+0x18>
 8007f12:	6a23      	ldr	r3, [r4, #32]
 8007f14:	4620      	mov	r0, r4
 8007f16:	b10b      	cbz	r3, 8007f1c <ai_layers_post_init_all+0x18>
 8007f18:	4798      	blx	r3
 8007f1a:	3501      	adds	r5, #1
 8007f1c:	6923      	ldr	r3, [r4, #16]
 8007f1e:	42a3      	cmp	r3, r4
 8007f20:	d002      	beq.n	8007f28 <ai_layers_post_init_all+0x24>
 8007f22:	b10b      	cbz	r3, 8007f28 <ai_layers_post_init_all+0x24>
 8007f24:	461c      	mov	r4, r3
 8007f26:	e7f0      	b.n	8007f0a <ai_layers_post_init_all+0x6>
 8007f28:	4628      	mov	r0, r5
 8007f2a:	bd38      	pop	{r3, r4, r5, pc}

08007f2c <ai_layers_forward_all>:
 8007f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f30:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8007f34:	4604      	mov	r4, r0
 8007f36:	f1b8 0f00 	cmp.w	r8, #0
 8007f3a:	d02b      	beq.n	8007f94 <ai_layers_forward_all+0x68>
 8007f3c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8007f3e:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8007f40:	b321      	cbz	r1, 8007f8c <ai_layers_forward_all+0x60>
 8007f42:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8007f44:	2001      	movs	r0, #1
 8007f46:	47c0      	blx	r8
 8007f48:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8007f4a:	b1fe      	cbz	r6, 8007f8c <ai_layers_forward_all+0x60>
 8007f4c:	2700      	movs	r7, #0
 8007f4e:	4631      	mov	r1, r6
 8007f50:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8007f52:	2002      	movs	r0, #2
 8007f54:	47c0      	blx	r8
 8007f56:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8007f58:	4628      	mov	r0, r5
 8007f5a:	696b      	ldr	r3, [r5, #20]
 8007f5c:	4798      	blx	r3
 8007f5e:	692e      	ldr	r6, [r5, #16]
 8007f60:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8007f62:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8007f64:	42b5      	cmp	r5, r6
 8007f66:	f04f 0003 	mov.w	r0, #3
 8007f6a:	d007      	beq.n	8007f7c <ai_layers_forward_all+0x50>
 8007f6c:	47c0      	blx	r8
 8007f6e:	3701      	adds	r7, #1
 8007f70:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8007f72:	2e00      	cmp	r6, #0
 8007f74:	d1eb      	bne.n	8007f4e <ai_layers_forward_all+0x22>
 8007f76:	4638      	mov	r0, r7
 8007f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f7c:	2003      	movs	r0, #3
 8007f7e:	47c0      	blx	r8
 8007f80:	2300      	movs	r3, #0
 8007f82:	3701      	adds	r7, #1
 8007f84:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8007f86:	4638      	mov	r0, r7
 8007f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f8c:	2700      	movs	r7, #0
 8007f8e:	4638      	mov	r0, r7
 8007f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f94:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8007f96:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8007f98:	2d00      	cmp	r5, #0
 8007f9a:	d0f7      	beq.n	8007f8c <ai_layers_forward_all+0x60>
 8007f9c:	4647      	mov	r7, r8
 8007f9e:	696b      	ldr	r3, [r5, #20]
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	4798      	blx	r3
 8007fa4:	462b      	mov	r3, r5
 8007fa6:	692d      	ldr	r5, [r5, #16]
 8007fa8:	429d      	cmp	r5, r3
 8007faa:	d004      	beq.n	8007fb6 <ai_layers_forward_all+0x8a>
 8007fac:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8007fae:	3701      	adds	r7, #1
 8007fb0:	2d00      	cmp	r5, #0
 8007fb2:	d1f4      	bne.n	8007f9e <ai_layers_forward_all+0x72>
 8007fb4:	e7df      	b.n	8007f76 <ai_layers_forward_all+0x4a>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8007fba:	3701      	adds	r7, #1
 8007fbc:	e7db      	b.n	8007f76 <ai_layers_forward_all+0x4a>
 8007fbe:	bf00      	nop

08007fc0 <forward_dense>:
 8007fc0:	6982      	ldr	r2, [r0, #24]
 8007fc2:	8813      	ldrh	r3, [r2, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d043      	beq.n	8008050 <forward_dense+0x90>
 8007fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fcc:	6855      	ldr	r5, [r2, #4]
 8007fce:	6869      	ldr	r1, [r5, #4]
 8007fd0:	b08e      	sub	sp, #56	@ 0x38
 8007fd2:	b101      	cbz	r1, 8007fd6 <forward_dense+0x16>
 8007fd4:	6809      	ldr	r1, [r1, #0]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d069      	beq.n	80080ae <forward_dense+0xee>
 8007fda:	692a      	ldr	r2, [r5, #16]
 8007fdc:	b102      	cbz	r2, 8007fe0 <forward_dense+0x20>
 8007fde:	6812      	ldr	r2, [r2, #0]
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d061      	beq.n	80080a8 <forward_dense+0xe8>
 8007fe4:	69ec      	ldr	r4, [r5, #28]
 8007fe6:	2c00      	cmp	r4, #0
 8007fe8:	d057      	beq.n	800809a <forward_dense+0xda>
 8007fea:	8b2e      	ldrh	r6, [r5, #24]
 8007fec:	6820      	ldr	r0, [r4, #0]
 8007fee:	2e01      	cmp	r6, #1
 8007ff0:	d955      	bls.n	800809e <forward_dense+0xde>
 8007ff2:	6864      	ldr	r4, [r4, #4]
 8007ff4:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8007ff8:	68cf      	ldr	r7, [r1, #12]
 8007ffa:	68d0      	ldr	r0, [r2, #12]
 8007ffc:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8008000:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8008004:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8008008:	f8d9 0000 	ldr.w	r0, [r9]
 800800c:	2b03      	cmp	r3, #3
 800800e:	fb06 f807 	mul.w	r8, r6, r7
 8008012:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 8008016:	d044      	beq.n	80080a2 <forward_dense+0xe2>
 8008018:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 800801a:	b11d      	cbz	r5, 8008024 <forward_dense+0x64>
 800801c:	682d      	ldr	r5, [r5, #0]
 800801e:	b10d      	cbz	r5, 8008024 <forward_dense+0x64>
 8008020:	69ab      	ldr	r3, [r5, #24]
 8008022:	689d      	ldr	r5, [r3, #8]
 8008024:	6992      	ldr	r2, [r2, #24]
 8008026:	698b      	ldr	r3, [r1, #24]
 8008028:	6890      	ldr	r0, [r2, #8]
 800802a:	6899      	ldr	r1, [r3, #8]
 800802c:	b10c      	cbz	r4, 8008032 <forward_dense+0x72>
 800802e:	69a3      	ldr	r3, [r4, #24]
 8008030:	689c      	ldr	r4, [r3, #8]
 8008032:	4b20      	ldr	r3, [pc, #128]	@ (80080b4 <forward_dense+0xf4>)
 8008034:	459c      	cmp	ip, r3
 8008036:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 800803a:	d023      	beq.n	8008084 <forward_dense+0xc4>
 800803c:	4e1e      	ldr	r6, [pc, #120]	@ (80080b8 <forward_dense+0xf8>)
 800803e:	45b4      	cmp	ip, r6
 8008040:	d015      	beq.n	800806e <forward_dense+0xae>
 8008042:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 8008046:	459c      	cmp	ip, r3
 8008048:	d004      	beq.n	8008054 <forward_dense+0x94>
 800804a:	b00e      	add	sp, #56	@ 0x38
 800804c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	deff      	udf	#255	@ 0xff
 8008054:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8008058:	a807      	add	r0, sp, #28
 800805a:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 800805e:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 8008062:	9209      	str	r2, [sp, #36]	@ 0x24
 8008064:	f000 f98e 	bl	8008384 <forward_lite_dense_if32of32wf32>
 8008068:	b00e      	add	sp, #56	@ 0x38
 800806a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806e:	e9cd e803 	strd	lr, r8, [sp, #12]
 8008072:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8008076:	9500      	str	r5, [sp, #0]
 8008078:	464b      	mov	r3, r9
 800807a:	f000 fadd 	bl	8008638 <forward_lite_dense_if32of32wf32_lut4>
 800807e:	b00e      	add	sp, #56	@ 0x38
 8008080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008084:	e9cd e803 	strd	lr, r8, [sp, #12]
 8008088:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800808c:	9500      	str	r5, [sp, #0]
 800808e:	464b      	mov	r3, r9
 8008090:	f000 fbfa 	bl	8008888 <forward_lite_dense_if32of32wf32_lut8>
 8008094:	b00e      	add	sp, #56	@ 0x38
 8008096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800809a:	4620      	mov	r0, r4
 800809c:	e7aa      	b.n	8007ff4 <forward_dense+0x34>
 800809e:	2400      	movs	r4, #0
 80080a0:	e7a8      	b.n	8007ff4 <forward_dense+0x34>
 80080a2:	2300      	movs	r3, #0
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	deff      	udf	#255	@ 0xff
 80080a8:	2300      	movs	r3, #0
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	deff      	udf	#255	@ 0xff
 80080ae:	2300      	movs	r3, #0
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	deff      	udf	#255	@ 0xff
 80080b4:	00d01040 	.word	0x00d01040
 80080b8:	00f01040 	.word	0x00f01040

080080bc <forward_sigmoid>:
 80080bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080be:	ed2d 8b02 	vpush	{d8}
 80080c2:	6982      	ldr	r2, [r0, #24]
 80080c4:	8813      	ldrh	r3, [r2, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d03b      	beq.n	8008142 <forward_sigmoid+0x86>
 80080ca:	6852      	ldr	r2, [r2, #4]
 80080cc:	6854      	ldr	r4, [r2, #4]
 80080ce:	b104      	cbz	r4, 80080d2 <forward_sigmoid+0x16>
 80080d0:	6824      	ldr	r4, [r4, #0]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d034      	beq.n	8008140 <forward_sigmoid+0x84>
 80080d6:	6915      	ldr	r5, [r2, #16]
 80080d8:	b105      	cbz	r5, 80080dc <forward_sigmoid+0x20>
 80080da:	682d      	ldr	r5, [r5, #0]
 80080dc:	68a3      	ldr	r3, [r4, #8]
 80080de:	0a1b      	lsrs	r3, r3, #8
 80080e0:	d031      	beq.n	8008146 <forward_sigmoid+0x8a>
 80080e2:	68e0      	ldr	r0, [r4, #12]
 80080e4:	2201      	movs	r2, #1
 80080e6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80080ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080ee:	4298      	cmp	r0, r3
 80080f0:	fb01 f202 	mul.w	r2, r1, r2
 80080f4:	d1f9      	bne.n	80080ea <forward_sigmoid+0x2e>
 80080f6:	69a7      	ldr	r7, [r4, #24]
 80080f8:	69a9      	ldr	r1, [r5, #24]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	688e      	ldr	r6, [r1, #8]
 80080fe:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8008102:	3a01      	subs	r2, #1
 8008104:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8008108:	42ab      	cmp	r3, r5
 800810a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800810e:	d814      	bhi.n	800813a <forward_sigmoid+0x7e>
 8008110:	3504      	adds	r5, #4
 8008112:	3604      	adds	r6, #4
 8008114:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8008118:	462c      	mov	r4, r5
 800811a:	ed35 0a01 	vldmdb	r5!, {s0}
 800811e:	eeb1 0a40 	vneg.f32	s0, s0
 8008122:	f001 fdaf 	bl	8009c84 <expf>
 8008126:	ee30 0a08 	vadd.f32	s0, s0, s16
 800812a:	3c08      	subs	r4, #8
 800812c:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8008130:	ed66 7a01 	vstmdb	r6!, {s15}
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	42a3      	cmp	r3, r4
 8008138:	d9ee      	bls.n	8008118 <forward_sigmoid+0x5c>
 800813a:	ecbd 8b02 	vpop	{d8}
 800813e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008140:	2300      	movs	r3, #0
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	deff      	udf	#255	@ 0xff
 8008146:	69ab      	ldr	r3, [r5, #24]
 8008148:	69a7      	ldr	r7, [r4, #24]
 800814a:	689e      	ldr	r6, [r3, #8]
 800814c:	68bd      	ldr	r5, [r7, #8]
 800814e:	e7df      	b.n	8008110 <forward_sigmoid+0x54>

08008150 <forward_relu>:
 8008150:	6982      	ldr	r2, [r0, #24]
 8008152:	8813      	ldrh	r3, [r2, #0]
 8008154:	b323      	cbz	r3, 80081a0 <forward_relu+0x50>
 8008156:	6851      	ldr	r1, [r2, #4]
 8008158:	684a      	ldr	r2, [r1, #4]
 800815a:	b102      	cbz	r2, 800815e <forward_relu+0xe>
 800815c:	6812      	ldr	r2, [r2, #0]
 800815e:	2b01      	cmp	r3, #1
 8008160:	f000 808d 	beq.w	800827e <forward_relu+0x12e>
 8008164:	b470      	push	{r4, r5, r6}
 8008166:	6909      	ldr	r1, [r1, #16]
 8008168:	b101      	cbz	r1, 800816c <forward_relu+0x1c>
 800816a:	6809      	ldr	r1, [r1, #0]
 800816c:	69c6      	ldr	r6, [r0, #28]
 800816e:	b1ce      	cbz	r6, 80081a4 <forward_relu+0x54>
 8008170:	6873      	ldr	r3, [r6, #4]
 8008172:	6988      	ldr	r0, [r1, #24]
 8008174:	6991      	ldr	r1, [r2, #24]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d044      	beq.n	8008204 <forward_relu+0xb4>
 800817a:	6893      	ldr	r3, [r2, #8]
 800817c:	6880      	ldr	r0, [r0, #8]
 800817e:	6889      	ldr	r1, [r1, #8]
 8008180:	0a1b      	lsrs	r3, r3, #8
 8008182:	d073      	beq.n	800826c <forward_relu+0x11c>
 8008184:	68d5      	ldr	r5, [r2, #12]
 8008186:	2201      	movs	r2, #1
 8008188:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800818c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8008190:	429d      	cmp	r5, r3
 8008192:	fb04 f202 	mul.w	r2, r4, r2
 8008196:	d1f9      	bne.n	800818c <forward_relu+0x3c>
 8008198:	68b3      	ldr	r3, [r6, #8]
 800819a:	bc70      	pop	{r4, r5, r6}
 800819c:	f000 b874 	b.w	8008288 <forward_lite_nl_relu_generic_if32of32_kernel>
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	deff      	udf	#255	@ 0xff
 80081a4:	6893      	ldr	r3, [r2, #8]
 80081a6:	6989      	ldr	r1, [r1, #24]
 80081a8:	6990      	ldr	r0, [r2, #24]
 80081aa:	6889      	ldr	r1, [r1, #8]
 80081ac:	6884      	ldr	r4, [r0, #8]
 80081ae:	0a1b      	lsrs	r3, r3, #8
 80081b0:	d05e      	beq.n	8008270 <forward_relu+0x120>
 80081b2:	68d5      	ldr	r5, [r2, #12]
 80081b4:	2201      	movs	r2, #1
 80081b6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80081ba:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80081be:	429d      	cmp	r5, r3
 80081c0:	fb00 f202 	mul.w	r2, r0, r2
 80081c4:	d1f9      	bne.n	80081ba <forward_relu+0x6a>
 80081c6:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 80081ca:	3b01      	subs	r3, #1
 80081cc:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80081d0:	4294      	cmp	r4, r2
 80081d2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80081d6:	d813      	bhi.n	8008200 <forward_relu+0xb0>
 80081d8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8008284 <forward_relu+0x134>
 80081dc:	3204      	adds	r2, #4
 80081de:	3104      	adds	r1, #4
 80081e0:	4613      	mov	r3, r2
 80081e2:	ed72 7a01 	vldmdb	r2!, {s15}
 80081e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80081ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ee:	f1a3 0308 	sub.w	r3, r3, #8
 80081f2:	bfb8      	it	lt
 80081f4:	eef0 7a47 	vmovlt.f32	s15, s14
 80081f8:	429c      	cmp	r4, r3
 80081fa:	ed61 7a01 	vstmdb	r1!, {s15}
 80081fe:	d9ef      	bls.n	80081e0 <forward_relu+0x90>
 8008200:	bc70      	pop	{r4, r5, r6}
 8008202:	4770      	bx	lr
 8008204:	688c      	ldr	r4, [r1, #8]
 8008206:	6891      	ldr	r1, [r2, #8]
 8008208:	6880      	ldr	r0, [r0, #8]
 800820a:	0a09      	lsrs	r1, r1, #8
 800820c:	d032      	beq.n	8008274 <forward_relu+0x124>
 800820e:	68d5      	ldr	r5, [r2, #12]
 8008210:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8008214:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008218:	4295      	cmp	r5, r2
 800821a:	fb01 f303 	mul.w	r3, r1, r3
 800821e:	d1f9      	bne.n	8008214 <forward_relu+0xc4>
 8008220:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8008224:	3a01      	subs	r2, #1
 8008226:	68b1      	ldr	r1, [r6, #8]
 8008228:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800822c:	429c      	cmp	r4, r3
 800822e:	ed91 7a00 	vldr	s14, [r1]
 8008232:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8008236:	d8e3      	bhi.n	8008200 <forward_relu+0xb0>
 8008238:	2500      	movs	r5, #0
 800823a:	3304      	adds	r3, #4
 800823c:	1d02      	adds	r2, r0, #4
 800823e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008242:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800824a:	f1a3 0104 	sub.w	r1, r3, #4
 800824e:	f1a3 0308 	sub.w	r3, r3, #8
 8008252:	d405      	bmi.n	8008260 <forward_relu+0x110>
 8008254:	429c      	cmp	r4, r3
 8008256:	f842 5d04 	str.w	r5, [r2, #-4]!
 800825a:	d8d1      	bhi.n	8008200 <forward_relu+0xb0>
 800825c:	460b      	mov	r3, r1
 800825e:	e7ee      	b.n	800823e <forward_relu+0xee>
 8008260:	429c      	cmp	r4, r3
 8008262:	ed62 7a01 	vstmdb	r2!, {s15}
 8008266:	d8cb      	bhi.n	8008200 <forward_relu+0xb0>
 8008268:	460b      	mov	r3, r1
 800826a:	e7e8      	b.n	800823e <forward_relu+0xee>
 800826c:	2201      	movs	r2, #1
 800826e:	e793      	b.n	8008198 <forward_relu+0x48>
 8008270:	4622      	mov	r2, r4
 8008272:	e7b1      	b.n	80081d8 <forward_relu+0x88>
 8008274:	68b2      	ldr	r2, [r6, #8]
 8008276:	4623      	mov	r3, r4
 8008278:	ed92 7a00 	vldr	s14, [r2]
 800827c:	e7dc      	b.n	8008238 <forward_relu+0xe8>
 800827e:	2300      	movs	r3, #0
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	deff      	udf	#255	@ 0xff
 8008284:	00000000 	.word	0x00000000

08008288 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8008288:	edd3 6a02 	vldr	s13, [r3, #8]
 800828c:	ed93 7a00 	vldr	s14, [r3]
 8008290:	ed93 6a01 	vldr	s12, [r3, #4]
 8008294:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800829c:	d42a      	bmi.n	80082f4 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800829e:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80082a2:	3a01      	subs	r2, #1
 80082a4:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80082a8:	4561      	cmp	r1, ip
 80082aa:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80082ae:	d85d      	bhi.n	800836c <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 80082b0:	1d11      	adds	r1, r2, #4
 80082b2:	f10c 0304 	add.w	r3, ip, #4
 80082b6:	4408      	add	r0, r1
 80082b8:	ebac 0202 	sub.w	r2, ip, r2
 80082bc:	e00c      	b.n	80082d8 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 80082be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c6:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80082ca:	db01      	blt.n	80082d0 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 80082cc:	ee65 7a86 	vmul.f32	s15, s11, s12
 80082d0:	4293      	cmp	r3, r2
 80082d2:	ed60 7a01 	vstmdb	r0!, {s15}
 80082d6:	d00c      	beq.n	80082f2 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 80082d8:	ed73 7a01 	vldmdb	r3!, {s15}
 80082dc:	eef4 6ae7 	vcmpe.f32	s13, s15
 80082e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e4:	daeb      	bge.n	80082be <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 80082e6:	eef0 7a66 	vmov.f32	s15, s13
 80082ea:	4293      	cmp	r3, r2
 80082ec:	ed60 7a01 	vstmdb	r0!, {s15}
 80082f0:	d1f2      	bne.n	80082d8 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 80082f2:	4770      	bx	lr
 80082f4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80082f8:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80082fc:	3a01      	subs	r2, #1
 80082fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008302:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8008306:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800830a:	d017      	beq.n	800833c <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 800830c:	4561      	cmp	r1, ip
 800830e:	d82d      	bhi.n	800836c <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8008310:	1d11      	adds	r1, r2, #4
 8008312:	f10c 0304 	add.w	r3, ip, #4
 8008316:	4401      	add	r1, r0
 8008318:	ebac 0202 	sub.w	r2, ip, r2
 800831c:	ed73 7a01 	vldmdb	r3!, {s15}
 8008320:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800832c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008330:	d81d      	bhi.n	800836e <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 8008332:	4293      	cmp	r3, r2
 8008334:	ed61 6a01 	vstmdb	r1!, {s13}
 8008338:	d1f0      	bne.n	800831c <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800833a:	4770      	bx	lr
 800833c:	4561      	cmp	r1, ip
 800833e:	d815      	bhi.n	800836c <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8008340:	1d11      	adds	r1, r2, #4
 8008342:	b500      	push	{lr}
 8008344:	f10c 0304 	add.w	r3, ip, #4
 8008348:	f04f 0e00 	mov.w	lr, #0
 800834c:	4401      	add	r1, r0
 800834e:	ebac 0202 	sub.w	r2, ip, r2
 8008352:	ed73 7a01 	vldmdb	r3!, {s15}
 8008356:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800835a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800835e:	d40b      	bmi.n	8008378 <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 8008360:	4293      	cmp	r3, r2
 8008362:	f841 ed04 	str.w	lr, [r1, #-4]!
 8008366:	d1f4      	bne.n	8008352 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8008368:	f85d fb04 	ldr.w	pc, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	4293      	cmp	r3, r2
 8008370:	ed61 7a01 	vstmdb	r1!, {s15}
 8008374:	d1d2      	bne.n	800831c <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8008376:	4770      	bx	lr
 8008378:	4293      	cmp	r3, r2
 800837a:	ed61 7a01 	vstmdb	r1!, {s15}
 800837e:	d1e8      	bne.n	8008352 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8008380:	e7f2      	b.n	8008368 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8008382:	bf00      	nop

08008384 <forward_lite_dense_if32of32wf32>:
 8008384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008388:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 800838c:	6801      	ldr	r1, [r0, #0]
 800838e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8008392:	fb02 f303 	mul.w	r3, r2, r3
 8008396:	b083      	sub	sp, #12
 8008398:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800839c:	4299      	cmp	r1, r3
 800839e:	9100      	str	r1, [sp, #0]
 80083a0:	9301      	str	r3, [sp, #4]
 80083a2:	f080 811e 	bcs.w	80085e2 <forward_lite_dense_if32of32wf32+0x25e>
 80083a6:	6904      	ldr	r4, [r0, #16]
 80083a8:	4607      	mov	r7, r0
 80083aa:	0096      	lsls	r6, r2, #2
 80083ac:	9b00      	ldr	r3, [sp, #0]
 80083ae:	68bd      	ldr	r5, [r7, #8]
 80083b0:	eb03 0e06 	add.w	lr, r3, r6
 80083b4:	459e      	cmp	lr, r3
 80083b6:	461e      	mov	r6, r3
 80083b8:	f240 8104 	bls.w	80085c4 <forward_lite_dense_if32of32wf32+0x240>
 80083bc:	f1a4 0c10 	sub.w	ip, r4, #16
 80083c0:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 80083c4:	f10c 0c01 	add.w	ip, ip, #1
 80083c8:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 80083cc:	ea4f 0984 	mov.w	r9, r4, lsl #2
 80083d0:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 80083d4:	2c0f      	cmp	r4, #15
 80083d6:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8008634 <forward_lite_dense_if32of32wf32+0x2b0>
 80083da:	f240 8105 	bls.w	80085e8 <forward_lite_dense_if32of32wf32+0x264>
 80083de:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 80083e2:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 80083e6:	4621      	mov	r1, r4
 80083e8:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 80083ec:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 80083f0:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 80083f4:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 80083f8:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 80083fc:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 8008400:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 8008404:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 8008408:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 800840c:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8008410:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8008414:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 8008418:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800841c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008420:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8008424:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008428:	3910      	subs	r1, #16
 800842a:	290f      	cmp	r1, #15
 800842c:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 8008430:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 8008434:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008438:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 800843c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8008440:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 8008444:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8008448:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800844c:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 8008450:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 8008454:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008458:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 800845c:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 8008460:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008464:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 8008468:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 800846c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008470:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8008474:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8008478:	eee4 7a24 	vfma.f32	s15, s8, s9
 800847c:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8008480:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8008484:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008488:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 800848c:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8008490:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008494:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8008498:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800849c:	eee1 7a21 	vfma.f32	s15, s2, s3
 80084a0:	eee2 7a22 	vfma.f32	s15, s4, s5
 80084a4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80084a8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80084ac:	eee5 7a25 	vfma.f32	s15, s10, s11
 80084b0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80084b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80084b8:	d896      	bhi.n	80083e8 <forward_lite_dense_if32of32wf32+0x64>
 80084ba:	eb05 020b 	add.w	r2, r5, fp
 80084be:	f004 010f 	and.w	r1, r4, #15
 80084c2:	4663      	mov	r3, ip
 80084c4:	2903      	cmp	r1, #3
 80084c6:	d95f      	bls.n	8008588 <forward_lite_dense_if32of32wf32+0x204>
 80084c8:	edd2 6a01 	vldr	s13, [r2, #4]
 80084cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80084d0:	ed93 6a00 	vldr	s12, [r3]
 80084d4:	ed93 5a02 	vldr	s10, [r3, #8]
 80084d8:	edd2 5a02 	vldr	s11, [r2, #8]
 80084dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80084e0:	edd2 6a00 	vldr	s13, [r2]
 80084e4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80084e8:	1f08      	subs	r0, r1, #4
 80084ea:	2803      	cmp	r0, #3
 80084ec:	ed93 6a03 	vldr	s12, [r3, #12]
 80084f0:	edd2 6a03 	vldr	s13, [r2, #12]
 80084f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084f8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80084fc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008500:	eeb0 7a67 	vmov.f32	s14, s15
 8008504:	d938      	bls.n	8008578 <forward_lite_dense_if32of32wf32+0x1f4>
 8008506:	edd2 6a05 	vldr	s13, [r2, #20]
 800850a:	edd3 7a05 	vldr	s15, [r3, #20]
 800850e:	ed93 6a04 	vldr	s12, [r3, #16]
 8008512:	ed93 5a06 	vldr	s10, [r3, #24]
 8008516:	edd2 5a06 	vldr	s11, [r2, #24]
 800851a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800851e:	edd2 6a04 	vldr	s13, [r2, #16]
 8008522:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008526:	f1a1 0a08 	sub.w	sl, r1, #8
 800852a:	f1ba 0f03 	cmp.w	sl, #3
 800852e:	ed93 6a07 	vldr	s12, [r3, #28]
 8008532:	edd2 6a07 	vldr	s13, [r2, #28]
 8008536:	eee5 7a25 	vfma.f32	s15, s10, s11
 800853a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800853e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008542:	d919      	bls.n	8008578 <forward_lite_dense_if32of32wf32+0x1f4>
 8008544:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8008548:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800854c:	ed92 6a08 	vldr	s12, [r2, #32]
 8008550:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 8008554:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8008558:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800855c:	edd3 6a08 	vldr	s13, [r3, #32]
 8008560:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008564:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8008568:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800856c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008570:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008574:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008578:	0880      	lsrs	r0, r0, #2
 800857a:	3001      	adds	r0, #1
 800857c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8008580:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8008584:	f001 0103 	and.w	r1, r1, #3
 8008588:	b1a9      	cbz	r1, 80085b6 <forward_lite_dense_if32of32wf32+0x232>
 800858a:	edd3 6a00 	vldr	s13, [r3]
 800858e:	edd2 7a00 	vldr	s15, [r2]
 8008592:	3901      	subs	r1, #1
 8008594:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008598:	d00d      	beq.n	80085b6 <forward_lite_dense_if32of32wf32+0x232>
 800859a:	edd3 6a01 	vldr	s13, [r3, #4]
 800859e:	edd2 7a01 	vldr	s15, [r2, #4]
 80085a2:	2901      	cmp	r1, #1
 80085a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085a8:	d005      	beq.n	80085b6 <forward_lite_dense_if32of32wf32+0x232>
 80085aa:	edd2 6a02 	vldr	s13, [r2, #8]
 80085ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80085b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085b6:	444d      	add	r5, r9
 80085b8:	eca6 7a01 	vstmia	r6!, {s14}
 80085bc:	45b6      	cmp	lr, r6
 80085be:	f63f af09 	bhi.w	80083d4 <forward_lite_dense_if32of32wf32+0x50>
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	b99b      	cbnz	r3, 80085f0 <forward_lite_dense_if32of32wf32+0x26c>
 80085c8:	9b00      	ldr	r3, [sp, #0]
 80085ca:	9901      	ldr	r1, [sp, #4]
 80085cc:	693c      	ldr	r4, [r7, #16]
 80085ce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80085d2:	4299      	cmp	r1, r3
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 80085da:	ea4f 0682 	mov.w	r6, r2, lsl #2
 80085de:	f63f aee5 	bhi.w	80083ac <forward_lite_dense_if32of32wf32+0x28>
 80085e2:	b003      	add	sp, #12
 80085e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e8:	4621      	mov	r1, r4
 80085ea:	462a      	mov	r2, r5
 80085ec:	4643      	mov	r3, r8
 80085ee:	e769      	b.n	80084c4 <forward_lite_dense_if32of32wf32+0x140>
 80085f0:	2a00      	cmp	r2, #0
 80085f2:	d0e9      	beq.n	80085c8 <forward_lite_dense_if32of32wf32+0x244>
 80085f4:	9a00      	ldr	r2, [sp, #0]
 80085f6:	ed93 7a00 	vldr	s14, [r3]
 80085fa:	edd2 7a00 	vldr	s15, [r2]
 80085fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008602:	4613      	mov	r3, r2
 8008604:	edc2 7a00 	vstr	s15, [r2]
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	2a01      	cmp	r2, #1
 800860c:	d9dc      	bls.n	80085c8 <forward_lite_dense_if32of32wf32+0x244>
 800860e:	1d19      	adds	r1, r3, #4
 8008610:	2301      	movs	r3, #1
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	ed91 7a00 	vldr	s14, [r1]
 8008618:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800861c:	edd2 7a00 	vldr	s15, [r2]
 8008620:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008624:	3301      	adds	r3, #1
 8008626:	ece1 7a01 	vstmia	r1!, {s15}
 800862a:	697a      	ldr	r2, [r7, #20]
 800862c:	429a      	cmp	r2, r3
 800862e:	d8f0      	bhi.n	8008612 <forward_lite_dense_if32of32wf32+0x28e>
 8008630:	e7ca      	b.n	80085c8 <forward_lite_dense_if32of32wf32+0x244>
 8008632:	bf00      	nop
 8008634:	00000000 	.word	0x00000000

08008638 <forward_lite_dense_if32of32wf32_lut4>:
 8008638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863c:	b08d      	sub	sp, #52	@ 0x34
 800863e:	4605      	mov	r5, r0
 8008640:	9005      	str	r0, [sp, #20]
 8008642:	920a      	str	r2, [sp, #40]	@ 0x28
 8008644:	4618      	mov	r0, r3
 8008646:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 800864a:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800864c:	fb02 f303 	mul.w	r3, r2, r3
 8008650:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008654:	460c      	mov	r4, r1
 8008656:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8008658:	9308      	str	r3, [sp, #32]
 800865a:	b126      	cbz	r6, 8008666 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 800865c:	2240      	movs	r2, #64	@ 0x40
 800865e:	4631      	mov	r1, r6
 8008660:	f000 fa40 	bl	8008ae4 <st_int8_copy>
 8008664:	4630      	mov	r0, r6
 8008666:	9b05      	ldr	r3, [sp, #20]
 8008668:	9a08      	ldr	r2, [sp, #32]
 800866a:	4293      	cmp	r3, r2
 800866c:	f080 80f5 	bcs.w	800885a <forward_lite_dense_if32of32wf32_lut4+0x222>
 8008670:	08eb      	lsrs	r3, r5, #3
 8008672:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	f005 0101 	and.w	r1, r5, #1
 800867a:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	0092      	lsls	r2, r2, #2
 8008682:	f025 0801 	bic.w	r8, r5, #1
 8008686:	9102      	str	r1, [sp, #8]
 8008688:	9304      	str	r3, [sp, #16]
 800868a:	00a9      	lsls	r1, r5, #2
 800868c:	9b05      	ldr	r3, [sp, #20]
 800868e:	9207      	str	r2, [sp, #28]
 8008690:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8008694:	9109      	str	r1, [sp, #36]	@ 0x24
 8008696:	f104 0b20 	add.w	fp, r4, #32
 800869a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800869c:	9a07      	ldr	r2, [sp, #28]
 800869e:	eb03 0902 	add.w	r9, r3, r2
 80086a2:	4599      	cmp	r9, r3
 80086a4:	f1ab 0220 	sub.w	r2, fp, #32
 80086a8:	9206      	str	r2, [sp, #24]
 80086aa:	f240 80d9 	bls.w	8008860 <forward_lite_dense_if32of32wf32_lut4+0x228>
 80086ae:	469e      	mov	lr, r3
 80086b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086b2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80086b6:	9303      	str	r3, [sp, #12]
 80086b8:	9b01      	ldr	r3, [sp, #4]
 80086ba:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8008884 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f000 80b2 	beq.w	8008828 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 80086c4:	9b04      	ldr	r3, [sp, #16]
 80086c6:	18d5      	adds	r5, r2, r3
 80086c8:	465b      	mov	r3, fp
 80086ca:	7814      	ldrb	r4, [r2, #0]
 80086cc:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 80086d0:	7851      	ldrb	r1, [r2, #1]
 80086d2:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 80086d6:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 80086da:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 80086de:	ed13 5a04 	vldr	s10, [r3, #-16]
 80086e2:	ed53 5a03 	vldr	s11, [r3, #-12]
 80086e6:	ed13 6a02 	vldr	s12, [r3, #-8]
 80086ea:	ed53 6a01 	vldr	s13, [r3, #-4]
 80086ee:	f004 060f 	and.w	r6, r4, #15
 80086f2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80086f6:	edd6 7a00 	vldr	s15, [r6]
 80086fa:	0924      	lsrs	r4, r4, #4
 80086fc:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8008700:	ed94 3a00 	vldr	s6, [r4]
 8008704:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8008708:	090c      	lsrs	r4, r1, #4
 800870a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800870e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8008712:	f001 010f 	and.w	r1, r1, #15
 8008716:	edd4 3a00 	vldr	s7, [r4]
 800871a:	7894      	ldrb	r4, [r2, #2]
 800871c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008720:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008724:	0926      	lsrs	r6, r4, #4
 8008726:	ed91 4a00 	vldr	s8, [r1]
 800872a:	78d1      	ldrb	r1, [r2, #3]
 800872c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008730:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008734:	f004 040f 	and.w	r4, r4, #15
 8008738:	edd6 4a00 	vldr	s9, [r6]
 800873c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008740:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8008744:	3204      	adds	r2, #4
 8008746:	ed94 5a00 	vldr	s10, [r4]
 800874a:	090c      	lsrs	r4, r1, #4
 800874c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008750:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8008754:	f001 010f 	and.w	r1, r1, #15
 8008758:	edd4 5a00 	vldr	s11, [r4]
 800875c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008760:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008764:	42aa      	cmp	r2, r5
 8008766:	ed91 6a00 	vldr	s12, [r1]
 800876a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800876e:	f103 0320 	add.w	r3, r3, #32
 8008772:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008776:	d1a8      	bne.n	80086ca <forward_lite_dense_if32of32wf32_lut4+0x92>
 8008778:	4656      	mov	r6, sl
 800877a:	4546      	cmp	r6, r8
 800877c:	d258      	bcs.n	8008830 <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 800877e:	9b03      	ldr	r3, [sp, #12]
 8008780:	1b9c      	subs	r4, r3, r6
 8008782:	08e7      	lsrs	r7, r4, #3
 8008784:	f106 0208 	add.w	r2, r6, #8
 8008788:	1e69      	subs	r1, r5, #1
 800878a:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 800878e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008792:	ed52 5a01 	vldr	s11, [r2, #-4]
 8008796:	ed52 6a02 	vldr	s13, [r2, #-8]
 800879a:	f003 0c0f 	and.w	ip, r3, #15
 800879e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80087a2:	eddc 7a00 	vldr	s15, [ip]
 80087a6:	091b      	lsrs	r3, r3, #4
 80087a8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80087ac:	ed93 6a00 	vldr	s12, [r3]
 80087b0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80087b4:	42a1      	cmp	r1, r4
 80087b6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80087ba:	f102 0208 	add.w	r2, r2, #8
 80087be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087c2:	d1e4      	bne.n	800878e <forward_lite_dense_if32of32wf32_lut4+0x156>
 80087c4:	3701      	adds	r7, #1
 80087c6:	19ea      	adds	r2, r5, r7
 80087c8:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 80087cc:	9b02      	ldr	r3, [sp, #8]
 80087ce:	b30b      	cbz	r3, 8008814 <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 80087d0:	f812 3b01 	ldrb.w	r3, [r2], #1
 80087d4:	edd6 7a00 	vldr	s15, [r6]
 80087d8:	091b      	lsrs	r3, r3, #4
 80087da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80087de:	edd3 6a00 	vldr	s13, [r3]
 80087e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087e6:	ecae 7a01 	vstmia	lr!, {s14}
 80087ea:	45f1      	cmp	r9, lr
 80087ec:	f63f af64 	bhi.w	80086b8 <forward_lite_dense_if32of32wf32_lut4+0x80>
 80087f0:	9b05      	ldr	r3, [sp, #20]
 80087f2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80087f4:	1899      	adds	r1, r3, r2
 80087f6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80087f8:	b9e3      	cbnz	r3, 8008834 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 80087fa:	9b08      	ldr	r3, [sp, #32]
 80087fc:	428b      	cmp	r3, r1
 80087fe:	d92c      	bls.n	800885a <forward_lite_dense_if32of32wf32_lut4+0x222>
 8008800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008802:	4498      	add	r8, r3
 8008804:	449a      	add	sl, r3
 8008806:	449b      	add	fp, r3
 8008808:	9b05      	ldr	r3, [sp, #20]
 800880a:	4599      	cmp	r9, r3
 800880c:	d92a      	bls.n	8008864 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 800880e:	9105      	str	r1, [sp, #20]
 8008810:	460b      	mov	r3, r1
 8008812:	e743      	b.n	800869c <forward_lite_dense_if32of32wf32_lut4+0x64>
 8008814:	ecae 7a01 	vstmia	lr!, {s14}
 8008818:	45f1      	cmp	r9, lr
 800881a:	d9e9      	bls.n	80087f0 <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 800881c:	9b01      	ldr	r3, [sp, #4]
 800881e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008884 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 8008822:	2b00      	cmp	r3, #0
 8008824:	f47f af4e 	bne.w	80086c4 <forward_lite_dense_if32of32wf32_lut4+0x8c>
 8008828:	9e06      	ldr	r6, [sp, #24]
 800882a:	4546      	cmp	r6, r8
 800882c:	4615      	mov	r5, r2
 800882e:	d3a6      	bcc.n	800877e <forward_lite_dense_if32of32wf32_lut4+0x146>
 8008830:	462a      	mov	r2, r5
 8008832:	e7cb      	b.n	80087cc <forward_lite_dense_if32of32wf32_lut4+0x194>
 8008834:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0df      	beq.n	80087fa <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 800883a:	9b07      	ldr	r3, [sp, #28]
 800883c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800883e:	1acb      	subs	r3, r1, r3
 8008840:	edd3 7a00 	vldr	s15, [r3]
 8008844:	ecb2 7a01 	vldmia	r2!, {s14}
 8008848:	ee77 7a87 	vadd.f32	s15, s15, s14
 800884c:	ece3 7a01 	vstmia	r3!, {s15}
 8008850:	428b      	cmp	r3, r1
 8008852:	d1f5      	bne.n	8008840 <forward_lite_dense_if32of32wf32_lut4+0x208>
 8008854:	9b08      	ldr	r3, [sp, #32]
 8008856:	428b      	cmp	r3, r1
 8008858:	d8d2      	bhi.n	8008800 <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 800885a:	b00d      	add	sp, #52	@ 0x34
 800885c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008860:	4619      	mov	r1, r3
 8008862:	e7c8      	b.n	80087f6 <forward_lite_dense_if32of32wf32_lut4+0x1be>
 8008864:	9b07      	ldr	r3, [sp, #28]
 8008866:	1acb      	subs	r3, r1, r3
 8008868:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800886a:	461a      	mov	r2, r3
 800886c:	ed92 7a00 	vldr	s14, [r2]
 8008870:	ecf0 7a01 	vldmia	r0!, {s15}
 8008874:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008878:	ece2 7a01 	vstmia	r2!, {s15}
 800887c:	428a      	cmp	r2, r1
 800887e:	d1f5      	bne.n	800886c <forward_lite_dense_if32of32wf32_lut4+0x234>
 8008880:	e7f2      	b.n	8008868 <forward_lite_dense_if32of32wf32_lut4+0x230>
 8008882:	bf00      	nop
 8008884:	00000000 	.word	0x00000000

08008888 <forward_lite_dense_if32of32wf32_lut8>:
 8008888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888c:	b087      	sub	sp, #28
 800888e:	460f      	mov	r7, r1
 8008890:	9204      	str	r2, [sp, #16]
 8008892:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	@ 0x4c
 8008896:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008898:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800889a:	fb01 f202 	mul.w	r2, r1, r2
 800889e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80088a2:	4605      	mov	r5, r0
 80088a4:	9202      	str	r2, [sp, #8]
 80088a6:	b136      	cbz	r6, 80088b6 <forward_lite_dense_if32of32wf32_lut8+0x2e>
 80088a8:	4618      	mov	r0, r3
 80088aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80088ae:	4631      	mov	r1, r6
 80088b0:	f000 f918 	bl	8008ae4 <st_int8_copy>
 80088b4:	4633      	mov	r3, r6
 80088b6:	9a02      	ldr	r2, [sp, #8]
 80088b8:	4295      	cmp	r5, r2
 80088ba:	f080 80f9 	bcs.w	8008ab0 <forward_lite_dense_if32of32wf32_lut8+0x228>
 80088be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088c0:	0092      	lsls	r2, r2, #2
 80088c2:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 80088c6:	9201      	str	r2, [sp, #4]
 80088c8:	9205      	str	r2, [sp, #20]
 80088ca:	462a      	mov	r2, r5
 80088cc:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 80088d0:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 80088d4:	464d      	mov	r5, r9
 80088d6:	4691      	mov	r9, r2
 80088d8:	9a01      	ldr	r2, [sp, #4]
 80088da:	eb09 0e02 	add.w	lr, r9, r2
 80088de:	00a1      	lsls	r1, r4, #2
 80088e0:	3720      	adds	r7, #32
 80088e2:	45ce      	cmp	lr, r9
 80088e4:	f004 0007 	and.w	r0, r4, #7
 80088e8:	9103      	str	r1, [sp, #12]
 80088ea:	f1a7 0b20 	sub.w	fp, r7, #32
 80088ee:	f240 80c8 	bls.w	8008a82 <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 80088f2:	9a04      	ldr	r2, [sp, #16]
 80088f4:	46cc      	mov	ip, r9
 80088f6:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8008ae0 <forward_lite_dense_if32of32wf32_lut8+0x258>
 80088fa:	2d00      	cmp	r5, #0
 80088fc:	f000 80dd 	beq.w	8008aba <forward_lite_dense_if32of32wf32_lut8+0x232>
 8008900:	eb02 060a 	add.w	r6, r2, sl
 8008904:	4639      	mov	r1, r7
 8008906:	7854      	ldrb	r4, [r2, #1]
 8008908:	ed11 3a07 	vldr	s6, [r1, #-28]	@ 0xffffffe4
 800890c:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 8008910:	ed11 4a06 	vldr	s8, [r1, #-24]	@ 0xffffffe8
 8008914:	ed51 4a05 	vldr	s9, [r1, #-20]	@ 0xffffffec
 8008918:	ed11 5a04 	vldr	s10, [r1, #-16]
 800891c:	ed51 5a03 	vldr	s11, [r1, #-12]
 8008920:	ed11 6a02 	vldr	s12, [r1, #-8]
 8008924:	ed51 6a01 	vldr	s13, [r1, #-4]
 8008928:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800892c:	edd4 7a00 	vldr	s15, [r4]
 8008930:	7814      	ldrb	r4, [r2, #0]
 8008932:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008936:	ee67 7a83 	vmul.f32	s15, s15, s6
 800893a:	ed94 3a00 	vldr	s6, [r4]
 800893e:	7894      	ldrb	r4, [r2, #2]
 8008940:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008944:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008948:	3208      	adds	r2, #8
 800894a:	edd4 3a00 	vldr	s7, [r4]
 800894e:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 8008952:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008956:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800895a:	3120      	adds	r1, #32
 800895c:	ed94 4a00 	vldr	s8, [r4]
 8008960:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 8008964:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008968:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800896c:	edd4 4a00 	vldr	s9, [r4]
 8008970:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 8008974:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008978:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800897c:	ed94 5a00 	vldr	s10, [r4]
 8008980:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 8008984:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008988:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800898c:	edd4 5a00 	vldr	s11, [r4]
 8008990:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 8008994:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008998:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800899c:	42b2      	cmp	r2, r6
 800899e:	ed94 6a00 	vldr	s12, [r4]
 80089a2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80089a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80089aa:	d1ac      	bne.n	8008906 <forward_lite_dense_if32of32wf32_lut8+0x7e>
 80089ac:	4642      	mov	r2, r8
 80089ae:	2800      	cmp	r0, #0
 80089b0:	f000 8081 	beq.w	8008ab6 <forward_lite_dense_if32of32wf32_lut8+0x22e>
 80089b4:	7831      	ldrb	r1, [r6, #0]
 80089b6:	edd2 7a00 	vldr	s15, [r2]
 80089ba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80089be:	edd1 6a00 	vldr	s13, [r1]
 80089c2:	2801      	cmp	r0, #1
 80089c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089c8:	d03f      	beq.n	8008a4a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80089ca:	7871      	ldrb	r1, [r6, #1]
 80089cc:	edd2 7a01 	vldr	s15, [r2, #4]
 80089d0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80089d4:	edd1 6a00 	vldr	s13, [r1]
 80089d8:	2802      	cmp	r0, #2
 80089da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089de:	d034      	beq.n	8008a4a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80089e0:	78b1      	ldrb	r1, [r6, #2]
 80089e2:	edd2 7a02 	vldr	s15, [r2, #8]
 80089e6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80089ea:	edd1 6a00 	vldr	s13, [r1]
 80089ee:	2803      	cmp	r0, #3
 80089f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089f4:	d029      	beq.n	8008a4a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80089f6:	78f1      	ldrb	r1, [r6, #3]
 80089f8:	edd2 6a03 	vldr	s13, [r2, #12]
 80089fc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008a00:	edd1 7a00 	vldr	s15, [r1]
 8008a04:	2804      	cmp	r0, #4
 8008a06:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a0a:	d01e      	beq.n	8008a4a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8008a0c:	7931      	ldrb	r1, [r6, #4]
 8008a0e:	edd2 6a04 	vldr	s13, [r2, #16]
 8008a12:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008a16:	edd1 7a00 	vldr	s15, [r1]
 8008a1a:	2805      	cmp	r0, #5
 8008a1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a20:	d013      	beq.n	8008a4a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8008a22:	7971      	ldrb	r1, [r6, #5]
 8008a24:	edd2 6a05 	vldr	s13, [r2, #20]
 8008a28:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008a2c:	edd1 7a00 	vldr	s15, [r1]
 8008a30:	2806      	cmp	r0, #6
 8008a32:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a36:	d008      	beq.n	8008a4a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8008a38:	edd2 7a06 	vldr	s15, [r2, #24]
 8008a3c:	79b2      	ldrb	r2, [r6, #6]
 8008a3e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8008a42:	edd2 6a00 	vldr	s13, [r2]
 8008a46:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a4a:	1832      	adds	r2, r6, r0
 8008a4c:	ecac 7a01 	vstmia	ip!, {s14}
 8008a50:	45e6      	cmp	lr, ip
 8008a52:	f63f af50 	bhi.w	80088f6 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8008a56:	9a05      	ldr	r2, [sp, #20]
 8008a58:	eb09 0402 	add.w	r4, r9, r2
 8008a5c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008a5e:	b9a2      	cbnz	r2, 8008a8a <forward_lite_dense_if32of32wf32_lut8+0x202>
 8008a60:	9a02      	ldr	r2, [sp, #8]
 8008a62:	42a2      	cmp	r2, r4
 8008a64:	d924      	bls.n	8008ab0 <forward_lite_dense_if32of32wf32_lut8+0x228>
 8008a66:	9a03      	ldr	r2, [sp, #12]
 8008a68:	45ce      	cmp	lr, r9
 8008a6a:	4490      	add	r8, r2
 8008a6c:	4417      	add	r7, r2
 8008a6e:	d927      	bls.n	8008ac0 <forward_lite_dense_if32of32wf32_lut8+0x238>
 8008a70:	9a01      	ldr	r2, [sp, #4]
 8008a72:	46a1      	mov	r9, r4
 8008a74:	eb09 0e02 	add.w	lr, r9, r2
 8008a78:	45ce      	cmp	lr, r9
 8008a7a:	f1a7 0b20 	sub.w	fp, r7, #32
 8008a7e:	f63f af38 	bhi.w	80088f2 <forward_lite_dense_if32of32wf32_lut8+0x6a>
 8008a82:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008a84:	464c      	mov	r4, r9
 8008a86:	2a00      	cmp	r2, #0
 8008a88:	d0ea      	beq.n	8008a60 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 8008a8a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008a8c:	2a00      	cmp	r2, #0
 8008a8e:	d0e7      	beq.n	8008a60 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 8008a90:	9a01      	ldr	r2, [sp, #4]
 8008a92:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008a94:	1aa2      	subs	r2, r4, r2
 8008a96:	edd2 7a00 	vldr	s15, [r2]
 8008a9a:	ecb1 7a01 	vldmia	r1!, {s14}
 8008a9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008aa2:	ece2 7a01 	vstmia	r2!, {s15}
 8008aa6:	4294      	cmp	r4, r2
 8008aa8:	d1f5      	bne.n	8008a96 <forward_lite_dense_if32of32wf32_lut8+0x20e>
 8008aaa:	9a02      	ldr	r2, [sp, #8]
 8008aac:	42a2      	cmp	r2, r4
 8008aae:	d8da      	bhi.n	8008a66 <forward_lite_dense_if32of32wf32_lut8+0x1de>
 8008ab0:	b007      	add	sp, #28
 8008ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab6:	4632      	mov	r2, r6
 8008ab8:	e7c8      	b.n	8008a4c <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 8008aba:	4616      	mov	r6, r2
 8008abc:	465a      	mov	r2, fp
 8008abe:	e776      	b.n	80089ae <forward_lite_dense_if32of32wf32_lut8+0x126>
 8008ac0:	9b01      	ldr	r3, [sp, #4]
 8008ac2:	1ae3      	subs	r3, r4, r3
 8008ac4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	ed92 7a00 	vldr	s14, [r2]
 8008acc:	ecf1 7a01 	vldmia	r1!, {s15}
 8008ad0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ad4:	ece2 7a01 	vstmia	r2!, {s15}
 8008ad8:	42a2      	cmp	r2, r4
 8008ada:	d1f5      	bne.n	8008ac8 <forward_lite_dense_if32of32wf32_lut8+0x240>
 8008adc:	e7f2      	b.n	8008ac4 <forward_lite_dense_if32of32wf32_lut8+0x23c>
 8008ade:	bf00      	nop
 8008ae0:	00000000 	.word	0x00000000

08008ae4 <st_int8_copy>:
 8008ae4:	4288      	cmp	r0, r1
 8008ae6:	d022      	beq.n	8008b2e <st_int8_copy+0x4a>
 8008ae8:	b30a      	cbz	r2, 8008b2e <st_int8_copy+0x4a>
 8008aea:	4288      	cmp	r0, r1
 8008aec:	d312      	bcc.n	8008b14 <st_int8_copy+0x30>
 8008aee:	2a03      	cmp	r2, #3
 8008af0:	d81e      	bhi.n	8008b30 <st_int8_copy+0x4c>
 8008af2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008af6:	f801 3b01 	strb.w	r3, [r1], #1
 8008afa:	2a01      	cmp	r2, #1
 8008afc:	d017      	beq.n	8008b2e <st_int8_copy+0x4a>
 8008afe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008b02:	f801 3b01 	strb.w	r3, [r1], #1
 8008b06:	2a02      	cmp	r2, #2
 8008b08:	d011      	beq.n	8008b2e <st_int8_copy+0x4a>
 8008b0a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008b0e:	f801 3b01 	strb.w	r3, [r1], #1
 8008b12:	4770      	bx	lr
 8008b14:	1883      	adds	r3, r0, r2
 8008b16:	4299      	cmp	r1, r3
 8008b18:	d2e9      	bcs.n	8008aee <st_int8_copy+0xa>
 8008b1a:	4298      	cmp	r0, r3
 8008b1c:	440a      	add	r2, r1
 8008b1e:	d206      	bcs.n	8008b2e <st_int8_copy+0x4a>
 8008b20:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8008b24:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8008b28:	4298      	cmp	r0, r3
 8008b2a:	d1f9      	bne.n	8008b20 <st_int8_copy+0x3c>
 8008b2c:	4770      	bx	lr
 8008b2e:	4770      	bx	lr
 8008b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b34:	f001 0403 	and.w	r4, r1, #3
 8008b38:	f1c4 0304 	rsb	r3, r4, #4
 8008b3c:	f000 0e03 	and.w	lr, r0, #3
 8008b40:	eba2 0c03 	sub.w	ip, r2, r3
 8008b44:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008b48:	f801 3b01 	strb.w	r3, [r1], #1
 8008b4c:	2c03      	cmp	r4, #3
 8008b4e:	f1c4 0202 	rsb	r2, r4, #2
 8008b52:	d00e      	beq.n	8008b72 <st_int8_copy+0x8e>
 8008b54:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008b58:	f801 3b01 	strb.w	r3, [r1], #1
 8008b5c:	2a00      	cmp	r2, #0
 8008b5e:	dd08      	ble.n	8008b72 <st_int8_copy+0x8e>
 8008b60:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008b64:	f801 3b01 	strb.w	r3, [r1], #1
 8008b68:	b91c      	cbnz	r4, 8008b72 <st_int8_copy+0x8e>
 8008b6a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008b6e:	f801 3b01 	strb.w	r3, [r1], #1
 8008b72:	4574      	cmp	r4, lr
 8008b74:	d02b      	beq.n	8008bce <st_int8_copy+0xea>
 8008b76:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8008b7a:	1e5a      	subs	r2, r3, #1
 8008b7c:	b153      	cbz	r3, 8008b94 <st_int8_copy+0xb0>
 8008b7e:	f850 3b04 	ldr.w	r3, [r0], #4
 8008b82:	f850 4b04 	ldr.w	r4, [r0], #4
 8008b86:	f850 5b04 	ldr.w	r5, [r0], #4
 8008b8a:	f850 6b04 	ldr.w	r6, [r0], #4
 8008b8e:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8008b90:	3a01      	subs	r2, #1
 8008b92:	d2f4      	bcs.n	8008b7e <st_int8_copy+0x9a>
 8008b94:	f01c 0f08 	tst.w	ip, #8
 8008b98:	d004      	beq.n	8008ba4 <st_int8_copy+0xc0>
 8008b9a:	f850 3b04 	ldr.w	r3, [r0], #4
 8008b9e:	f850 4b04 	ldr.w	r4, [r0], #4
 8008ba2:	c118      	stmia	r1!, {r3, r4}
 8008ba4:	f01c 0f04 	tst.w	ip, #4
 8008ba8:	d003      	beq.n	8008bb2 <st_int8_copy+0xce>
 8008baa:	f850 3b04 	ldr.w	r3, [r0], #4
 8008bae:	f841 3b04 	str.w	r3, [r1], #4
 8008bb2:	f01c 0f02 	tst.w	ip, #2
 8008bb6:	d003      	beq.n	8008bc0 <st_int8_copy+0xdc>
 8008bb8:	f830 3b02 	ldrh.w	r3, [r0], #2
 8008bbc:	f821 3b02 	strh.w	r3, [r1], #2
 8008bc0:	f01c 0f01 	tst.w	ip, #1
 8008bc4:	d001      	beq.n	8008bca <st_int8_copy+0xe6>
 8008bc6:	7803      	ldrb	r3, [r0, #0]
 8008bc8:	700b      	strb	r3, [r1, #0]
 8008bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bce:	ea4f 139c 	mov.w	r3, ip, lsr #6
 8008bd2:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
 8008bd6:	b183      	cbz	r3, 8008bfa <st_int8_copy+0x116>
 8008bd8:	4688      	mov	r8, r1
 8008bda:	4686      	mov	lr, r0
 8008bdc:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008be0:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008be4:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008be8:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008bec:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8008bf0:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8008bf4:	4641      	mov	r1, r8
 8008bf6:	4670      	mov	r0, lr
 8008bf8:	d1ee      	bne.n	8008bd8 <st_int8_copy+0xf4>
 8008bfa:	f01c 0f20 	tst.w	ip, #32
 8008bfe:	d007      	beq.n	8008c10 <st_int8_copy+0x12c>
 8008c00:	4688      	mov	r8, r1
 8008c02:	4686      	mov	lr, r0
 8008c04:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008c08:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008c0c:	4641      	mov	r1, r8
 8008c0e:	4670      	mov	r0, lr
 8008c10:	f01c 0f10 	tst.w	ip, #16
 8008c14:	d001      	beq.n	8008c1a <st_int8_copy+0x136>
 8008c16:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8008c18:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8008c1a:	f01c 0f08 	tst.w	ip, #8
 8008c1e:	d0c1      	beq.n	8008ba4 <st_int8_copy+0xc0>
 8008c20:	c818      	ldmia	r0!, {r3, r4}
 8008c22:	c118      	stmia	r1!, {r3, r4}
 8008c24:	e7be      	b.n	8008ba4 <st_int8_copy+0xc0>
 8008c26:	bf00      	nop

08008c28 <ai_array_to_buffer_fmt>:
 8008c28:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d055      	beq.n	8008cdc <ai_array_to_buffer_fmt+0xb4>
 8008c30:	4a2d      	ldr	r2, [pc, #180]	@ (8008ce8 <ai_array_to_buffer_fmt+0xc0>)
 8008c32:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d010      	beq.n	8008c5c <ai_array_to_buffer_fmt+0x34>
 8008c3a:	dc21      	bgt.n	8008c80 <ai_array_to_buffer_fmt+0x58>
 8008c3c:	4a2b      	ldr	r2, [pc, #172]	@ (8008cec <ai_array_to_buffer_fmt+0xc4>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d00c      	beq.n	8008c5c <ai_array_to_buffer_fmt+0x34>
 8008c42:	dd0f      	ble.n	8008c64 <ai_array_to_buffer_fmt+0x3c>
 8008c44:	4a2a      	ldr	r2, [pc, #168]	@ (8008cf0 <ai_array_to_buffer_fmt+0xc8>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d008      	beq.n	8008c5c <ai_array_to_buffer_fmt+0x34>
 8008c4a:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d004      	beq.n	8008c5c <ai_array_to_buffer_fmt+0x34>
 8008c52:	4a28      	ldr	r2, [pc, #160]	@ (8008cf4 <ai_array_to_buffer_fmt+0xcc>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	bf0c      	ite	eq
 8008c58:	4613      	moveq	r3, r2
 8008c5a:	2340      	movne	r3, #64	@ 0x40
 8008c5c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008c60:	4318      	orrs	r0, r3
 8008c62:	4770      	bx	lr
 8008c64:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d0f7      	beq.n	8008c5c <ai_array_to_buffer_fmt+0x34>
 8008c6c:	dd2c      	ble.n	8008cc8 <ai_array_to_buffer_fmt+0xa0>
 8008c6e:	4a22      	ldr	r2, [pc, #136]	@ (8008cf8 <ai_array_to_buffer_fmt+0xd0>)
 8008c70:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008c74:	4293      	cmp	r3, r2
 8008c76:	bf0c      	ite	eq
 8008c78:	4613      	moveq	r3, r2
 8008c7a:	2340      	movne	r3, #64	@ 0x40
 8008c7c:	4318      	orrs	r0, r3
 8008c7e:	4770      	bx	lr
 8008c80:	4a1e      	ldr	r2, [pc, #120]	@ (8008cfc <ai_array_to_buffer_fmt+0xd4>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d0ea      	beq.n	8008c5c <ai_array_to_buffer_fmt+0x34>
 8008c86:	dd10      	ble.n	8008caa <ai_array_to_buffer_fmt+0x82>
 8008c88:	4a1d      	ldr	r2, [pc, #116]	@ (8008d00 <ai_array_to_buffer_fmt+0xd8>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d0e6      	beq.n	8008c5c <ai_array_to_buffer_fmt+0x34>
 8008c8e:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d0e2      	beq.n	8008c5c <ai_array_to_buffer_fmt+0x34>
 8008c96:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	bf0c      	ite	eq
 8008c9e:	4613      	moveq	r3, r2
 8008ca0:	2340      	movne	r3, #64	@ 0x40
 8008ca2:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008ca6:	4318      	orrs	r0, r3
 8008ca8:	4770      	bx	lr
 8008caa:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d0d4      	beq.n	8008c5c <ai_array_to_buffer_fmt+0x34>
 8008cb2:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d0d0      	beq.n	8008c5c <ai_array_to_buffer_fmt+0x34>
 8008cba:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	bf0c      	ite	eq
 8008cc2:	4613      	moveq	r3, r2
 8008cc4:	2340      	movne	r3, #64	@ 0x40
 8008cc6:	e7c9      	b.n	8008c5c <ai_array_to_buffer_fmt+0x34>
 8008cc8:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d0c5      	beq.n	8008c5c <ai_array_to_buffer_fmt+0x34>
 8008cd0:	3280      	adds	r2, #128	@ 0x80
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	bf0c      	ite	eq
 8008cd6:	4613      	moveq	r3, r2
 8008cd8:	2340      	movne	r3, #64	@ 0x40
 8008cda:	e7bf      	b.n	8008c5c <ai_array_to_buffer_fmt+0x34>
 8008cdc:	4b09      	ldr	r3, [pc, #36]	@ (8008d04 <ai_array_to_buffer_fmt+0xdc>)
 8008cde:	4003      	ands	r3, r0
 8008ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008ce4:	e7ba      	b.n	8008c5c <ai_array_to_buffer_fmt+0x34>
 8008ce6:	bf00      	nop
 8008ce8:	00821040 	.word	0x00821040
 8008cec:	00040840 	.word	0x00040840
 8008cf0:	00041040 	.word	0x00041040
 8008cf4:	0004084f 	.word	0x0004084f
 8008cf8:	00040447 	.word	0x00040447
 8008cfc:	00840447 	.word	0x00840447
 8008d00:	0084084f 	.word	0x0084084f
 8008d04:	00803fff 	.word	0x00803fff

08008d08 <ai_array_get_data_byte_size>:
 8008d08:	b169      	cbz	r1, 8008d26 <ai_array_get_data_byte_size+0x1e>
 8008d0a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008d0e:	fb03 f101 	mul.w	r1, r3, r1
 8008d12:	1dcb      	adds	r3, r1, #7
 8008d14:	f023 0307 	bic.w	r3, r3, #7
 8008d18:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8008d1c:	fa23 f000 	lsr.w	r0, r3, r0
 8008d20:	3007      	adds	r0, #7
 8008d22:	08c0      	lsrs	r0, r0, #3
 8008d24:	4770      	bx	lr
 8008d26:	4608      	mov	r0, r1
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop

08008d2c <ai_version_get>:
 8008d2c:	0212      	lsls	r2, r2, #8
 8008d2e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008d32:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8008d36:	4770      	bx	lr

08008d38 <get_tensor_byte_size>:
 8008d38:	b410      	push	{r4}
 8008d3a:	6983      	ldr	r3, [r0, #24]
 8008d3c:	68c4      	ldr	r4, [r0, #12]
 8008d3e:	6941      	ldr	r1, [r0, #20]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68e0      	ldr	r0, [r4, #12]
 8008d44:	4a07      	ldr	r2, [pc, #28]	@ (8008d64 <get_tensor_byte_size+0x2c>)
 8008d46:	68c9      	ldr	r1, [r1, #12]
 8008d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d4c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8008d50:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008d54:	fb01 f000 	mul.w	r0, r1, r0
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	bf04      	itt	eq
 8008d5c:	3007      	addeq	r0, #7
 8008d5e:	08c0      	lsreq	r0, r0, #3
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	000400c0 	.word	0x000400c0

08008d68 <sbrk_aligned>:
 8008d68:	b570      	push	{r4, r5, r6, lr}
 8008d6a:	4e0f      	ldr	r6, [pc, #60]	@ (8008da8 <sbrk_aligned+0x40>)
 8008d6c:	460c      	mov	r4, r1
 8008d6e:	6831      	ldr	r1, [r6, #0]
 8008d70:	4605      	mov	r5, r0
 8008d72:	b911      	cbnz	r1, 8008d7a <sbrk_aligned+0x12>
 8008d74:	f000 f9e0 	bl	8009138 <_sbrk_r>
 8008d78:	6030      	str	r0, [r6, #0]
 8008d7a:	4621      	mov	r1, r4
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	f000 f9db 	bl	8009138 <_sbrk_r>
 8008d82:	1c43      	adds	r3, r0, #1
 8008d84:	d103      	bne.n	8008d8e <sbrk_aligned+0x26>
 8008d86:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	bd70      	pop	{r4, r5, r6, pc}
 8008d8e:	1cc4      	adds	r4, r0, #3
 8008d90:	f024 0403 	bic.w	r4, r4, #3
 8008d94:	42a0      	cmp	r0, r4
 8008d96:	d0f8      	beq.n	8008d8a <sbrk_aligned+0x22>
 8008d98:	1a21      	subs	r1, r4, r0
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f000 f9cc 	bl	8009138 <_sbrk_r>
 8008da0:	3001      	adds	r0, #1
 8008da2:	d1f2      	bne.n	8008d8a <sbrk_aligned+0x22>
 8008da4:	e7ef      	b.n	8008d86 <sbrk_aligned+0x1e>
 8008da6:	bf00      	nop
 8008da8:	2000150c 	.word	0x2000150c

08008dac <_malloc_r>:
 8008dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db0:	1ccd      	adds	r5, r1, #3
 8008db2:	f025 0503 	bic.w	r5, r5, #3
 8008db6:	3508      	adds	r5, #8
 8008db8:	2d0c      	cmp	r5, #12
 8008dba:	bf38      	it	cc
 8008dbc:	250c      	movcc	r5, #12
 8008dbe:	2d00      	cmp	r5, #0
 8008dc0:	4606      	mov	r6, r0
 8008dc2:	db01      	blt.n	8008dc8 <_malloc_r+0x1c>
 8008dc4:	42a9      	cmp	r1, r5
 8008dc6:	d904      	bls.n	8008dd2 <_malloc_r+0x26>
 8008dc8:	230c      	movs	r3, #12
 8008dca:	6033      	str	r3, [r6, #0]
 8008dcc:	2000      	movs	r0, #0
 8008dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ea8 <_malloc_r+0xfc>
 8008dd6:	f000 f869 	bl	8008eac <__malloc_lock>
 8008dda:	f8d8 3000 	ldr.w	r3, [r8]
 8008dde:	461c      	mov	r4, r3
 8008de0:	bb44      	cbnz	r4, 8008e34 <_malloc_r+0x88>
 8008de2:	4629      	mov	r1, r5
 8008de4:	4630      	mov	r0, r6
 8008de6:	f7ff ffbf 	bl	8008d68 <sbrk_aligned>
 8008dea:	1c43      	adds	r3, r0, #1
 8008dec:	4604      	mov	r4, r0
 8008dee:	d158      	bne.n	8008ea2 <_malloc_r+0xf6>
 8008df0:	f8d8 4000 	ldr.w	r4, [r8]
 8008df4:	4627      	mov	r7, r4
 8008df6:	2f00      	cmp	r7, #0
 8008df8:	d143      	bne.n	8008e82 <_malloc_r+0xd6>
 8008dfa:	2c00      	cmp	r4, #0
 8008dfc:	d04b      	beq.n	8008e96 <_malloc_r+0xea>
 8008dfe:	6823      	ldr	r3, [r4, #0]
 8008e00:	4639      	mov	r1, r7
 8008e02:	4630      	mov	r0, r6
 8008e04:	eb04 0903 	add.w	r9, r4, r3
 8008e08:	f000 f996 	bl	8009138 <_sbrk_r>
 8008e0c:	4581      	cmp	r9, r0
 8008e0e:	d142      	bne.n	8008e96 <_malloc_r+0xea>
 8008e10:	6821      	ldr	r1, [r4, #0]
 8008e12:	1a6d      	subs	r5, r5, r1
 8008e14:	4629      	mov	r1, r5
 8008e16:	4630      	mov	r0, r6
 8008e18:	f7ff ffa6 	bl	8008d68 <sbrk_aligned>
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d03a      	beq.n	8008e96 <_malloc_r+0xea>
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	442b      	add	r3, r5
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	f8d8 3000 	ldr.w	r3, [r8]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	bb62      	cbnz	r2, 8008e88 <_malloc_r+0xdc>
 8008e2e:	f8c8 7000 	str.w	r7, [r8]
 8008e32:	e00f      	b.n	8008e54 <_malloc_r+0xa8>
 8008e34:	6822      	ldr	r2, [r4, #0]
 8008e36:	1b52      	subs	r2, r2, r5
 8008e38:	d420      	bmi.n	8008e7c <_malloc_r+0xd0>
 8008e3a:	2a0b      	cmp	r2, #11
 8008e3c:	d917      	bls.n	8008e6e <_malloc_r+0xc2>
 8008e3e:	1961      	adds	r1, r4, r5
 8008e40:	42a3      	cmp	r3, r4
 8008e42:	6025      	str	r5, [r4, #0]
 8008e44:	bf18      	it	ne
 8008e46:	6059      	strne	r1, [r3, #4]
 8008e48:	6863      	ldr	r3, [r4, #4]
 8008e4a:	bf08      	it	eq
 8008e4c:	f8c8 1000 	streq.w	r1, [r8]
 8008e50:	5162      	str	r2, [r4, r5]
 8008e52:	604b      	str	r3, [r1, #4]
 8008e54:	4630      	mov	r0, r6
 8008e56:	f000 f82f 	bl	8008eb8 <__malloc_unlock>
 8008e5a:	f104 000b 	add.w	r0, r4, #11
 8008e5e:	1d23      	adds	r3, r4, #4
 8008e60:	f020 0007 	bic.w	r0, r0, #7
 8008e64:	1ac2      	subs	r2, r0, r3
 8008e66:	bf1c      	itt	ne
 8008e68:	1a1b      	subne	r3, r3, r0
 8008e6a:	50a3      	strne	r3, [r4, r2]
 8008e6c:	e7af      	b.n	8008dce <_malloc_r+0x22>
 8008e6e:	6862      	ldr	r2, [r4, #4]
 8008e70:	42a3      	cmp	r3, r4
 8008e72:	bf0c      	ite	eq
 8008e74:	f8c8 2000 	streq.w	r2, [r8]
 8008e78:	605a      	strne	r2, [r3, #4]
 8008e7a:	e7eb      	b.n	8008e54 <_malloc_r+0xa8>
 8008e7c:	4623      	mov	r3, r4
 8008e7e:	6864      	ldr	r4, [r4, #4]
 8008e80:	e7ae      	b.n	8008de0 <_malloc_r+0x34>
 8008e82:	463c      	mov	r4, r7
 8008e84:	687f      	ldr	r7, [r7, #4]
 8008e86:	e7b6      	b.n	8008df6 <_malloc_r+0x4a>
 8008e88:	461a      	mov	r2, r3
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	42a3      	cmp	r3, r4
 8008e8e:	d1fb      	bne.n	8008e88 <_malloc_r+0xdc>
 8008e90:	2300      	movs	r3, #0
 8008e92:	6053      	str	r3, [r2, #4]
 8008e94:	e7de      	b.n	8008e54 <_malloc_r+0xa8>
 8008e96:	230c      	movs	r3, #12
 8008e98:	6033      	str	r3, [r6, #0]
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f000 f80c 	bl	8008eb8 <__malloc_unlock>
 8008ea0:	e794      	b.n	8008dcc <_malloc_r+0x20>
 8008ea2:	6005      	str	r5, [r0, #0]
 8008ea4:	e7d6      	b.n	8008e54 <_malloc_r+0xa8>
 8008ea6:	bf00      	nop
 8008ea8:	20001510 	.word	0x20001510

08008eac <__malloc_lock>:
 8008eac:	4801      	ldr	r0, [pc, #4]	@ (8008eb4 <__malloc_lock+0x8>)
 8008eae:	f000 b97e 	b.w	80091ae <__retarget_lock_acquire_recursive>
 8008eb2:	bf00      	nop
 8008eb4:	20001650 	.word	0x20001650

08008eb8 <__malloc_unlock>:
 8008eb8:	4801      	ldr	r0, [pc, #4]	@ (8008ec0 <__malloc_unlock+0x8>)
 8008eba:	f000 b979 	b.w	80091b0 <__retarget_lock_release_recursive>
 8008ebe:	bf00      	nop
 8008ec0:	20001650 	.word	0x20001650

08008ec4 <std>:
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	b510      	push	{r4, lr}
 8008ec8:	4604      	mov	r4, r0
 8008eca:	e9c0 3300 	strd	r3, r3, [r0]
 8008ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ed2:	6083      	str	r3, [r0, #8]
 8008ed4:	8181      	strh	r1, [r0, #12]
 8008ed6:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ed8:	81c2      	strh	r2, [r0, #14]
 8008eda:	6183      	str	r3, [r0, #24]
 8008edc:	4619      	mov	r1, r3
 8008ede:	2208      	movs	r2, #8
 8008ee0:	305c      	adds	r0, #92	@ 0x5c
 8008ee2:	f000 f921 	bl	8009128 <memset>
 8008ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8008f1c <std+0x58>)
 8008ee8:	6263      	str	r3, [r4, #36]	@ 0x24
 8008eea:	4b0d      	ldr	r3, [pc, #52]	@ (8008f20 <std+0x5c>)
 8008eec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008eee:	4b0d      	ldr	r3, [pc, #52]	@ (8008f24 <std+0x60>)
 8008ef0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f28 <std+0x64>)
 8008ef4:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8008f2c <std+0x68>)
 8008ef8:	6224      	str	r4, [r4, #32]
 8008efa:	429c      	cmp	r4, r3
 8008efc:	d006      	beq.n	8008f0c <std+0x48>
 8008efe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f02:	4294      	cmp	r4, r2
 8008f04:	d002      	beq.n	8008f0c <std+0x48>
 8008f06:	33d0      	adds	r3, #208	@ 0xd0
 8008f08:	429c      	cmp	r4, r3
 8008f0a:	d105      	bne.n	8008f18 <std+0x54>
 8008f0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f14:	f000 b94a 	b.w	80091ac <__retarget_lock_init_recursive>
 8008f18:	bd10      	pop	{r4, pc}
 8008f1a:	bf00      	nop
 8008f1c:	08009941 	.word	0x08009941
 8008f20:	08009963 	.word	0x08009963
 8008f24:	0800999b 	.word	0x0800999b
 8008f28:	080099bf 	.word	0x080099bf
 8008f2c:	20001514 	.word	0x20001514

08008f30 <stdio_exit_handler>:
 8008f30:	4a02      	ldr	r2, [pc, #8]	@ (8008f3c <stdio_exit_handler+0xc>)
 8008f32:	4903      	ldr	r1, [pc, #12]	@ (8008f40 <stdio_exit_handler+0x10>)
 8008f34:	4803      	ldr	r0, [pc, #12]	@ (8008f44 <stdio_exit_handler+0x14>)
 8008f36:	f000 b869 	b.w	800900c <_fwalk_sglue>
 8008f3a:	bf00      	nop
 8008f3c:	20000920 	.word	0x20000920
 8008f40:	080098f1 	.word	0x080098f1
 8008f44:	20000930 	.word	0x20000930

08008f48 <cleanup_stdio>:
 8008f48:	6841      	ldr	r1, [r0, #4]
 8008f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8008f7c <cleanup_stdio+0x34>)
 8008f4c:	4299      	cmp	r1, r3
 8008f4e:	b510      	push	{r4, lr}
 8008f50:	4604      	mov	r4, r0
 8008f52:	d001      	beq.n	8008f58 <cleanup_stdio+0x10>
 8008f54:	f000 fccc 	bl	80098f0 <_fflush_r>
 8008f58:	68a1      	ldr	r1, [r4, #8]
 8008f5a:	4b09      	ldr	r3, [pc, #36]	@ (8008f80 <cleanup_stdio+0x38>)
 8008f5c:	4299      	cmp	r1, r3
 8008f5e:	d002      	beq.n	8008f66 <cleanup_stdio+0x1e>
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 fcc5 	bl	80098f0 <_fflush_r>
 8008f66:	68e1      	ldr	r1, [r4, #12]
 8008f68:	4b06      	ldr	r3, [pc, #24]	@ (8008f84 <cleanup_stdio+0x3c>)
 8008f6a:	4299      	cmp	r1, r3
 8008f6c:	d004      	beq.n	8008f78 <cleanup_stdio+0x30>
 8008f6e:	4620      	mov	r0, r4
 8008f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f74:	f000 bcbc 	b.w	80098f0 <_fflush_r>
 8008f78:	bd10      	pop	{r4, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20001514 	.word	0x20001514
 8008f80:	2000157c 	.word	0x2000157c
 8008f84:	200015e4 	.word	0x200015e4

08008f88 <global_stdio_init.part.0>:
 8008f88:	b510      	push	{r4, lr}
 8008f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb8 <global_stdio_init.part.0+0x30>)
 8008f8c:	4c0b      	ldr	r4, [pc, #44]	@ (8008fbc <global_stdio_init.part.0+0x34>)
 8008f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8008fc0 <global_stdio_init.part.0+0x38>)
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	4620      	mov	r0, r4
 8008f94:	2200      	movs	r2, #0
 8008f96:	2104      	movs	r1, #4
 8008f98:	f7ff ff94 	bl	8008ec4 <std>
 8008f9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	2109      	movs	r1, #9
 8008fa4:	f7ff ff8e 	bl	8008ec4 <std>
 8008fa8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008fac:	2202      	movs	r2, #2
 8008fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fb2:	2112      	movs	r1, #18
 8008fb4:	f7ff bf86 	b.w	8008ec4 <std>
 8008fb8:	2000164c 	.word	0x2000164c
 8008fbc:	20001514 	.word	0x20001514
 8008fc0:	08008f31 	.word	0x08008f31

08008fc4 <__sfp_lock_acquire>:
 8008fc4:	4801      	ldr	r0, [pc, #4]	@ (8008fcc <__sfp_lock_acquire+0x8>)
 8008fc6:	f000 b8f2 	b.w	80091ae <__retarget_lock_acquire_recursive>
 8008fca:	bf00      	nop
 8008fcc:	20001651 	.word	0x20001651

08008fd0 <__sfp_lock_release>:
 8008fd0:	4801      	ldr	r0, [pc, #4]	@ (8008fd8 <__sfp_lock_release+0x8>)
 8008fd2:	f000 b8ed 	b.w	80091b0 <__retarget_lock_release_recursive>
 8008fd6:	bf00      	nop
 8008fd8:	20001651 	.word	0x20001651

08008fdc <__sinit>:
 8008fdc:	b510      	push	{r4, lr}
 8008fde:	4604      	mov	r4, r0
 8008fe0:	f7ff fff0 	bl	8008fc4 <__sfp_lock_acquire>
 8008fe4:	6a23      	ldr	r3, [r4, #32]
 8008fe6:	b11b      	cbz	r3, 8008ff0 <__sinit+0x14>
 8008fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fec:	f7ff bff0 	b.w	8008fd0 <__sfp_lock_release>
 8008ff0:	4b04      	ldr	r3, [pc, #16]	@ (8009004 <__sinit+0x28>)
 8008ff2:	6223      	str	r3, [r4, #32]
 8008ff4:	4b04      	ldr	r3, [pc, #16]	@ (8009008 <__sinit+0x2c>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1f5      	bne.n	8008fe8 <__sinit+0xc>
 8008ffc:	f7ff ffc4 	bl	8008f88 <global_stdio_init.part.0>
 8009000:	e7f2      	b.n	8008fe8 <__sinit+0xc>
 8009002:	bf00      	nop
 8009004:	08008f49 	.word	0x08008f49
 8009008:	2000164c 	.word	0x2000164c

0800900c <_fwalk_sglue>:
 800900c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009010:	4607      	mov	r7, r0
 8009012:	4688      	mov	r8, r1
 8009014:	4614      	mov	r4, r2
 8009016:	2600      	movs	r6, #0
 8009018:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800901c:	f1b9 0901 	subs.w	r9, r9, #1
 8009020:	d505      	bpl.n	800902e <_fwalk_sglue+0x22>
 8009022:	6824      	ldr	r4, [r4, #0]
 8009024:	2c00      	cmp	r4, #0
 8009026:	d1f7      	bne.n	8009018 <_fwalk_sglue+0xc>
 8009028:	4630      	mov	r0, r6
 800902a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800902e:	89ab      	ldrh	r3, [r5, #12]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d907      	bls.n	8009044 <_fwalk_sglue+0x38>
 8009034:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009038:	3301      	adds	r3, #1
 800903a:	d003      	beq.n	8009044 <_fwalk_sglue+0x38>
 800903c:	4629      	mov	r1, r5
 800903e:	4638      	mov	r0, r7
 8009040:	47c0      	blx	r8
 8009042:	4306      	orrs	r6, r0
 8009044:	3568      	adds	r5, #104	@ 0x68
 8009046:	e7e9      	b.n	800901c <_fwalk_sglue+0x10>

08009048 <iprintf>:
 8009048:	b40f      	push	{r0, r1, r2, r3}
 800904a:	b507      	push	{r0, r1, r2, lr}
 800904c:	4906      	ldr	r1, [pc, #24]	@ (8009068 <iprintf+0x20>)
 800904e:	ab04      	add	r3, sp, #16
 8009050:	6808      	ldr	r0, [r1, #0]
 8009052:	f853 2b04 	ldr.w	r2, [r3], #4
 8009056:	6881      	ldr	r1, [r0, #8]
 8009058:	9301      	str	r3, [sp, #4]
 800905a:	f000 f91f 	bl	800929c <_vfiprintf_r>
 800905e:	b003      	add	sp, #12
 8009060:	f85d eb04 	ldr.w	lr, [sp], #4
 8009064:	b004      	add	sp, #16
 8009066:	4770      	bx	lr
 8009068:	2000092c 	.word	0x2000092c

0800906c <_puts_r>:
 800906c:	6a03      	ldr	r3, [r0, #32]
 800906e:	b570      	push	{r4, r5, r6, lr}
 8009070:	6884      	ldr	r4, [r0, #8]
 8009072:	4605      	mov	r5, r0
 8009074:	460e      	mov	r6, r1
 8009076:	b90b      	cbnz	r3, 800907c <_puts_r+0x10>
 8009078:	f7ff ffb0 	bl	8008fdc <__sinit>
 800907c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800907e:	07db      	lsls	r3, r3, #31
 8009080:	d405      	bmi.n	800908e <_puts_r+0x22>
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	0598      	lsls	r0, r3, #22
 8009086:	d402      	bmi.n	800908e <_puts_r+0x22>
 8009088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800908a:	f000 f890 	bl	80091ae <__retarget_lock_acquire_recursive>
 800908e:	89a3      	ldrh	r3, [r4, #12]
 8009090:	0719      	lsls	r1, r3, #28
 8009092:	d502      	bpl.n	800909a <_puts_r+0x2e>
 8009094:	6923      	ldr	r3, [r4, #16]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d135      	bne.n	8009106 <_puts_r+0x9a>
 800909a:	4621      	mov	r1, r4
 800909c:	4628      	mov	r0, r5
 800909e:	f000 fcd1 	bl	8009a44 <__swsetup_r>
 80090a2:	b380      	cbz	r0, 8009106 <_puts_r+0x9a>
 80090a4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80090a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090aa:	07da      	lsls	r2, r3, #31
 80090ac:	d405      	bmi.n	80090ba <_puts_r+0x4e>
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	059b      	lsls	r3, r3, #22
 80090b2:	d402      	bmi.n	80090ba <_puts_r+0x4e>
 80090b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090b6:	f000 f87b 	bl	80091b0 <__retarget_lock_release_recursive>
 80090ba:	4628      	mov	r0, r5
 80090bc:	bd70      	pop	{r4, r5, r6, pc}
 80090be:	2b00      	cmp	r3, #0
 80090c0:	da04      	bge.n	80090cc <_puts_r+0x60>
 80090c2:	69a2      	ldr	r2, [r4, #24]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	dc17      	bgt.n	80090f8 <_puts_r+0x8c>
 80090c8:	290a      	cmp	r1, #10
 80090ca:	d015      	beq.n	80090f8 <_puts_r+0x8c>
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	1c5a      	adds	r2, r3, #1
 80090d0:	6022      	str	r2, [r4, #0]
 80090d2:	7019      	strb	r1, [r3, #0]
 80090d4:	68a3      	ldr	r3, [r4, #8]
 80090d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80090da:	3b01      	subs	r3, #1
 80090dc:	60a3      	str	r3, [r4, #8]
 80090de:	2900      	cmp	r1, #0
 80090e0:	d1ed      	bne.n	80090be <_puts_r+0x52>
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	da11      	bge.n	800910a <_puts_r+0x9e>
 80090e6:	4622      	mov	r2, r4
 80090e8:	210a      	movs	r1, #10
 80090ea:	4628      	mov	r0, r5
 80090ec:	f000 fc6b 	bl	80099c6 <__swbuf_r>
 80090f0:	3001      	adds	r0, #1
 80090f2:	d0d7      	beq.n	80090a4 <_puts_r+0x38>
 80090f4:	250a      	movs	r5, #10
 80090f6:	e7d7      	b.n	80090a8 <_puts_r+0x3c>
 80090f8:	4622      	mov	r2, r4
 80090fa:	4628      	mov	r0, r5
 80090fc:	f000 fc63 	bl	80099c6 <__swbuf_r>
 8009100:	3001      	adds	r0, #1
 8009102:	d1e7      	bne.n	80090d4 <_puts_r+0x68>
 8009104:	e7ce      	b.n	80090a4 <_puts_r+0x38>
 8009106:	3e01      	subs	r6, #1
 8009108:	e7e4      	b.n	80090d4 <_puts_r+0x68>
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	1c5a      	adds	r2, r3, #1
 800910e:	6022      	str	r2, [r4, #0]
 8009110:	220a      	movs	r2, #10
 8009112:	701a      	strb	r2, [r3, #0]
 8009114:	e7ee      	b.n	80090f4 <_puts_r+0x88>
	...

08009118 <puts>:
 8009118:	4b02      	ldr	r3, [pc, #8]	@ (8009124 <puts+0xc>)
 800911a:	4601      	mov	r1, r0
 800911c:	6818      	ldr	r0, [r3, #0]
 800911e:	f7ff bfa5 	b.w	800906c <_puts_r>
 8009122:	bf00      	nop
 8009124:	2000092c 	.word	0x2000092c

08009128 <memset>:
 8009128:	4402      	add	r2, r0
 800912a:	4603      	mov	r3, r0
 800912c:	4293      	cmp	r3, r2
 800912e:	d100      	bne.n	8009132 <memset+0xa>
 8009130:	4770      	bx	lr
 8009132:	f803 1b01 	strb.w	r1, [r3], #1
 8009136:	e7f9      	b.n	800912c <memset+0x4>

08009138 <_sbrk_r>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	4d06      	ldr	r5, [pc, #24]	@ (8009154 <_sbrk_r+0x1c>)
 800913c:	2300      	movs	r3, #0
 800913e:	4604      	mov	r4, r0
 8009140:	4608      	mov	r0, r1
 8009142:	602b      	str	r3, [r5, #0]
 8009144:	f7f8 fa58 	bl	80015f8 <_sbrk>
 8009148:	1c43      	adds	r3, r0, #1
 800914a:	d102      	bne.n	8009152 <_sbrk_r+0x1a>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	b103      	cbz	r3, 8009152 <_sbrk_r+0x1a>
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	bd38      	pop	{r3, r4, r5, pc}
 8009154:	20001654 	.word	0x20001654

08009158 <__errno>:
 8009158:	4b01      	ldr	r3, [pc, #4]	@ (8009160 <__errno+0x8>)
 800915a:	6818      	ldr	r0, [r3, #0]
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	2000092c 	.word	0x2000092c

08009164 <__libc_init_array>:
 8009164:	b570      	push	{r4, r5, r6, lr}
 8009166:	4d0d      	ldr	r5, [pc, #52]	@ (800919c <__libc_init_array+0x38>)
 8009168:	4c0d      	ldr	r4, [pc, #52]	@ (80091a0 <__libc_init_array+0x3c>)
 800916a:	1b64      	subs	r4, r4, r5
 800916c:	10a4      	asrs	r4, r4, #2
 800916e:	2600      	movs	r6, #0
 8009170:	42a6      	cmp	r6, r4
 8009172:	d109      	bne.n	8009188 <__libc_init_array+0x24>
 8009174:	4d0b      	ldr	r5, [pc, #44]	@ (80091a4 <__libc_init_array+0x40>)
 8009176:	4c0c      	ldr	r4, [pc, #48]	@ (80091a8 <__libc_init_array+0x44>)
 8009178:	f000 fee8 	bl	8009f4c <_init>
 800917c:	1b64      	subs	r4, r4, r5
 800917e:	10a4      	asrs	r4, r4, #2
 8009180:	2600      	movs	r6, #0
 8009182:	42a6      	cmp	r6, r4
 8009184:	d105      	bne.n	8009192 <__libc_init_array+0x2e>
 8009186:	bd70      	pop	{r4, r5, r6, pc}
 8009188:	f855 3b04 	ldr.w	r3, [r5], #4
 800918c:	4798      	blx	r3
 800918e:	3601      	adds	r6, #1
 8009190:	e7ee      	b.n	8009170 <__libc_init_array+0xc>
 8009192:	f855 3b04 	ldr.w	r3, [r5], #4
 8009196:	4798      	blx	r3
 8009198:	3601      	adds	r6, #1
 800919a:	e7f2      	b.n	8009182 <__libc_init_array+0x1e>
 800919c:	0801526c 	.word	0x0801526c
 80091a0:	0801526c 	.word	0x0801526c
 80091a4:	0801526c 	.word	0x0801526c
 80091a8:	08015270 	.word	0x08015270

080091ac <__retarget_lock_init_recursive>:
 80091ac:	4770      	bx	lr

080091ae <__retarget_lock_acquire_recursive>:
 80091ae:	4770      	bx	lr

080091b0 <__retarget_lock_release_recursive>:
 80091b0:	4770      	bx	lr
	...

080091b4 <_free_r>:
 80091b4:	b538      	push	{r3, r4, r5, lr}
 80091b6:	4605      	mov	r5, r0
 80091b8:	2900      	cmp	r1, #0
 80091ba:	d041      	beq.n	8009240 <_free_r+0x8c>
 80091bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091c0:	1f0c      	subs	r4, r1, #4
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	bfb8      	it	lt
 80091c6:	18e4      	addlt	r4, r4, r3
 80091c8:	f7ff fe70 	bl	8008eac <__malloc_lock>
 80091cc:	4a1d      	ldr	r2, [pc, #116]	@ (8009244 <_free_r+0x90>)
 80091ce:	6813      	ldr	r3, [r2, #0]
 80091d0:	b933      	cbnz	r3, 80091e0 <_free_r+0x2c>
 80091d2:	6063      	str	r3, [r4, #4]
 80091d4:	6014      	str	r4, [r2, #0]
 80091d6:	4628      	mov	r0, r5
 80091d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091dc:	f7ff be6c 	b.w	8008eb8 <__malloc_unlock>
 80091e0:	42a3      	cmp	r3, r4
 80091e2:	d908      	bls.n	80091f6 <_free_r+0x42>
 80091e4:	6820      	ldr	r0, [r4, #0]
 80091e6:	1821      	adds	r1, r4, r0
 80091e8:	428b      	cmp	r3, r1
 80091ea:	bf01      	itttt	eq
 80091ec:	6819      	ldreq	r1, [r3, #0]
 80091ee:	685b      	ldreq	r3, [r3, #4]
 80091f0:	1809      	addeq	r1, r1, r0
 80091f2:	6021      	streq	r1, [r4, #0]
 80091f4:	e7ed      	b.n	80091d2 <_free_r+0x1e>
 80091f6:	461a      	mov	r2, r3
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	b10b      	cbz	r3, 8009200 <_free_r+0x4c>
 80091fc:	42a3      	cmp	r3, r4
 80091fe:	d9fa      	bls.n	80091f6 <_free_r+0x42>
 8009200:	6811      	ldr	r1, [r2, #0]
 8009202:	1850      	adds	r0, r2, r1
 8009204:	42a0      	cmp	r0, r4
 8009206:	d10b      	bne.n	8009220 <_free_r+0x6c>
 8009208:	6820      	ldr	r0, [r4, #0]
 800920a:	4401      	add	r1, r0
 800920c:	1850      	adds	r0, r2, r1
 800920e:	4283      	cmp	r3, r0
 8009210:	6011      	str	r1, [r2, #0]
 8009212:	d1e0      	bne.n	80091d6 <_free_r+0x22>
 8009214:	6818      	ldr	r0, [r3, #0]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	6053      	str	r3, [r2, #4]
 800921a:	4408      	add	r0, r1
 800921c:	6010      	str	r0, [r2, #0]
 800921e:	e7da      	b.n	80091d6 <_free_r+0x22>
 8009220:	d902      	bls.n	8009228 <_free_r+0x74>
 8009222:	230c      	movs	r3, #12
 8009224:	602b      	str	r3, [r5, #0]
 8009226:	e7d6      	b.n	80091d6 <_free_r+0x22>
 8009228:	6820      	ldr	r0, [r4, #0]
 800922a:	1821      	adds	r1, r4, r0
 800922c:	428b      	cmp	r3, r1
 800922e:	bf04      	itt	eq
 8009230:	6819      	ldreq	r1, [r3, #0]
 8009232:	685b      	ldreq	r3, [r3, #4]
 8009234:	6063      	str	r3, [r4, #4]
 8009236:	bf04      	itt	eq
 8009238:	1809      	addeq	r1, r1, r0
 800923a:	6021      	streq	r1, [r4, #0]
 800923c:	6054      	str	r4, [r2, #4]
 800923e:	e7ca      	b.n	80091d6 <_free_r+0x22>
 8009240:	bd38      	pop	{r3, r4, r5, pc}
 8009242:	bf00      	nop
 8009244:	20001510 	.word	0x20001510

08009248 <__sfputc_r>:
 8009248:	6893      	ldr	r3, [r2, #8]
 800924a:	3b01      	subs	r3, #1
 800924c:	2b00      	cmp	r3, #0
 800924e:	b410      	push	{r4}
 8009250:	6093      	str	r3, [r2, #8]
 8009252:	da08      	bge.n	8009266 <__sfputc_r+0x1e>
 8009254:	6994      	ldr	r4, [r2, #24]
 8009256:	42a3      	cmp	r3, r4
 8009258:	db01      	blt.n	800925e <__sfputc_r+0x16>
 800925a:	290a      	cmp	r1, #10
 800925c:	d103      	bne.n	8009266 <__sfputc_r+0x1e>
 800925e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009262:	f000 bbb0 	b.w	80099c6 <__swbuf_r>
 8009266:	6813      	ldr	r3, [r2, #0]
 8009268:	1c58      	adds	r0, r3, #1
 800926a:	6010      	str	r0, [r2, #0]
 800926c:	7019      	strb	r1, [r3, #0]
 800926e:	4608      	mov	r0, r1
 8009270:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009274:	4770      	bx	lr

08009276 <__sfputs_r>:
 8009276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009278:	4606      	mov	r6, r0
 800927a:	460f      	mov	r7, r1
 800927c:	4614      	mov	r4, r2
 800927e:	18d5      	adds	r5, r2, r3
 8009280:	42ac      	cmp	r4, r5
 8009282:	d101      	bne.n	8009288 <__sfputs_r+0x12>
 8009284:	2000      	movs	r0, #0
 8009286:	e007      	b.n	8009298 <__sfputs_r+0x22>
 8009288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800928c:	463a      	mov	r2, r7
 800928e:	4630      	mov	r0, r6
 8009290:	f7ff ffda 	bl	8009248 <__sfputc_r>
 8009294:	1c43      	adds	r3, r0, #1
 8009296:	d1f3      	bne.n	8009280 <__sfputs_r+0xa>
 8009298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800929c <_vfiprintf_r>:
 800929c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a0:	460d      	mov	r5, r1
 80092a2:	b09d      	sub	sp, #116	@ 0x74
 80092a4:	4614      	mov	r4, r2
 80092a6:	4698      	mov	r8, r3
 80092a8:	4606      	mov	r6, r0
 80092aa:	b118      	cbz	r0, 80092b4 <_vfiprintf_r+0x18>
 80092ac:	6a03      	ldr	r3, [r0, #32]
 80092ae:	b90b      	cbnz	r3, 80092b4 <_vfiprintf_r+0x18>
 80092b0:	f7ff fe94 	bl	8008fdc <__sinit>
 80092b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092b6:	07d9      	lsls	r1, r3, #31
 80092b8:	d405      	bmi.n	80092c6 <_vfiprintf_r+0x2a>
 80092ba:	89ab      	ldrh	r3, [r5, #12]
 80092bc:	059a      	lsls	r2, r3, #22
 80092be:	d402      	bmi.n	80092c6 <_vfiprintf_r+0x2a>
 80092c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092c2:	f7ff ff74 	bl	80091ae <__retarget_lock_acquire_recursive>
 80092c6:	89ab      	ldrh	r3, [r5, #12]
 80092c8:	071b      	lsls	r3, r3, #28
 80092ca:	d501      	bpl.n	80092d0 <_vfiprintf_r+0x34>
 80092cc:	692b      	ldr	r3, [r5, #16]
 80092ce:	b99b      	cbnz	r3, 80092f8 <_vfiprintf_r+0x5c>
 80092d0:	4629      	mov	r1, r5
 80092d2:	4630      	mov	r0, r6
 80092d4:	f000 fbb6 	bl	8009a44 <__swsetup_r>
 80092d8:	b170      	cbz	r0, 80092f8 <_vfiprintf_r+0x5c>
 80092da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092dc:	07dc      	lsls	r4, r3, #31
 80092de:	d504      	bpl.n	80092ea <_vfiprintf_r+0x4e>
 80092e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092e4:	b01d      	add	sp, #116	@ 0x74
 80092e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ea:	89ab      	ldrh	r3, [r5, #12]
 80092ec:	0598      	lsls	r0, r3, #22
 80092ee:	d4f7      	bmi.n	80092e0 <_vfiprintf_r+0x44>
 80092f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092f2:	f7ff ff5d 	bl	80091b0 <__retarget_lock_release_recursive>
 80092f6:	e7f3      	b.n	80092e0 <_vfiprintf_r+0x44>
 80092f8:	2300      	movs	r3, #0
 80092fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80092fc:	2320      	movs	r3, #32
 80092fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009302:	f8cd 800c 	str.w	r8, [sp, #12]
 8009306:	2330      	movs	r3, #48	@ 0x30
 8009308:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80094b8 <_vfiprintf_r+0x21c>
 800930c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009310:	f04f 0901 	mov.w	r9, #1
 8009314:	4623      	mov	r3, r4
 8009316:	469a      	mov	sl, r3
 8009318:	f813 2b01 	ldrb.w	r2, [r3], #1
 800931c:	b10a      	cbz	r2, 8009322 <_vfiprintf_r+0x86>
 800931e:	2a25      	cmp	r2, #37	@ 0x25
 8009320:	d1f9      	bne.n	8009316 <_vfiprintf_r+0x7a>
 8009322:	ebba 0b04 	subs.w	fp, sl, r4
 8009326:	d00b      	beq.n	8009340 <_vfiprintf_r+0xa4>
 8009328:	465b      	mov	r3, fp
 800932a:	4622      	mov	r2, r4
 800932c:	4629      	mov	r1, r5
 800932e:	4630      	mov	r0, r6
 8009330:	f7ff ffa1 	bl	8009276 <__sfputs_r>
 8009334:	3001      	adds	r0, #1
 8009336:	f000 80a7 	beq.w	8009488 <_vfiprintf_r+0x1ec>
 800933a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800933c:	445a      	add	r2, fp
 800933e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009340:	f89a 3000 	ldrb.w	r3, [sl]
 8009344:	2b00      	cmp	r3, #0
 8009346:	f000 809f 	beq.w	8009488 <_vfiprintf_r+0x1ec>
 800934a:	2300      	movs	r3, #0
 800934c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009354:	f10a 0a01 	add.w	sl, sl, #1
 8009358:	9304      	str	r3, [sp, #16]
 800935a:	9307      	str	r3, [sp, #28]
 800935c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009360:	931a      	str	r3, [sp, #104]	@ 0x68
 8009362:	4654      	mov	r4, sl
 8009364:	2205      	movs	r2, #5
 8009366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800936a:	4853      	ldr	r0, [pc, #332]	@ (80094b8 <_vfiprintf_r+0x21c>)
 800936c:	f7f6 ff48 	bl	8000200 <memchr>
 8009370:	9a04      	ldr	r2, [sp, #16]
 8009372:	b9d8      	cbnz	r0, 80093ac <_vfiprintf_r+0x110>
 8009374:	06d1      	lsls	r1, r2, #27
 8009376:	bf44      	itt	mi
 8009378:	2320      	movmi	r3, #32
 800937a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800937e:	0713      	lsls	r3, r2, #28
 8009380:	bf44      	itt	mi
 8009382:	232b      	movmi	r3, #43	@ 0x2b
 8009384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009388:	f89a 3000 	ldrb.w	r3, [sl]
 800938c:	2b2a      	cmp	r3, #42	@ 0x2a
 800938e:	d015      	beq.n	80093bc <_vfiprintf_r+0x120>
 8009390:	9a07      	ldr	r2, [sp, #28]
 8009392:	4654      	mov	r4, sl
 8009394:	2000      	movs	r0, #0
 8009396:	f04f 0c0a 	mov.w	ip, #10
 800939a:	4621      	mov	r1, r4
 800939c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093a0:	3b30      	subs	r3, #48	@ 0x30
 80093a2:	2b09      	cmp	r3, #9
 80093a4:	d94b      	bls.n	800943e <_vfiprintf_r+0x1a2>
 80093a6:	b1b0      	cbz	r0, 80093d6 <_vfiprintf_r+0x13a>
 80093a8:	9207      	str	r2, [sp, #28]
 80093aa:	e014      	b.n	80093d6 <_vfiprintf_r+0x13a>
 80093ac:	eba0 0308 	sub.w	r3, r0, r8
 80093b0:	fa09 f303 	lsl.w	r3, r9, r3
 80093b4:	4313      	orrs	r3, r2
 80093b6:	9304      	str	r3, [sp, #16]
 80093b8:	46a2      	mov	sl, r4
 80093ba:	e7d2      	b.n	8009362 <_vfiprintf_r+0xc6>
 80093bc:	9b03      	ldr	r3, [sp, #12]
 80093be:	1d19      	adds	r1, r3, #4
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	9103      	str	r1, [sp, #12]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	bfbb      	ittet	lt
 80093c8:	425b      	neglt	r3, r3
 80093ca:	f042 0202 	orrlt.w	r2, r2, #2
 80093ce:	9307      	strge	r3, [sp, #28]
 80093d0:	9307      	strlt	r3, [sp, #28]
 80093d2:	bfb8      	it	lt
 80093d4:	9204      	strlt	r2, [sp, #16]
 80093d6:	7823      	ldrb	r3, [r4, #0]
 80093d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80093da:	d10a      	bne.n	80093f2 <_vfiprintf_r+0x156>
 80093dc:	7863      	ldrb	r3, [r4, #1]
 80093de:	2b2a      	cmp	r3, #42	@ 0x2a
 80093e0:	d132      	bne.n	8009448 <_vfiprintf_r+0x1ac>
 80093e2:	9b03      	ldr	r3, [sp, #12]
 80093e4:	1d1a      	adds	r2, r3, #4
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	9203      	str	r2, [sp, #12]
 80093ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093ee:	3402      	adds	r4, #2
 80093f0:	9305      	str	r3, [sp, #20]
 80093f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80094c8 <_vfiprintf_r+0x22c>
 80093f6:	7821      	ldrb	r1, [r4, #0]
 80093f8:	2203      	movs	r2, #3
 80093fa:	4650      	mov	r0, sl
 80093fc:	f7f6 ff00 	bl	8000200 <memchr>
 8009400:	b138      	cbz	r0, 8009412 <_vfiprintf_r+0x176>
 8009402:	9b04      	ldr	r3, [sp, #16]
 8009404:	eba0 000a 	sub.w	r0, r0, sl
 8009408:	2240      	movs	r2, #64	@ 0x40
 800940a:	4082      	lsls	r2, r0
 800940c:	4313      	orrs	r3, r2
 800940e:	3401      	adds	r4, #1
 8009410:	9304      	str	r3, [sp, #16]
 8009412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009416:	4829      	ldr	r0, [pc, #164]	@ (80094bc <_vfiprintf_r+0x220>)
 8009418:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800941c:	2206      	movs	r2, #6
 800941e:	f7f6 feef 	bl	8000200 <memchr>
 8009422:	2800      	cmp	r0, #0
 8009424:	d03f      	beq.n	80094a6 <_vfiprintf_r+0x20a>
 8009426:	4b26      	ldr	r3, [pc, #152]	@ (80094c0 <_vfiprintf_r+0x224>)
 8009428:	bb1b      	cbnz	r3, 8009472 <_vfiprintf_r+0x1d6>
 800942a:	9b03      	ldr	r3, [sp, #12]
 800942c:	3307      	adds	r3, #7
 800942e:	f023 0307 	bic.w	r3, r3, #7
 8009432:	3308      	adds	r3, #8
 8009434:	9303      	str	r3, [sp, #12]
 8009436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009438:	443b      	add	r3, r7
 800943a:	9309      	str	r3, [sp, #36]	@ 0x24
 800943c:	e76a      	b.n	8009314 <_vfiprintf_r+0x78>
 800943e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009442:	460c      	mov	r4, r1
 8009444:	2001      	movs	r0, #1
 8009446:	e7a8      	b.n	800939a <_vfiprintf_r+0xfe>
 8009448:	2300      	movs	r3, #0
 800944a:	3401      	adds	r4, #1
 800944c:	9305      	str	r3, [sp, #20]
 800944e:	4619      	mov	r1, r3
 8009450:	f04f 0c0a 	mov.w	ip, #10
 8009454:	4620      	mov	r0, r4
 8009456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800945a:	3a30      	subs	r2, #48	@ 0x30
 800945c:	2a09      	cmp	r2, #9
 800945e:	d903      	bls.n	8009468 <_vfiprintf_r+0x1cc>
 8009460:	2b00      	cmp	r3, #0
 8009462:	d0c6      	beq.n	80093f2 <_vfiprintf_r+0x156>
 8009464:	9105      	str	r1, [sp, #20]
 8009466:	e7c4      	b.n	80093f2 <_vfiprintf_r+0x156>
 8009468:	fb0c 2101 	mla	r1, ip, r1, r2
 800946c:	4604      	mov	r4, r0
 800946e:	2301      	movs	r3, #1
 8009470:	e7f0      	b.n	8009454 <_vfiprintf_r+0x1b8>
 8009472:	ab03      	add	r3, sp, #12
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	462a      	mov	r2, r5
 8009478:	4b12      	ldr	r3, [pc, #72]	@ (80094c4 <_vfiprintf_r+0x228>)
 800947a:	a904      	add	r1, sp, #16
 800947c:	4630      	mov	r0, r6
 800947e:	f3af 8000 	nop.w
 8009482:	4607      	mov	r7, r0
 8009484:	1c78      	adds	r0, r7, #1
 8009486:	d1d6      	bne.n	8009436 <_vfiprintf_r+0x19a>
 8009488:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800948a:	07d9      	lsls	r1, r3, #31
 800948c:	d405      	bmi.n	800949a <_vfiprintf_r+0x1fe>
 800948e:	89ab      	ldrh	r3, [r5, #12]
 8009490:	059a      	lsls	r2, r3, #22
 8009492:	d402      	bmi.n	800949a <_vfiprintf_r+0x1fe>
 8009494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009496:	f7ff fe8b 	bl	80091b0 <__retarget_lock_release_recursive>
 800949a:	89ab      	ldrh	r3, [r5, #12]
 800949c:	065b      	lsls	r3, r3, #25
 800949e:	f53f af1f 	bmi.w	80092e0 <_vfiprintf_r+0x44>
 80094a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094a4:	e71e      	b.n	80092e4 <_vfiprintf_r+0x48>
 80094a6:	ab03      	add	r3, sp, #12
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	462a      	mov	r2, r5
 80094ac:	4b05      	ldr	r3, [pc, #20]	@ (80094c4 <_vfiprintf_r+0x228>)
 80094ae:	a904      	add	r1, sp, #16
 80094b0:	4630      	mov	r0, r6
 80094b2:	f000 f879 	bl	80095a8 <_printf_i>
 80094b6:	e7e4      	b.n	8009482 <_vfiprintf_r+0x1e6>
 80094b8:	08015218 	.word	0x08015218
 80094bc:	08015222 	.word	0x08015222
 80094c0:	00000000 	.word	0x00000000
 80094c4:	08009277 	.word	0x08009277
 80094c8:	0801521e 	.word	0x0801521e

080094cc <_printf_common>:
 80094cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d0:	4616      	mov	r6, r2
 80094d2:	4698      	mov	r8, r3
 80094d4:	688a      	ldr	r2, [r1, #8]
 80094d6:	690b      	ldr	r3, [r1, #16]
 80094d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094dc:	4293      	cmp	r3, r2
 80094de:	bfb8      	it	lt
 80094e0:	4613      	movlt	r3, r2
 80094e2:	6033      	str	r3, [r6, #0]
 80094e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094e8:	4607      	mov	r7, r0
 80094ea:	460c      	mov	r4, r1
 80094ec:	b10a      	cbz	r2, 80094f2 <_printf_common+0x26>
 80094ee:	3301      	adds	r3, #1
 80094f0:	6033      	str	r3, [r6, #0]
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	0699      	lsls	r1, r3, #26
 80094f6:	bf42      	ittt	mi
 80094f8:	6833      	ldrmi	r3, [r6, #0]
 80094fa:	3302      	addmi	r3, #2
 80094fc:	6033      	strmi	r3, [r6, #0]
 80094fe:	6825      	ldr	r5, [r4, #0]
 8009500:	f015 0506 	ands.w	r5, r5, #6
 8009504:	d106      	bne.n	8009514 <_printf_common+0x48>
 8009506:	f104 0a19 	add.w	sl, r4, #25
 800950a:	68e3      	ldr	r3, [r4, #12]
 800950c:	6832      	ldr	r2, [r6, #0]
 800950e:	1a9b      	subs	r3, r3, r2
 8009510:	42ab      	cmp	r3, r5
 8009512:	dc26      	bgt.n	8009562 <_printf_common+0x96>
 8009514:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009518:	6822      	ldr	r2, [r4, #0]
 800951a:	3b00      	subs	r3, #0
 800951c:	bf18      	it	ne
 800951e:	2301      	movne	r3, #1
 8009520:	0692      	lsls	r2, r2, #26
 8009522:	d42b      	bmi.n	800957c <_printf_common+0xb0>
 8009524:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009528:	4641      	mov	r1, r8
 800952a:	4638      	mov	r0, r7
 800952c:	47c8      	blx	r9
 800952e:	3001      	adds	r0, #1
 8009530:	d01e      	beq.n	8009570 <_printf_common+0xa4>
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	6922      	ldr	r2, [r4, #16]
 8009536:	f003 0306 	and.w	r3, r3, #6
 800953a:	2b04      	cmp	r3, #4
 800953c:	bf02      	ittt	eq
 800953e:	68e5      	ldreq	r5, [r4, #12]
 8009540:	6833      	ldreq	r3, [r6, #0]
 8009542:	1aed      	subeq	r5, r5, r3
 8009544:	68a3      	ldr	r3, [r4, #8]
 8009546:	bf0c      	ite	eq
 8009548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800954c:	2500      	movne	r5, #0
 800954e:	4293      	cmp	r3, r2
 8009550:	bfc4      	itt	gt
 8009552:	1a9b      	subgt	r3, r3, r2
 8009554:	18ed      	addgt	r5, r5, r3
 8009556:	2600      	movs	r6, #0
 8009558:	341a      	adds	r4, #26
 800955a:	42b5      	cmp	r5, r6
 800955c:	d11a      	bne.n	8009594 <_printf_common+0xc8>
 800955e:	2000      	movs	r0, #0
 8009560:	e008      	b.n	8009574 <_printf_common+0xa8>
 8009562:	2301      	movs	r3, #1
 8009564:	4652      	mov	r2, sl
 8009566:	4641      	mov	r1, r8
 8009568:	4638      	mov	r0, r7
 800956a:	47c8      	blx	r9
 800956c:	3001      	adds	r0, #1
 800956e:	d103      	bne.n	8009578 <_printf_common+0xac>
 8009570:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009578:	3501      	adds	r5, #1
 800957a:	e7c6      	b.n	800950a <_printf_common+0x3e>
 800957c:	18e1      	adds	r1, r4, r3
 800957e:	1c5a      	adds	r2, r3, #1
 8009580:	2030      	movs	r0, #48	@ 0x30
 8009582:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009586:	4422      	add	r2, r4
 8009588:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800958c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009590:	3302      	adds	r3, #2
 8009592:	e7c7      	b.n	8009524 <_printf_common+0x58>
 8009594:	2301      	movs	r3, #1
 8009596:	4622      	mov	r2, r4
 8009598:	4641      	mov	r1, r8
 800959a:	4638      	mov	r0, r7
 800959c:	47c8      	blx	r9
 800959e:	3001      	adds	r0, #1
 80095a0:	d0e6      	beq.n	8009570 <_printf_common+0xa4>
 80095a2:	3601      	adds	r6, #1
 80095a4:	e7d9      	b.n	800955a <_printf_common+0x8e>
	...

080095a8 <_printf_i>:
 80095a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095ac:	7e0f      	ldrb	r7, [r1, #24]
 80095ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095b0:	2f78      	cmp	r7, #120	@ 0x78
 80095b2:	4691      	mov	r9, r2
 80095b4:	4680      	mov	r8, r0
 80095b6:	460c      	mov	r4, r1
 80095b8:	469a      	mov	sl, r3
 80095ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80095be:	d807      	bhi.n	80095d0 <_printf_i+0x28>
 80095c0:	2f62      	cmp	r7, #98	@ 0x62
 80095c2:	d80a      	bhi.n	80095da <_printf_i+0x32>
 80095c4:	2f00      	cmp	r7, #0
 80095c6:	f000 80d2 	beq.w	800976e <_printf_i+0x1c6>
 80095ca:	2f58      	cmp	r7, #88	@ 0x58
 80095cc:	f000 80b9 	beq.w	8009742 <_printf_i+0x19a>
 80095d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80095d8:	e03a      	b.n	8009650 <_printf_i+0xa8>
 80095da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80095de:	2b15      	cmp	r3, #21
 80095e0:	d8f6      	bhi.n	80095d0 <_printf_i+0x28>
 80095e2:	a101      	add	r1, pc, #4	@ (adr r1, 80095e8 <_printf_i+0x40>)
 80095e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095e8:	08009641 	.word	0x08009641
 80095ec:	08009655 	.word	0x08009655
 80095f0:	080095d1 	.word	0x080095d1
 80095f4:	080095d1 	.word	0x080095d1
 80095f8:	080095d1 	.word	0x080095d1
 80095fc:	080095d1 	.word	0x080095d1
 8009600:	08009655 	.word	0x08009655
 8009604:	080095d1 	.word	0x080095d1
 8009608:	080095d1 	.word	0x080095d1
 800960c:	080095d1 	.word	0x080095d1
 8009610:	080095d1 	.word	0x080095d1
 8009614:	08009755 	.word	0x08009755
 8009618:	0800967f 	.word	0x0800967f
 800961c:	0800970f 	.word	0x0800970f
 8009620:	080095d1 	.word	0x080095d1
 8009624:	080095d1 	.word	0x080095d1
 8009628:	08009777 	.word	0x08009777
 800962c:	080095d1 	.word	0x080095d1
 8009630:	0800967f 	.word	0x0800967f
 8009634:	080095d1 	.word	0x080095d1
 8009638:	080095d1 	.word	0x080095d1
 800963c:	08009717 	.word	0x08009717
 8009640:	6833      	ldr	r3, [r6, #0]
 8009642:	1d1a      	adds	r2, r3, #4
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	6032      	str	r2, [r6, #0]
 8009648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800964c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009650:	2301      	movs	r3, #1
 8009652:	e09d      	b.n	8009790 <_printf_i+0x1e8>
 8009654:	6833      	ldr	r3, [r6, #0]
 8009656:	6820      	ldr	r0, [r4, #0]
 8009658:	1d19      	adds	r1, r3, #4
 800965a:	6031      	str	r1, [r6, #0]
 800965c:	0606      	lsls	r6, r0, #24
 800965e:	d501      	bpl.n	8009664 <_printf_i+0xbc>
 8009660:	681d      	ldr	r5, [r3, #0]
 8009662:	e003      	b.n	800966c <_printf_i+0xc4>
 8009664:	0645      	lsls	r5, r0, #25
 8009666:	d5fb      	bpl.n	8009660 <_printf_i+0xb8>
 8009668:	f9b3 5000 	ldrsh.w	r5, [r3]
 800966c:	2d00      	cmp	r5, #0
 800966e:	da03      	bge.n	8009678 <_printf_i+0xd0>
 8009670:	232d      	movs	r3, #45	@ 0x2d
 8009672:	426d      	negs	r5, r5
 8009674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009678:	4859      	ldr	r0, [pc, #356]	@ (80097e0 <_printf_i+0x238>)
 800967a:	230a      	movs	r3, #10
 800967c:	e011      	b.n	80096a2 <_printf_i+0xfa>
 800967e:	6821      	ldr	r1, [r4, #0]
 8009680:	6833      	ldr	r3, [r6, #0]
 8009682:	0608      	lsls	r0, r1, #24
 8009684:	f853 5b04 	ldr.w	r5, [r3], #4
 8009688:	d402      	bmi.n	8009690 <_printf_i+0xe8>
 800968a:	0649      	lsls	r1, r1, #25
 800968c:	bf48      	it	mi
 800968e:	b2ad      	uxthmi	r5, r5
 8009690:	2f6f      	cmp	r7, #111	@ 0x6f
 8009692:	4853      	ldr	r0, [pc, #332]	@ (80097e0 <_printf_i+0x238>)
 8009694:	6033      	str	r3, [r6, #0]
 8009696:	bf14      	ite	ne
 8009698:	230a      	movne	r3, #10
 800969a:	2308      	moveq	r3, #8
 800969c:	2100      	movs	r1, #0
 800969e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096a2:	6866      	ldr	r6, [r4, #4]
 80096a4:	60a6      	str	r6, [r4, #8]
 80096a6:	2e00      	cmp	r6, #0
 80096a8:	bfa2      	ittt	ge
 80096aa:	6821      	ldrge	r1, [r4, #0]
 80096ac:	f021 0104 	bicge.w	r1, r1, #4
 80096b0:	6021      	strge	r1, [r4, #0]
 80096b2:	b90d      	cbnz	r5, 80096b8 <_printf_i+0x110>
 80096b4:	2e00      	cmp	r6, #0
 80096b6:	d04b      	beq.n	8009750 <_printf_i+0x1a8>
 80096b8:	4616      	mov	r6, r2
 80096ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80096be:	fb03 5711 	mls	r7, r3, r1, r5
 80096c2:	5dc7      	ldrb	r7, [r0, r7]
 80096c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096c8:	462f      	mov	r7, r5
 80096ca:	42bb      	cmp	r3, r7
 80096cc:	460d      	mov	r5, r1
 80096ce:	d9f4      	bls.n	80096ba <_printf_i+0x112>
 80096d0:	2b08      	cmp	r3, #8
 80096d2:	d10b      	bne.n	80096ec <_printf_i+0x144>
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	07df      	lsls	r7, r3, #31
 80096d8:	d508      	bpl.n	80096ec <_printf_i+0x144>
 80096da:	6923      	ldr	r3, [r4, #16]
 80096dc:	6861      	ldr	r1, [r4, #4]
 80096de:	4299      	cmp	r1, r3
 80096e0:	bfde      	ittt	le
 80096e2:	2330      	movle	r3, #48	@ 0x30
 80096e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096e8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80096ec:	1b92      	subs	r2, r2, r6
 80096ee:	6122      	str	r2, [r4, #16]
 80096f0:	f8cd a000 	str.w	sl, [sp]
 80096f4:	464b      	mov	r3, r9
 80096f6:	aa03      	add	r2, sp, #12
 80096f8:	4621      	mov	r1, r4
 80096fa:	4640      	mov	r0, r8
 80096fc:	f7ff fee6 	bl	80094cc <_printf_common>
 8009700:	3001      	adds	r0, #1
 8009702:	d14a      	bne.n	800979a <_printf_i+0x1f2>
 8009704:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009708:	b004      	add	sp, #16
 800970a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800970e:	6823      	ldr	r3, [r4, #0]
 8009710:	f043 0320 	orr.w	r3, r3, #32
 8009714:	6023      	str	r3, [r4, #0]
 8009716:	4833      	ldr	r0, [pc, #204]	@ (80097e4 <_printf_i+0x23c>)
 8009718:	2778      	movs	r7, #120	@ 0x78
 800971a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	6831      	ldr	r1, [r6, #0]
 8009722:	061f      	lsls	r7, r3, #24
 8009724:	f851 5b04 	ldr.w	r5, [r1], #4
 8009728:	d402      	bmi.n	8009730 <_printf_i+0x188>
 800972a:	065f      	lsls	r7, r3, #25
 800972c:	bf48      	it	mi
 800972e:	b2ad      	uxthmi	r5, r5
 8009730:	6031      	str	r1, [r6, #0]
 8009732:	07d9      	lsls	r1, r3, #31
 8009734:	bf44      	itt	mi
 8009736:	f043 0320 	orrmi.w	r3, r3, #32
 800973a:	6023      	strmi	r3, [r4, #0]
 800973c:	b11d      	cbz	r5, 8009746 <_printf_i+0x19e>
 800973e:	2310      	movs	r3, #16
 8009740:	e7ac      	b.n	800969c <_printf_i+0xf4>
 8009742:	4827      	ldr	r0, [pc, #156]	@ (80097e0 <_printf_i+0x238>)
 8009744:	e7e9      	b.n	800971a <_printf_i+0x172>
 8009746:	6823      	ldr	r3, [r4, #0]
 8009748:	f023 0320 	bic.w	r3, r3, #32
 800974c:	6023      	str	r3, [r4, #0]
 800974e:	e7f6      	b.n	800973e <_printf_i+0x196>
 8009750:	4616      	mov	r6, r2
 8009752:	e7bd      	b.n	80096d0 <_printf_i+0x128>
 8009754:	6833      	ldr	r3, [r6, #0]
 8009756:	6825      	ldr	r5, [r4, #0]
 8009758:	6961      	ldr	r1, [r4, #20]
 800975a:	1d18      	adds	r0, r3, #4
 800975c:	6030      	str	r0, [r6, #0]
 800975e:	062e      	lsls	r6, r5, #24
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	d501      	bpl.n	8009768 <_printf_i+0x1c0>
 8009764:	6019      	str	r1, [r3, #0]
 8009766:	e002      	b.n	800976e <_printf_i+0x1c6>
 8009768:	0668      	lsls	r0, r5, #25
 800976a:	d5fb      	bpl.n	8009764 <_printf_i+0x1bc>
 800976c:	8019      	strh	r1, [r3, #0]
 800976e:	2300      	movs	r3, #0
 8009770:	6123      	str	r3, [r4, #16]
 8009772:	4616      	mov	r6, r2
 8009774:	e7bc      	b.n	80096f0 <_printf_i+0x148>
 8009776:	6833      	ldr	r3, [r6, #0]
 8009778:	1d1a      	adds	r2, r3, #4
 800977a:	6032      	str	r2, [r6, #0]
 800977c:	681e      	ldr	r6, [r3, #0]
 800977e:	6862      	ldr	r2, [r4, #4]
 8009780:	2100      	movs	r1, #0
 8009782:	4630      	mov	r0, r6
 8009784:	f7f6 fd3c 	bl	8000200 <memchr>
 8009788:	b108      	cbz	r0, 800978e <_printf_i+0x1e6>
 800978a:	1b80      	subs	r0, r0, r6
 800978c:	6060      	str	r0, [r4, #4]
 800978e:	6863      	ldr	r3, [r4, #4]
 8009790:	6123      	str	r3, [r4, #16]
 8009792:	2300      	movs	r3, #0
 8009794:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009798:	e7aa      	b.n	80096f0 <_printf_i+0x148>
 800979a:	6923      	ldr	r3, [r4, #16]
 800979c:	4632      	mov	r2, r6
 800979e:	4649      	mov	r1, r9
 80097a0:	4640      	mov	r0, r8
 80097a2:	47d0      	blx	sl
 80097a4:	3001      	adds	r0, #1
 80097a6:	d0ad      	beq.n	8009704 <_printf_i+0x15c>
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	079b      	lsls	r3, r3, #30
 80097ac:	d413      	bmi.n	80097d6 <_printf_i+0x22e>
 80097ae:	68e0      	ldr	r0, [r4, #12]
 80097b0:	9b03      	ldr	r3, [sp, #12]
 80097b2:	4298      	cmp	r0, r3
 80097b4:	bfb8      	it	lt
 80097b6:	4618      	movlt	r0, r3
 80097b8:	e7a6      	b.n	8009708 <_printf_i+0x160>
 80097ba:	2301      	movs	r3, #1
 80097bc:	4632      	mov	r2, r6
 80097be:	4649      	mov	r1, r9
 80097c0:	4640      	mov	r0, r8
 80097c2:	47d0      	blx	sl
 80097c4:	3001      	adds	r0, #1
 80097c6:	d09d      	beq.n	8009704 <_printf_i+0x15c>
 80097c8:	3501      	adds	r5, #1
 80097ca:	68e3      	ldr	r3, [r4, #12]
 80097cc:	9903      	ldr	r1, [sp, #12]
 80097ce:	1a5b      	subs	r3, r3, r1
 80097d0:	42ab      	cmp	r3, r5
 80097d2:	dcf2      	bgt.n	80097ba <_printf_i+0x212>
 80097d4:	e7eb      	b.n	80097ae <_printf_i+0x206>
 80097d6:	2500      	movs	r5, #0
 80097d8:	f104 0619 	add.w	r6, r4, #25
 80097dc:	e7f5      	b.n	80097ca <_printf_i+0x222>
 80097de:	bf00      	nop
 80097e0:	08015229 	.word	0x08015229
 80097e4:	0801523a 	.word	0x0801523a

080097e8 <__sflush_r>:
 80097e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097f0:	0716      	lsls	r6, r2, #28
 80097f2:	4605      	mov	r5, r0
 80097f4:	460c      	mov	r4, r1
 80097f6:	d454      	bmi.n	80098a2 <__sflush_r+0xba>
 80097f8:	684b      	ldr	r3, [r1, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	dc02      	bgt.n	8009804 <__sflush_r+0x1c>
 80097fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009800:	2b00      	cmp	r3, #0
 8009802:	dd48      	ble.n	8009896 <__sflush_r+0xae>
 8009804:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009806:	2e00      	cmp	r6, #0
 8009808:	d045      	beq.n	8009896 <__sflush_r+0xae>
 800980a:	2300      	movs	r3, #0
 800980c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009810:	682f      	ldr	r7, [r5, #0]
 8009812:	6a21      	ldr	r1, [r4, #32]
 8009814:	602b      	str	r3, [r5, #0]
 8009816:	d030      	beq.n	800987a <__sflush_r+0x92>
 8009818:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800981a:	89a3      	ldrh	r3, [r4, #12]
 800981c:	0759      	lsls	r1, r3, #29
 800981e:	d505      	bpl.n	800982c <__sflush_r+0x44>
 8009820:	6863      	ldr	r3, [r4, #4]
 8009822:	1ad2      	subs	r2, r2, r3
 8009824:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009826:	b10b      	cbz	r3, 800982c <__sflush_r+0x44>
 8009828:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800982a:	1ad2      	subs	r2, r2, r3
 800982c:	2300      	movs	r3, #0
 800982e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009830:	6a21      	ldr	r1, [r4, #32]
 8009832:	4628      	mov	r0, r5
 8009834:	47b0      	blx	r6
 8009836:	1c43      	adds	r3, r0, #1
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	d106      	bne.n	800984a <__sflush_r+0x62>
 800983c:	6829      	ldr	r1, [r5, #0]
 800983e:	291d      	cmp	r1, #29
 8009840:	d82b      	bhi.n	800989a <__sflush_r+0xb2>
 8009842:	4a2a      	ldr	r2, [pc, #168]	@ (80098ec <__sflush_r+0x104>)
 8009844:	410a      	asrs	r2, r1
 8009846:	07d6      	lsls	r6, r2, #31
 8009848:	d427      	bmi.n	800989a <__sflush_r+0xb2>
 800984a:	2200      	movs	r2, #0
 800984c:	6062      	str	r2, [r4, #4]
 800984e:	04d9      	lsls	r1, r3, #19
 8009850:	6922      	ldr	r2, [r4, #16]
 8009852:	6022      	str	r2, [r4, #0]
 8009854:	d504      	bpl.n	8009860 <__sflush_r+0x78>
 8009856:	1c42      	adds	r2, r0, #1
 8009858:	d101      	bne.n	800985e <__sflush_r+0x76>
 800985a:	682b      	ldr	r3, [r5, #0]
 800985c:	b903      	cbnz	r3, 8009860 <__sflush_r+0x78>
 800985e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009860:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009862:	602f      	str	r7, [r5, #0]
 8009864:	b1b9      	cbz	r1, 8009896 <__sflush_r+0xae>
 8009866:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800986a:	4299      	cmp	r1, r3
 800986c:	d002      	beq.n	8009874 <__sflush_r+0x8c>
 800986e:	4628      	mov	r0, r5
 8009870:	f7ff fca0 	bl	80091b4 <_free_r>
 8009874:	2300      	movs	r3, #0
 8009876:	6363      	str	r3, [r4, #52]	@ 0x34
 8009878:	e00d      	b.n	8009896 <__sflush_r+0xae>
 800987a:	2301      	movs	r3, #1
 800987c:	4628      	mov	r0, r5
 800987e:	47b0      	blx	r6
 8009880:	4602      	mov	r2, r0
 8009882:	1c50      	adds	r0, r2, #1
 8009884:	d1c9      	bne.n	800981a <__sflush_r+0x32>
 8009886:	682b      	ldr	r3, [r5, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d0c6      	beq.n	800981a <__sflush_r+0x32>
 800988c:	2b1d      	cmp	r3, #29
 800988e:	d001      	beq.n	8009894 <__sflush_r+0xac>
 8009890:	2b16      	cmp	r3, #22
 8009892:	d11e      	bne.n	80098d2 <__sflush_r+0xea>
 8009894:	602f      	str	r7, [r5, #0]
 8009896:	2000      	movs	r0, #0
 8009898:	e022      	b.n	80098e0 <__sflush_r+0xf8>
 800989a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800989e:	b21b      	sxth	r3, r3
 80098a0:	e01b      	b.n	80098da <__sflush_r+0xf2>
 80098a2:	690f      	ldr	r7, [r1, #16]
 80098a4:	2f00      	cmp	r7, #0
 80098a6:	d0f6      	beq.n	8009896 <__sflush_r+0xae>
 80098a8:	0793      	lsls	r3, r2, #30
 80098aa:	680e      	ldr	r6, [r1, #0]
 80098ac:	bf08      	it	eq
 80098ae:	694b      	ldreq	r3, [r1, #20]
 80098b0:	600f      	str	r7, [r1, #0]
 80098b2:	bf18      	it	ne
 80098b4:	2300      	movne	r3, #0
 80098b6:	eba6 0807 	sub.w	r8, r6, r7
 80098ba:	608b      	str	r3, [r1, #8]
 80098bc:	f1b8 0f00 	cmp.w	r8, #0
 80098c0:	dde9      	ble.n	8009896 <__sflush_r+0xae>
 80098c2:	6a21      	ldr	r1, [r4, #32]
 80098c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80098c6:	4643      	mov	r3, r8
 80098c8:	463a      	mov	r2, r7
 80098ca:	4628      	mov	r0, r5
 80098cc:	47b0      	blx	r6
 80098ce:	2800      	cmp	r0, #0
 80098d0:	dc08      	bgt.n	80098e4 <__sflush_r+0xfc>
 80098d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098da:	81a3      	strh	r3, [r4, #12]
 80098dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098e4:	4407      	add	r7, r0
 80098e6:	eba8 0800 	sub.w	r8, r8, r0
 80098ea:	e7e7      	b.n	80098bc <__sflush_r+0xd4>
 80098ec:	dfbffffe 	.word	0xdfbffffe

080098f0 <_fflush_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	690b      	ldr	r3, [r1, #16]
 80098f4:	4605      	mov	r5, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	b913      	cbnz	r3, 8009900 <_fflush_r+0x10>
 80098fa:	2500      	movs	r5, #0
 80098fc:	4628      	mov	r0, r5
 80098fe:	bd38      	pop	{r3, r4, r5, pc}
 8009900:	b118      	cbz	r0, 800990a <_fflush_r+0x1a>
 8009902:	6a03      	ldr	r3, [r0, #32]
 8009904:	b90b      	cbnz	r3, 800990a <_fflush_r+0x1a>
 8009906:	f7ff fb69 	bl	8008fdc <__sinit>
 800990a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d0f3      	beq.n	80098fa <_fflush_r+0xa>
 8009912:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009914:	07d0      	lsls	r0, r2, #31
 8009916:	d404      	bmi.n	8009922 <_fflush_r+0x32>
 8009918:	0599      	lsls	r1, r3, #22
 800991a:	d402      	bmi.n	8009922 <_fflush_r+0x32>
 800991c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800991e:	f7ff fc46 	bl	80091ae <__retarget_lock_acquire_recursive>
 8009922:	4628      	mov	r0, r5
 8009924:	4621      	mov	r1, r4
 8009926:	f7ff ff5f 	bl	80097e8 <__sflush_r>
 800992a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800992c:	07da      	lsls	r2, r3, #31
 800992e:	4605      	mov	r5, r0
 8009930:	d4e4      	bmi.n	80098fc <_fflush_r+0xc>
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	059b      	lsls	r3, r3, #22
 8009936:	d4e1      	bmi.n	80098fc <_fflush_r+0xc>
 8009938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800993a:	f7ff fc39 	bl	80091b0 <__retarget_lock_release_recursive>
 800993e:	e7dd      	b.n	80098fc <_fflush_r+0xc>

08009940 <__sread>:
 8009940:	b510      	push	{r4, lr}
 8009942:	460c      	mov	r4, r1
 8009944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009948:	f000 f978 	bl	8009c3c <_read_r>
 800994c:	2800      	cmp	r0, #0
 800994e:	bfab      	itete	ge
 8009950:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009952:	89a3      	ldrhlt	r3, [r4, #12]
 8009954:	181b      	addge	r3, r3, r0
 8009956:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800995a:	bfac      	ite	ge
 800995c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800995e:	81a3      	strhlt	r3, [r4, #12]
 8009960:	bd10      	pop	{r4, pc}

08009962 <__swrite>:
 8009962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009966:	461f      	mov	r7, r3
 8009968:	898b      	ldrh	r3, [r1, #12]
 800996a:	05db      	lsls	r3, r3, #23
 800996c:	4605      	mov	r5, r0
 800996e:	460c      	mov	r4, r1
 8009970:	4616      	mov	r6, r2
 8009972:	d505      	bpl.n	8009980 <__swrite+0x1e>
 8009974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009978:	2302      	movs	r3, #2
 800997a:	2200      	movs	r2, #0
 800997c:	f000 f94c 	bl	8009c18 <_lseek_r>
 8009980:	89a3      	ldrh	r3, [r4, #12]
 8009982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009986:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800998a:	81a3      	strh	r3, [r4, #12]
 800998c:	4632      	mov	r2, r6
 800998e:	463b      	mov	r3, r7
 8009990:	4628      	mov	r0, r5
 8009992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009996:	f000 b963 	b.w	8009c60 <_write_r>

0800999a <__sseek>:
 800999a:	b510      	push	{r4, lr}
 800999c:	460c      	mov	r4, r1
 800999e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a2:	f000 f939 	bl	8009c18 <_lseek_r>
 80099a6:	1c43      	adds	r3, r0, #1
 80099a8:	89a3      	ldrh	r3, [r4, #12]
 80099aa:	bf15      	itete	ne
 80099ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80099ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80099b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80099b6:	81a3      	strheq	r3, [r4, #12]
 80099b8:	bf18      	it	ne
 80099ba:	81a3      	strhne	r3, [r4, #12]
 80099bc:	bd10      	pop	{r4, pc}

080099be <__sclose>:
 80099be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c2:	f000 b8f7 	b.w	8009bb4 <_close_r>

080099c6 <__swbuf_r>:
 80099c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c8:	460e      	mov	r6, r1
 80099ca:	4614      	mov	r4, r2
 80099cc:	4605      	mov	r5, r0
 80099ce:	b118      	cbz	r0, 80099d8 <__swbuf_r+0x12>
 80099d0:	6a03      	ldr	r3, [r0, #32]
 80099d2:	b90b      	cbnz	r3, 80099d8 <__swbuf_r+0x12>
 80099d4:	f7ff fb02 	bl	8008fdc <__sinit>
 80099d8:	69a3      	ldr	r3, [r4, #24]
 80099da:	60a3      	str	r3, [r4, #8]
 80099dc:	89a3      	ldrh	r3, [r4, #12]
 80099de:	071a      	lsls	r2, r3, #28
 80099e0:	d501      	bpl.n	80099e6 <__swbuf_r+0x20>
 80099e2:	6923      	ldr	r3, [r4, #16]
 80099e4:	b943      	cbnz	r3, 80099f8 <__swbuf_r+0x32>
 80099e6:	4621      	mov	r1, r4
 80099e8:	4628      	mov	r0, r5
 80099ea:	f000 f82b 	bl	8009a44 <__swsetup_r>
 80099ee:	b118      	cbz	r0, 80099f8 <__swbuf_r+0x32>
 80099f0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80099f4:	4638      	mov	r0, r7
 80099f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099f8:	6823      	ldr	r3, [r4, #0]
 80099fa:	6922      	ldr	r2, [r4, #16]
 80099fc:	1a98      	subs	r0, r3, r2
 80099fe:	6963      	ldr	r3, [r4, #20]
 8009a00:	b2f6      	uxtb	r6, r6
 8009a02:	4283      	cmp	r3, r0
 8009a04:	4637      	mov	r7, r6
 8009a06:	dc05      	bgt.n	8009a14 <__swbuf_r+0x4e>
 8009a08:	4621      	mov	r1, r4
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	f7ff ff70 	bl	80098f0 <_fflush_r>
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d1ed      	bne.n	80099f0 <__swbuf_r+0x2a>
 8009a14:	68a3      	ldr	r3, [r4, #8]
 8009a16:	3b01      	subs	r3, #1
 8009a18:	60a3      	str	r3, [r4, #8]
 8009a1a:	6823      	ldr	r3, [r4, #0]
 8009a1c:	1c5a      	adds	r2, r3, #1
 8009a1e:	6022      	str	r2, [r4, #0]
 8009a20:	701e      	strb	r6, [r3, #0]
 8009a22:	6962      	ldr	r2, [r4, #20]
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d004      	beq.n	8009a34 <__swbuf_r+0x6e>
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	07db      	lsls	r3, r3, #31
 8009a2e:	d5e1      	bpl.n	80099f4 <__swbuf_r+0x2e>
 8009a30:	2e0a      	cmp	r6, #10
 8009a32:	d1df      	bne.n	80099f4 <__swbuf_r+0x2e>
 8009a34:	4621      	mov	r1, r4
 8009a36:	4628      	mov	r0, r5
 8009a38:	f7ff ff5a 	bl	80098f0 <_fflush_r>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d0d9      	beq.n	80099f4 <__swbuf_r+0x2e>
 8009a40:	e7d6      	b.n	80099f0 <__swbuf_r+0x2a>
	...

08009a44 <__swsetup_r>:
 8009a44:	b538      	push	{r3, r4, r5, lr}
 8009a46:	4b29      	ldr	r3, [pc, #164]	@ (8009aec <__swsetup_r+0xa8>)
 8009a48:	4605      	mov	r5, r0
 8009a4a:	6818      	ldr	r0, [r3, #0]
 8009a4c:	460c      	mov	r4, r1
 8009a4e:	b118      	cbz	r0, 8009a58 <__swsetup_r+0x14>
 8009a50:	6a03      	ldr	r3, [r0, #32]
 8009a52:	b90b      	cbnz	r3, 8009a58 <__swsetup_r+0x14>
 8009a54:	f7ff fac2 	bl	8008fdc <__sinit>
 8009a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a5c:	0719      	lsls	r1, r3, #28
 8009a5e:	d422      	bmi.n	8009aa6 <__swsetup_r+0x62>
 8009a60:	06da      	lsls	r2, r3, #27
 8009a62:	d407      	bmi.n	8009a74 <__swsetup_r+0x30>
 8009a64:	2209      	movs	r2, #9
 8009a66:	602a      	str	r2, [r5, #0]
 8009a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a6c:	81a3      	strh	r3, [r4, #12]
 8009a6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a72:	e033      	b.n	8009adc <__swsetup_r+0x98>
 8009a74:	0758      	lsls	r0, r3, #29
 8009a76:	d512      	bpl.n	8009a9e <__swsetup_r+0x5a>
 8009a78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a7a:	b141      	cbz	r1, 8009a8e <__swsetup_r+0x4a>
 8009a7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a80:	4299      	cmp	r1, r3
 8009a82:	d002      	beq.n	8009a8a <__swsetup_r+0x46>
 8009a84:	4628      	mov	r0, r5
 8009a86:	f7ff fb95 	bl	80091b4 <_free_r>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a94:	81a3      	strh	r3, [r4, #12]
 8009a96:	2300      	movs	r3, #0
 8009a98:	6063      	str	r3, [r4, #4]
 8009a9a:	6923      	ldr	r3, [r4, #16]
 8009a9c:	6023      	str	r3, [r4, #0]
 8009a9e:	89a3      	ldrh	r3, [r4, #12]
 8009aa0:	f043 0308 	orr.w	r3, r3, #8
 8009aa4:	81a3      	strh	r3, [r4, #12]
 8009aa6:	6923      	ldr	r3, [r4, #16]
 8009aa8:	b94b      	cbnz	r3, 8009abe <__swsetup_r+0x7a>
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ab4:	d003      	beq.n	8009abe <__swsetup_r+0x7a>
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	4628      	mov	r0, r5
 8009aba:	f000 f83f 	bl	8009b3c <__smakebuf_r>
 8009abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ac2:	f013 0201 	ands.w	r2, r3, #1
 8009ac6:	d00a      	beq.n	8009ade <__swsetup_r+0x9a>
 8009ac8:	2200      	movs	r2, #0
 8009aca:	60a2      	str	r2, [r4, #8]
 8009acc:	6962      	ldr	r2, [r4, #20]
 8009ace:	4252      	negs	r2, r2
 8009ad0:	61a2      	str	r2, [r4, #24]
 8009ad2:	6922      	ldr	r2, [r4, #16]
 8009ad4:	b942      	cbnz	r2, 8009ae8 <__swsetup_r+0xa4>
 8009ad6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ada:	d1c5      	bne.n	8009a68 <__swsetup_r+0x24>
 8009adc:	bd38      	pop	{r3, r4, r5, pc}
 8009ade:	0799      	lsls	r1, r3, #30
 8009ae0:	bf58      	it	pl
 8009ae2:	6962      	ldrpl	r2, [r4, #20]
 8009ae4:	60a2      	str	r2, [r4, #8]
 8009ae6:	e7f4      	b.n	8009ad2 <__swsetup_r+0x8e>
 8009ae8:	2000      	movs	r0, #0
 8009aea:	e7f7      	b.n	8009adc <__swsetup_r+0x98>
 8009aec:	2000092c 	.word	0x2000092c

08009af0 <__swhatbuf_r>:
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	460c      	mov	r4, r1
 8009af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af8:	2900      	cmp	r1, #0
 8009afa:	b096      	sub	sp, #88	@ 0x58
 8009afc:	4615      	mov	r5, r2
 8009afe:	461e      	mov	r6, r3
 8009b00:	da0d      	bge.n	8009b1e <__swhatbuf_r+0x2e>
 8009b02:	89a3      	ldrh	r3, [r4, #12]
 8009b04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b08:	f04f 0100 	mov.w	r1, #0
 8009b0c:	bf14      	ite	ne
 8009b0e:	2340      	movne	r3, #64	@ 0x40
 8009b10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b14:	2000      	movs	r0, #0
 8009b16:	6031      	str	r1, [r6, #0]
 8009b18:	602b      	str	r3, [r5, #0]
 8009b1a:	b016      	add	sp, #88	@ 0x58
 8009b1c:	bd70      	pop	{r4, r5, r6, pc}
 8009b1e:	466a      	mov	r2, sp
 8009b20:	f000 f858 	bl	8009bd4 <_fstat_r>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	dbec      	blt.n	8009b02 <__swhatbuf_r+0x12>
 8009b28:	9901      	ldr	r1, [sp, #4]
 8009b2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b32:	4259      	negs	r1, r3
 8009b34:	4159      	adcs	r1, r3
 8009b36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b3a:	e7eb      	b.n	8009b14 <__swhatbuf_r+0x24>

08009b3c <__smakebuf_r>:
 8009b3c:	898b      	ldrh	r3, [r1, #12]
 8009b3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b40:	079d      	lsls	r5, r3, #30
 8009b42:	4606      	mov	r6, r0
 8009b44:	460c      	mov	r4, r1
 8009b46:	d507      	bpl.n	8009b58 <__smakebuf_r+0x1c>
 8009b48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	6123      	str	r3, [r4, #16]
 8009b50:	2301      	movs	r3, #1
 8009b52:	6163      	str	r3, [r4, #20]
 8009b54:	b003      	add	sp, #12
 8009b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b58:	ab01      	add	r3, sp, #4
 8009b5a:	466a      	mov	r2, sp
 8009b5c:	f7ff ffc8 	bl	8009af0 <__swhatbuf_r>
 8009b60:	9f00      	ldr	r7, [sp, #0]
 8009b62:	4605      	mov	r5, r0
 8009b64:	4639      	mov	r1, r7
 8009b66:	4630      	mov	r0, r6
 8009b68:	f7ff f920 	bl	8008dac <_malloc_r>
 8009b6c:	b948      	cbnz	r0, 8009b82 <__smakebuf_r+0x46>
 8009b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b72:	059a      	lsls	r2, r3, #22
 8009b74:	d4ee      	bmi.n	8009b54 <__smakebuf_r+0x18>
 8009b76:	f023 0303 	bic.w	r3, r3, #3
 8009b7a:	f043 0302 	orr.w	r3, r3, #2
 8009b7e:	81a3      	strh	r3, [r4, #12]
 8009b80:	e7e2      	b.n	8009b48 <__smakebuf_r+0xc>
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	6020      	str	r0, [r4, #0]
 8009b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b8a:	81a3      	strh	r3, [r4, #12]
 8009b8c:	9b01      	ldr	r3, [sp, #4]
 8009b8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b92:	b15b      	cbz	r3, 8009bac <__smakebuf_r+0x70>
 8009b94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b98:	4630      	mov	r0, r6
 8009b9a:	f000 f82d 	bl	8009bf8 <_isatty_r>
 8009b9e:	b128      	cbz	r0, 8009bac <__smakebuf_r+0x70>
 8009ba0:	89a3      	ldrh	r3, [r4, #12]
 8009ba2:	f023 0303 	bic.w	r3, r3, #3
 8009ba6:	f043 0301 	orr.w	r3, r3, #1
 8009baa:	81a3      	strh	r3, [r4, #12]
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	431d      	orrs	r5, r3
 8009bb0:	81a5      	strh	r5, [r4, #12]
 8009bb2:	e7cf      	b.n	8009b54 <__smakebuf_r+0x18>

08009bb4 <_close_r>:
 8009bb4:	b538      	push	{r3, r4, r5, lr}
 8009bb6:	4d06      	ldr	r5, [pc, #24]	@ (8009bd0 <_close_r+0x1c>)
 8009bb8:	2300      	movs	r3, #0
 8009bba:	4604      	mov	r4, r0
 8009bbc:	4608      	mov	r0, r1
 8009bbe:	602b      	str	r3, [r5, #0]
 8009bc0:	f000 f994 	bl	8009eec <_close>
 8009bc4:	1c43      	adds	r3, r0, #1
 8009bc6:	d102      	bne.n	8009bce <_close_r+0x1a>
 8009bc8:	682b      	ldr	r3, [r5, #0]
 8009bca:	b103      	cbz	r3, 8009bce <_close_r+0x1a>
 8009bcc:	6023      	str	r3, [r4, #0]
 8009bce:	bd38      	pop	{r3, r4, r5, pc}
 8009bd0:	20001654 	.word	0x20001654

08009bd4 <_fstat_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	4d07      	ldr	r5, [pc, #28]	@ (8009bf4 <_fstat_r+0x20>)
 8009bd8:	2300      	movs	r3, #0
 8009bda:	4604      	mov	r4, r0
 8009bdc:	4608      	mov	r0, r1
 8009bde:	4611      	mov	r1, r2
 8009be0:	602b      	str	r3, [r5, #0]
 8009be2:	f000 f98b 	bl	8009efc <_fstat>
 8009be6:	1c43      	adds	r3, r0, #1
 8009be8:	d102      	bne.n	8009bf0 <_fstat_r+0x1c>
 8009bea:	682b      	ldr	r3, [r5, #0]
 8009bec:	b103      	cbz	r3, 8009bf0 <_fstat_r+0x1c>
 8009bee:	6023      	str	r3, [r4, #0]
 8009bf0:	bd38      	pop	{r3, r4, r5, pc}
 8009bf2:	bf00      	nop
 8009bf4:	20001654 	.word	0x20001654

08009bf8 <_isatty_r>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	4d06      	ldr	r5, [pc, #24]	@ (8009c14 <_isatty_r+0x1c>)
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	4604      	mov	r4, r0
 8009c00:	4608      	mov	r0, r1
 8009c02:	602b      	str	r3, [r5, #0]
 8009c04:	f000 f982 	bl	8009f0c <_isatty>
 8009c08:	1c43      	adds	r3, r0, #1
 8009c0a:	d102      	bne.n	8009c12 <_isatty_r+0x1a>
 8009c0c:	682b      	ldr	r3, [r5, #0]
 8009c0e:	b103      	cbz	r3, 8009c12 <_isatty_r+0x1a>
 8009c10:	6023      	str	r3, [r4, #0]
 8009c12:	bd38      	pop	{r3, r4, r5, pc}
 8009c14:	20001654 	.word	0x20001654

08009c18 <_lseek_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4d07      	ldr	r5, [pc, #28]	@ (8009c38 <_lseek_r+0x20>)
 8009c1c:	4604      	mov	r4, r0
 8009c1e:	4608      	mov	r0, r1
 8009c20:	4611      	mov	r1, r2
 8009c22:	2200      	movs	r2, #0
 8009c24:	602a      	str	r2, [r5, #0]
 8009c26:	461a      	mov	r2, r3
 8009c28:	f000 f978 	bl	8009f1c <_lseek>
 8009c2c:	1c43      	adds	r3, r0, #1
 8009c2e:	d102      	bne.n	8009c36 <_lseek_r+0x1e>
 8009c30:	682b      	ldr	r3, [r5, #0]
 8009c32:	b103      	cbz	r3, 8009c36 <_lseek_r+0x1e>
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	bd38      	pop	{r3, r4, r5, pc}
 8009c38:	20001654 	.word	0x20001654

08009c3c <_read_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	4d07      	ldr	r5, [pc, #28]	@ (8009c5c <_read_r+0x20>)
 8009c40:	4604      	mov	r4, r0
 8009c42:	4608      	mov	r0, r1
 8009c44:	4611      	mov	r1, r2
 8009c46:	2200      	movs	r2, #0
 8009c48:	602a      	str	r2, [r5, #0]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f000 f96e 	bl	8009f2c <_read>
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	d102      	bne.n	8009c5a <_read_r+0x1e>
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	b103      	cbz	r3, 8009c5a <_read_r+0x1e>
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	bd38      	pop	{r3, r4, r5, pc}
 8009c5c:	20001654 	.word	0x20001654

08009c60 <_write_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4d07      	ldr	r5, [pc, #28]	@ (8009c80 <_write_r+0x20>)
 8009c64:	4604      	mov	r4, r0
 8009c66:	4608      	mov	r0, r1
 8009c68:	4611      	mov	r1, r2
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	602a      	str	r2, [r5, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	f000 f964 	bl	8009f3c <_write>
 8009c74:	1c43      	adds	r3, r0, #1
 8009c76:	d102      	bne.n	8009c7e <_write_r+0x1e>
 8009c78:	682b      	ldr	r3, [r5, #0]
 8009c7a:	b103      	cbz	r3, 8009c7e <_write_r+0x1e>
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	bd38      	pop	{r3, r4, r5, pc}
 8009c80:	20001654 	.word	0x20001654

08009c84 <expf>:
 8009c84:	b508      	push	{r3, lr}
 8009c86:	ed2d 8b02 	vpush	{d8}
 8009c8a:	eef0 8a40 	vmov.f32	s17, s0
 8009c8e:	f000 f839 	bl	8009d04 <__ieee754_expf>
 8009c92:	eeb0 8a40 	vmov.f32	s16, s0
 8009c96:	eeb0 0a68 	vmov.f32	s0, s17
 8009c9a:	f000 f829 	bl	8009cf0 <finitef>
 8009c9e:	b160      	cbz	r0, 8009cba <expf+0x36>
 8009ca0:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8009ce0 <expf+0x5c>
 8009ca4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cac:	dd0a      	ble.n	8009cc4 <expf+0x40>
 8009cae:	f7ff fa53 	bl	8009158 <__errno>
 8009cb2:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8009ce4 <expf+0x60>
 8009cb6:	2322      	movs	r3, #34	@ 0x22
 8009cb8:	6003      	str	r3, [r0, #0]
 8009cba:	eeb0 0a48 	vmov.f32	s0, s16
 8009cbe:	ecbd 8b02 	vpop	{d8}
 8009cc2:	bd08      	pop	{r3, pc}
 8009cc4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8009ce8 <expf+0x64>
 8009cc8:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd0:	d5f3      	bpl.n	8009cba <expf+0x36>
 8009cd2:	f7ff fa41 	bl	8009158 <__errno>
 8009cd6:	2322      	movs	r3, #34	@ 0x22
 8009cd8:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8009cec <expf+0x68>
 8009cdc:	6003      	str	r3, [r0, #0]
 8009cde:	e7ec      	b.n	8009cba <expf+0x36>
 8009ce0:	42b17217 	.word	0x42b17217
 8009ce4:	7f800000 	.word	0x7f800000
 8009ce8:	c2cff1b5 	.word	0xc2cff1b5
 8009cec:	00000000 	.word	0x00000000

08009cf0 <finitef>:
 8009cf0:	ee10 3a10 	vmov	r3, s0
 8009cf4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8009cf8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009cfc:	bfac      	ite	ge
 8009cfe:	2000      	movge	r0, #0
 8009d00:	2001      	movlt	r0, #1
 8009d02:	4770      	bx	lr

08009d04 <__ieee754_expf>:
 8009d04:	ee10 2a10 	vmov	r2, s0
 8009d08:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8009d0c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009d10:	d902      	bls.n	8009d18 <__ieee754_expf+0x14>
 8009d12:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009d16:	4770      	bx	lr
 8009d18:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8009d1c:	d106      	bne.n	8009d2c <__ieee754_expf+0x28>
 8009d1e:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8009e58 <__ieee754_expf+0x154>
 8009d22:	2900      	cmp	r1, #0
 8009d24:	bf18      	it	ne
 8009d26:	eeb0 0a67 	vmovne.f32	s0, s15
 8009d2a:	4770      	bx	lr
 8009d2c:	484b      	ldr	r0, [pc, #300]	@ (8009e5c <__ieee754_expf+0x158>)
 8009d2e:	4282      	cmp	r2, r0
 8009d30:	dd02      	ble.n	8009d38 <__ieee754_expf+0x34>
 8009d32:	2000      	movs	r0, #0
 8009d34:	f000 b8d4 	b.w	8009ee0 <__math_oflowf>
 8009d38:	2a00      	cmp	r2, #0
 8009d3a:	da05      	bge.n	8009d48 <__ieee754_expf+0x44>
 8009d3c:	4a48      	ldr	r2, [pc, #288]	@ (8009e60 <__ieee754_expf+0x15c>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d902      	bls.n	8009d48 <__ieee754_expf+0x44>
 8009d42:	2000      	movs	r0, #0
 8009d44:	f000 b8c6 	b.w	8009ed4 <__math_uflowf>
 8009d48:	4a46      	ldr	r2, [pc, #280]	@ (8009e64 <__ieee754_expf+0x160>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8009d50:	d952      	bls.n	8009df8 <__ieee754_expf+0xf4>
 8009d52:	4a45      	ldr	r2, [pc, #276]	@ (8009e68 <__ieee754_expf+0x164>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8009d5a:	d834      	bhi.n	8009dc6 <__ieee754_expf+0xc2>
 8009d5c:	4b43      	ldr	r3, [pc, #268]	@ (8009e6c <__ieee754_expf+0x168>)
 8009d5e:	4413      	add	r3, r2
 8009d60:	ed93 7a00 	vldr	s14, [r3]
 8009d64:	4b42      	ldr	r3, [pc, #264]	@ (8009e70 <__ieee754_expf+0x16c>)
 8009d66:	4413      	add	r3, r2
 8009d68:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009d6c:	f1c1 0201 	rsb	r2, r1, #1
 8009d70:	edd3 7a00 	vldr	s15, [r3]
 8009d74:	1a52      	subs	r2, r2, r1
 8009d76:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009d7a:	ee20 6a00 	vmul.f32	s12, s0, s0
 8009d7e:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8009e74 <__ieee754_expf+0x170>
 8009d82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009e78 <__ieee754_expf+0x174>
 8009d86:	eee6 6a05 	vfma.f32	s13, s12, s10
 8009d8a:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8009e7c <__ieee754_expf+0x178>
 8009d8e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009d92:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009e80 <__ieee754_expf+0x17c>
 8009d96:	eee5 6a06 	vfma.f32	s13, s10, s12
 8009d9a:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8009e84 <__ieee754_expf+0x180>
 8009d9e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009da2:	eef0 6a40 	vmov.f32	s13, s0
 8009da6:	eee5 6a46 	vfms.f32	s13, s10, s12
 8009daa:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8009dae:	ee20 5a26 	vmul.f32	s10, s0, s13
 8009db2:	bb92      	cbnz	r2, 8009e1a <__ieee754_expf+0x116>
 8009db4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009db8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009dbc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009dc0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8009dc4:	4770      	bx	lr
 8009dc6:	4b30      	ldr	r3, [pc, #192]	@ (8009e88 <__ieee754_expf+0x184>)
 8009dc8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8009e8c <__ieee754_expf+0x188>
 8009dcc:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8009e90 <__ieee754_expf+0x18c>
 8009dd0:	4413      	add	r3, r2
 8009dd2:	edd3 7a00 	vldr	s15, [r3]
 8009dd6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009dda:	eeb0 7a40 	vmov.f32	s14, s0
 8009dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009de2:	ee17 2a90 	vmov	r2, s15
 8009de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dea:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009dee:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8009e94 <__ieee754_expf+0x190>
 8009df2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009df6:	e7be      	b.n	8009d76 <__ieee754_expf+0x72>
 8009df8:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8009dfc:	d20b      	bcs.n	8009e16 <__ieee754_expf+0x112>
 8009dfe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009e98 <__ieee754_expf+0x194>
 8009e02:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009e06:	eef4 6ae5 	vcmpe.f32	s13, s11
 8009e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e0e:	dd02      	ble.n	8009e16 <__ieee754_expf+0x112>
 8009e10:	ee30 0a25 	vadd.f32	s0, s0, s11
 8009e14:	4770      	bx	lr
 8009e16:	2200      	movs	r2, #0
 8009e18:	e7af      	b.n	8009d7a <__ieee754_expf+0x76>
 8009e1a:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009e1e:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8009e22:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8009e26:	bfb8      	it	lt
 8009e28:	3264      	addlt	r2, #100	@ 0x64
 8009e2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009e2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e32:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009e36:	ee17 3a90 	vmov	r3, s15
 8009e3a:	bfab      	itete	ge
 8009e3c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009e40:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009e44:	ee00 3a10 	vmovge	s0, r3
 8009e48:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8009e9c <__ieee754_expf+0x198>
 8009e4c:	bfbc      	itt	lt
 8009e4e:	ee00 3a10 	vmovlt	s0, r3
 8009e52:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8009e56:	4770      	bx	lr
 8009e58:	00000000 	.word	0x00000000
 8009e5c:	42b17217 	.word	0x42b17217
 8009e60:	42cff1b5 	.word	0x42cff1b5
 8009e64:	3eb17218 	.word	0x3eb17218
 8009e68:	3f851591 	.word	0x3f851591
 8009e6c:	08015254 	.word	0x08015254
 8009e70:	0801524c 	.word	0x0801524c
 8009e74:	3331bb4c 	.word	0x3331bb4c
 8009e78:	b5ddea0e 	.word	0xb5ddea0e
 8009e7c:	388ab355 	.word	0x388ab355
 8009e80:	bb360b61 	.word	0xbb360b61
 8009e84:	3e2aaaab 	.word	0x3e2aaaab
 8009e88:	0801525c 	.word	0x0801525c
 8009e8c:	3fb8aa3b 	.word	0x3fb8aa3b
 8009e90:	3f317180 	.word	0x3f317180
 8009e94:	3717f7d1 	.word	0x3717f7d1
 8009e98:	7149f2ca 	.word	0x7149f2ca
 8009e9c:	0d800000 	.word	0x0d800000

08009ea0 <with_errnof>:
 8009ea0:	b510      	push	{r4, lr}
 8009ea2:	ed2d 8b02 	vpush	{d8}
 8009ea6:	eeb0 8a40 	vmov.f32	s16, s0
 8009eaa:	4604      	mov	r4, r0
 8009eac:	f7ff f954 	bl	8009158 <__errno>
 8009eb0:	eeb0 0a48 	vmov.f32	s0, s16
 8009eb4:	ecbd 8b02 	vpop	{d8}
 8009eb8:	6004      	str	r4, [r0, #0]
 8009eba:	bd10      	pop	{r4, pc}

08009ebc <xflowf>:
 8009ebc:	b130      	cbz	r0, 8009ecc <xflowf+0x10>
 8009ebe:	eef1 7a40 	vneg.f32	s15, s0
 8009ec2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009ec6:	2022      	movs	r0, #34	@ 0x22
 8009ec8:	f7ff bfea 	b.w	8009ea0 <with_errnof>
 8009ecc:	eef0 7a40 	vmov.f32	s15, s0
 8009ed0:	e7f7      	b.n	8009ec2 <xflowf+0x6>
	...

08009ed4 <__math_uflowf>:
 8009ed4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009edc <__math_uflowf+0x8>
 8009ed8:	f7ff bff0 	b.w	8009ebc <xflowf>
 8009edc:	10000000 	.word	0x10000000

08009ee0 <__math_oflowf>:
 8009ee0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009ee8 <__math_oflowf+0x8>
 8009ee4:	f7ff bfea 	b.w	8009ebc <xflowf>
 8009ee8:	70000000 	.word	0x70000000

08009eec <_close>:
 8009eec:	4b02      	ldr	r3, [pc, #8]	@ (8009ef8 <_close+0xc>)
 8009eee:	2258      	movs	r2, #88	@ 0x58
 8009ef0:	601a      	str	r2, [r3, #0]
 8009ef2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ef6:	4770      	bx	lr
 8009ef8:	20001654 	.word	0x20001654

08009efc <_fstat>:
 8009efc:	4b02      	ldr	r3, [pc, #8]	@ (8009f08 <_fstat+0xc>)
 8009efe:	2258      	movs	r2, #88	@ 0x58
 8009f00:	601a      	str	r2, [r3, #0]
 8009f02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f06:	4770      	bx	lr
 8009f08:	20001654 	.word	0x20001654

08009f0c <_isatty>:
 8009f0c:	4b02      	ldr	r3, [pc, #8]	@ (8009f18 <_isatty+0xc>)
 8009f0e:	2258      	movs	r2, #88	@ 0x58
 8009f10:	601a      	str	r2, [r3, #0]
 8009f12:	2000      	movs	r0, #0
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	20001654 	.word	0x20001654

08009f1c <_lseek>:
 8009f1c:	4b02      	ldr	r3, [pc, #8]	@ (8009f28 <_lseek+0xc>)
 8009f1e:	2258      	movs	r2, #88	@ 0x58
 8009f20:	601a      	str	r2, [r3, #0]
 8009f22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f26:	4770      	bx	lr
 8009f28:	20001654 	.word	0x20001654

08009f2c <_read>:
 8009f2c:	4b02      	ldr	r3, [pc, #8]	@ (8009f38 <_read+0xc>)
 8009f2e:	2258      	movs	r2, #88	@ 0x58
 8009f30:	601a      	str	r2, [r3, #0]
 8009f32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f36:	4770      	bx	lr
 8009f38:	20001654 	.word	0x20001654

08009f3c <_write>:
 8009f3c:	4b02      	ldr	r3, [pc, #8]	@ (8009f48 <_write+0xc>)
 8009f3e:	2258      	movs	r2, #88	@ 0x58
 8009f40:	601a      	str	r2, [r3, #0]
 8009f42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f46:	4770      	bx	lr
 8009f48:	20001654 	.word	0x20001654

08009f4c <_init>:
 8009f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4e:	bf00      	nop
 8009f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f52:	bc08      	pop	{r3}
 8009f54:	469e      	mov	lr, r3
 8009f56:	4770      	bx	lr

08009f58 <_fini>:
 8009f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f5a:	bf00      	nop
 8009f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f5e:	bc08      	pop	{r3}
 8009f60:	469e      	mov	lr, r3
 8009f62:	4770      	bx	lr
